
12_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001568  08001568  00002568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015b4  080015b4  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080015b4  080015b4  000025b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015bc  080015bc  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015bc  080015bc  000025bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015c0  080015c0  000025c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080015c4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001624  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001624  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002338  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000098b  00000000  00000000  000053c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f0  00000000  00000000  00005d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000209  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000256d  00000000  00000000  00006251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000041e3  00000000  00000000  000087be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b81  00000000  00000000  0000c9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00090522  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010c4  00000000  00000000  00090568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0009162c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001550 	.word	0x08001550

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08001550 	.word	0x08001550

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <tim2_1hz_init>:
#include <stm32f4xx.h>

#define tim2en  (1U<<0)
#define CR1_CEN	 (1U<<0)
void tim2_1hz_init(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0


	//enable clock access at clock 2
	RCC->APB1ENR |=tim2en;
 8000284:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <tim2_1hz_init+0x48>)
 8000286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000288:	4a0f      	ldr	r2, [pc, #60]	@ (80002c8 <tim2_1hz_init+0x48>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6413      	str	r3, [r2, #64]	@ 0x40
	//set the prescalar value
	TIM2->PSC=1600-1;//16 000 000/1600=10 000
 8000290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000294:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000298:	629a      	str	r2, [r3, #40]	@ 0x28
	//auto reload value
	TIM2->ARR=10000-1;//10000/10000=1HZ
 800029a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	//clear the tim/counter
	TIM2->CNT =0;
 80002a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a8:	2200      	movs	r2, #0
 80002aa:	625a      	str	r2, [r3, #36]	@ 0x24
	//enable the timer
	TIM2->CR1|=CR1_CEN;
 80002ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6013      	str	r3, [r2, #0]
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800

080002cc <main>:
#include "systick.h"
#define SR_UIF (1U<<0)
#define GPIOAEN (1U<<0)
#define PIN5 (1U<<5)
#define LED_PIN PIN5
int main(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0


	RCC->AHB1ENR |= GPIOAEN;
 80002d0:	4b17      	ldr	r3, [pc, #92]	@ (8000330 <main+0x64>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d4:	4a16      	ldr	r2, [pc, #88]	@ (8000330 <main+0x64>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER |=(1U<<10);
 80002dc:	4b15      	ldr	r3, [pc, #84]	@ (8000334 <main+0x68>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a14      	ldr	r2, [pc, #80]	@ (8000334 <main+0x68>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <main+0x68>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a11      	ldr	r2, [pc, #68]	@ (8000334 <main+0x68>)
 80002ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002f2:	6013      	str	r3, [r2, #0]


	 UART2_RXTX_INIT();
 80002f4:	f000 f92c 	bl	8000550 <UART2_RXTX_INIT>
		tim2_1hz_init();
 80002f8:	f7ff ffc2 	bl	8000280 <tim2_1hz_init>
	while(1){
		//wit for uif
		while(!(TIM2->SR & SR_UIF)){}
 80002fc:	bf00      	nop
 80002fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000302:	691b      	ldr	r3, [r3, #16]
 8000304:	f003 0301 	and.w	r3, r3, #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f8      	beq.n	80002fe <main+0x32>
		//clear uif
		TIM2->SR&=~SR_UIF;
 800030c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000310:	691b      	ldr	r3, [r3, #16]
 8000312:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000316:	f023 0301 	bic.w	r3, r3, #1
 800031a:	6113      	str	r3, [r2, #16]
	printf("A second is passed!! \n \r");
 800031c:	4806      	ldr	r0, [pc, #24]	@ (8000338 <main+0x6c>)
 800031e:	f000 faab 	bl	8000878 <iprintf>
	GPIOA->ODR ^= LED_PIN;
 8000322:	4b04      	ldr	r3, [pc, #16]	@ (8000334 <main+0x68>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a03      	ldr	r2, [pc, #12]	@ (8000334 <main+0x68>)
 8000328:	f083 0320 	eor.w	r3, r3, #32
 800032c:	6153      	str	r3, [r2, #20]
		while(!(TIM2->SR & SR_UIF)){}
 800032e:	e7e5      	b.n	80002fc <main+0x30>
 8000330:	40023800 	.word	0x40023800
 8000334:	40020000 	.word	0x40020000
 8000338:	08001568 	.word	0x08001568

0800033c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <NMI_Handler+0x4>

08000344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <HardFault_Handler+0x4>

0800034c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <MemManage_Handler+0x4>

08000354 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <BusFault_Handler+0x4>

0800035c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <UsageFault_Handler+0x4>

08000364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000392:	f000 f99b 	bl	80006cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}

0800039a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b086      	sub	sp, #24
 800039e:	af00      	add	r7, sp, #0
 80003a0:	60f8      	str	r0, [r7, #12]
 80003a2:	60b9      	str	r1, [r7, #8]
 80003a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
 80003aa:	e00a      	b.n	80003c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003ac:	f3af 8000 	nop.w
 80003b0:	4601      	mov	r1, r0
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	1c5a      	adds	r2, r3, #1
 80003b6:	60ba      	str	r2, [r7, #8]
 80003b8:	b2ca      	uxtb	r2, r1
 80003ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	3301      	adds	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	697a      	ldr	r2, [r7, #20]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	dbf0      	blt.n	80003ac <_read+0x12>
  }

  return len;
 80003ca:	687b      	ldr	r3, [r7, #4]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3718      	adds	r7, #24
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	e009      	b.n	80003fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	1c5a      	adds	r2, r3, #1
 80003ea:	60ba      	str	r2, [r7, #8]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f936 	bl	8000660 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	3301      	adds	r3, #1
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	429a      	cmp	r2, r3
 8000400:	dbf1      	blt.n	80003e6 <_write+0x12>
  }
  return len;
 8000402:	687b      	ldr	r3, [r7, #4]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <_close>:

int _close(int file)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000434:	605a      	str	r2, [r3, #4]
  return 0;
 8000436:	2300      	movs	r3, #0
}
 8000438:	4618      	mov	r0, r3
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <_isatty>:

int _isatty(int file)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800044c:	2301      	movs	r3, #1
}
 800044e:	4618      	mov	r0, r3
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800045a:	b480      	push	{r7}
 800045c:	b085      	sub	sp, #20
 800045e:	af00      	add	r7, sp, #0
 8000460:	60f8      	str	r0, [r7, #12]
 8000462:	60b9      	str	r1, [r7, #8]
 8000464:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000466:	2300      	movs	r3, #0
}
 8000468:	4618      	mov	r0, r3
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800047c:	4a14      	ldr	r2, [pc, #80]	@ (80004d0 <_sbrk+0x5c>)
 800047e:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <_sbrk+0x60>)
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <_sbrk+0x64>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d102      	bne.n	8000496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000490:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <_sbrk+0x64>)
 8000492:	4a12      	ldr	r2, [pc, #72]	@ (80004dc <_sbrk+0x68>)
 8000494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000496:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <_sbrk+0x64>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4413      	add	r3, r2
 800049e:	693a      	ldr	r2, [r7, #16]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d207      	bcs.n	80004b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004a4:	f000 fa8c 	bl	80009c0 <__errno>
 80004a8:	4603      	mov	r3, r0
 80004aa:	220c      	movs	r2, #12
 80004ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ae:	f04f 33ff 	mov.w	r3, #4294967295
 80004b2:	e009      	b.n	80004c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <_sbrk+0x64>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ba:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <_sbrk+0x64>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	4a05      	ldr	r2, [pc, #20]	@ (80004d8 <_sbrk+0x64>)
 80004c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3718      	adds	r7, #24
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20018000 	.word	0x20018000
 80004d4:	00000400 	.word	0x00000400
 80004d8:	2000007c 	.word	0x2000007c
 80004dc:	200001d0 	.word	0x200001d0

080004e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <SystemInit+0x20>)
 80004e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ea:	4a05      	ldr	r2, [pc, #20]	@ (8000500 <SystemInit+0x20>)
 80004ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <uart_set_baudrate>:
static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate);
int __io_putchar(int ch);



static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate){
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compute_uart_div(Perif_clk,Baudrate);
 8000510:	6879      	ldr	r1, [r7, #4]
 8000512:	68b8      	ldr	r0, [r7, #8]
 8000514:	f000 f808 	bl	8000528 <compute_uart_div>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	609a      	str	r2, [r3, #8]
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <compute_uart_div>:


static uint16_t compute_uart_div(uint32_t Perif_clk,uint32_t Baudrate){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	return ((Perif_clk +(Baudrate/2U))/Baudrate);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	085a      	lsrs	r2, r3, #1
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	441a      	add	r2, r3
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000540:	b29b      	uxth	r3, r3

}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
	...

08000550 <UART2_RXTX_INIT>:




void UART2_RXTX_INIT(void){
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	/*************congiure uart gpio pin*************/
	//enable clock to gpioa
	RCC->AHB1ENR|=GPIOAEN;
 8000554:	4b32      	ldr	r3, [pc, #200]	@ (8000620 <UART2_RXTX_INIT+0xd0>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000558:	4a31      	ldr	r2, [pc, #196]	@ (8000620 <UART2_RXTX_INIT+0xd0>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6313      	str	r3, [r2, #48]	@ 0x30
	//set pa2 to alternate function mode
	GPIOA->MODER|=(1U<<5);
 8000560:	4b30      	ldr	r3, [pc, #192]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a2f      	ldr	r2, [pc, #188]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<4);
 800056c:	4b2d      	ldr	r3, [pc, #180]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a2c      	ldr	r2, [pc, #176]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 8000572:	f023 0310 	bic.w	r3, r3, #16
 8000576:	6013      	str	r3, [r2, #0]
	//set pa2 alternate function type to UART_TX(AF07)
	GPIOA->AFR[0]|=(1U<<8);//for afrl low arf[0] and for afr high arf[1]
 8000578:	4b2a      	ldr	r3, [pc, #168]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 800057a:	6a1b      	ldr	r3, [r3, #32]
 800057c:	4a29      	ldr	r2, [pc, #164]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 800057e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000582:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<9);
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	4a26      	ldr	r2, [pc, #152]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800058e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<10);
 8000590:	4b24      	ldr	r3, [pc, #144]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	4a23      	ldr	r2, [pc, #140]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800059a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	4a20      	ldr	r2, [pc, #128]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005a6:	6213      	str	r3, [r2, #32]

   //set pa3 to alternate function mode as it is rx value
	GPIOA->MODER|=(1U<<7);
 80005a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<6);
 80005b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005be:	6013      	str	r3, [r2, #0]


	GPIOA->AFR[0]|=(1U<<12);//for afrl low arf[0] and for afr high arf[1]
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<13);
 80005cc:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005ce:	6a1b      	ldr	r3, [r3, #32]
 80005d0:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<14);
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	4a11      	ldr	r2, [pc, #68]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<15);
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005e6:	6a1b      	ldr	r3, [r3, #32]
 80005e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <UART2_RXTX_INIT+0xd4>)
 80005ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80005ee:	6213      	str	r3, [r2, #32]


	/*configure uart module*/
	//enable clock  to uart2
	RCC->APB1ENR|=UART_EN;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <UART2_RXTX_INIT+0xd0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000620 <UART2_RXTX_INIT+0xd0>)
 80005f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
	//configure baud rate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUD_RATE);
 80005fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000600:	4909      	ldr	r1, [pc, #36]	@ (8000628 <UART2_RXTX_INIT+0xd8>)
 8000602:	480a      	ldr	r0, [pc, #40]	@ (800062c <UART2_RXTX_INIT+0xdc>)
 8000604:	f7ff ff7e 	bl	8000504 <uart_set_baudrate>
	//configure the transfer direction
	USART2->CR1 =CR1_TE|CR1_RX;
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <UART2_RXTX_INIT+0xdc>)
 800060a:	220c      	movs	r2, #12
 800060c:	60da      	str	r2, [r3, #12]

	USART2->CR1|=(1U<<13);
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <UART2_RXTX_INIT+0xdc>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	4a06      	ldr	r2, [pc, #24]	@ (800062c <UART2_RXTX_INIT+0xdc>)
 8000614:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000618:	60d3      	str	r3, [r2, #12]
	//enable uart module
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	00f42400 	.word	0x00f42400
 800062c:	40004400 	.word	0x40004400

08000630 <uart2_write>:
	while(!(USART2->SR & SR_RXE)){}

	//return the data
	return USART2->DR;
}
void uart2_write(int ch){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	//make sure the transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 8000638:	bf00      	nop
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <uart2_write+0x2c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <uart2_write+0xa>
	//write to transmit data register
	USART2->DR = ch & 0xff;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <uart2_write+0x2c>)
 800064a:	b2db      	uxtb	r3, r3
 800064c:	6053      	str	r3, [r2, #4]

}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40004400 	.word	0x40004400

08000660 <__io_putchar>:
int __io_putchar(int ch){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ffe1 	bl	8000630 <uart2_write>
	return ch;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800067c:	f7ff ff30 	bl	80004e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000682:	490d      	ldr	r1, [pc, #52]	@ (80006b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000684:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000698:	4c0a      	ldr	r4, [pc, #40]	@ (80006c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80006a6:	f000 f991 	bl	80009cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006aa:	f7ff fe0f 	bl	80002cc <main>
  bx  lr    
 80006ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006bc:	080015c4 	.word	0x080015c4
  ldr r2, =_sbss
 80006c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006c4:	200001d0 	.word	0x200001d0

080006c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC_IRQHandler>
	...

080006cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <HAL_IncTick+0x20>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_IncTick+0x24>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	4a04      	ldr	r2, [pc, #16]	@ (80006f0 <HAL_IncTick+0x24>)
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000080 	.word	0x20000080

080006f4 <std>:
 80006f4:	2300      	movs	r3, #0
 80006f6:	b510      	push	{r4, lr}
 80006f8:	4604      	mov	r4, r0
 80006fa:	e9c0 3300 	strd	r3, r3, [r0]
 80006fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000702:	6083      	str	r3, [r0, #8]
 8000704:	8181      	strh	r1, [r0, #12]
 8000706:	6643      	str	r3, [r0, #100]	@ 0x64
 8000708:	81c2      	strh	r2, [r0, #14]
 800070a:	6183      	str	r3, [r0, #24]
 800070c:	4619      	mov	r1, r3
 800070e:	2208      	movs	r2, #8
 8000710:	305c      	adds	r0, #92	@ 0x5c
 8000712:	f000 f906 	bl	8000922 <memset>
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <std+0x58>)
 8000718:	6263      	str	r3, [r4, #36]	@ 0x24
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <std+0x5c>)
 800071c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <std+0x60>)
 8000720:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <std+0x64>)
 8000724:	6323      	str	r3, [r4, #48]	@ 0x30
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <std+0x68>)
 8000728:	6224      	str	r4, [r4, #32]
 800072a:	429c      	cmp	r4, r3
 800072c:	d006      	beq.n	800073c <std+0x48>
 800072e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000732:	4294      	cmp	r4, r2
 8000734:	d002      	beq.n	800073c <std+0x48>
 8000736:	33d0      	adds	r3, #208	@ 0xd0
 8000738:	429c      	cmp	r4, r3
 800073a:	d105      	bne.n	8000748 <std+0x54>
 800073c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000744:	f000 b966 	b.w	8000a14 <__retarget_lock_init_recursive>
 8000748:	bd10      	pop	{r4, pc}
 800074a:	bf00      	nop
 800074c:	0800089d 	.word	0x0800089d
 8000750:	080008bf 	.word	0x080008bf
 8000754:	080008f7 	.word	0x080008f7
 8000758:	0800091b 	.word	0x0800091b
 800075c:	20000084 	.word	0x20000084

08000760 <stdio_exit_handler>:
 8000760:	4a02      	ldr	r2, [pc, #8]	@ (800076c <stdio_exit_handler+0xc>)
 8000762:	4903      	ldr	r1, [pc, #12]	@ (8000770 <stdio_exit_handler+0x10>)
 8000764:	4803      	ldr	r0, [pc, #12]	@ (8000774 <stdio_exit_handler+0x14>)
 8000766:	f000 b869 	b.w	800083c <_fwalk_sglue>
 800076a:	bf00      	nop
 800076c:	20000004 	.word	0x20000004
 8000770:	080012b1 	.word	0x080012b1
 8000774:	20000014 	.word	0x20000014

08000778 <cleanup_stdio>:
 8000778:	6841      	ldr	r1, [r0, #4]
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <cleanup_stdio+0x34>)
 800077c:	4299      	cmp	r1, r3
 800077e:	b510      	push	{r4, lr}
 8000780:	4604      	mov	r4, r0
 8000782:	d001      	beq.n	8000788 <cleanup_stdio+0x10>
 8000784:	f000 fd94 	bl	80012b0 <_fflush_r>
 8000788:	68a1      	ldr	r1, [r4, #8]
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <cleanup_stdio+0x38>)
 800078c:	4299      	cmp	r1, r3
 800078e:	d002      	beq.n	8000796 <cleanup_stdio+0x1e>
 8000790:	4620      	mov	r0, r4
 8000792:	f000 fd8d 	bl	80012b0 <_fflush_r>
 8000796:	68e1      	ldr	r1, [r4, #12]
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <cleanup_stdio+0x3c>)
 800079a:	4299      	cmp	r1, r3
 800079c:	d004      	beq.n	80007a8 <cleanup_stdio+0x30>
 800079e:	4620      	mov	r0, r4
 80007a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a4:	f000 bd84 	b.w	80012b0 <_fflush_r>
 80007a8:	bd10      	pop	{r4, pc}
 80007aa:	bf00      	nop
 80007ac:	20000084 	.word	0x20000084
 80007b0:	200000ec 	.word	0x200000ec
 80007b4:	20000154 	.word	0x20000154

080007b8 <global_stdio_init.part.0>:
 80007b8:	b510      	push	{r4, lr}
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <global_stdio_init.part.0+0x30>)
 80007bc:	4c0b      	ldr	r4, [pc, #44]	@ (80007ec <global_stdio_init.part.0+0x34>)
 80007be:	4a0c      	ldr	r2, [pc, #48]	@ (80007f0 <global_stdio_init.part.0+0x38>)
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	4620      	mov	r0, r4
 80007c4:	2200      	movs	r2, #0
 80007c6:	2104      	movs	r1, #4
 80007c8:	f7ff ff94 	bl	80006f4 <std>
 80007cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007d0:	2201      	movs	r2, #1
 80007d2:	2109      	movs	r1, #9
 80007d4:	f7ff ff8e 	bl	80006f4 <std>
 80007d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007dc:	2202      	movs	r2, #2
 80007de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e2:	2112      	movs	r1, #18
 80007e4:	f7ff bf86 	b.w	80006f4 <std>
 80007e8:	200001bc 	.word	0x200001bc
 80007ec:	20000084 	.word	0x20000084
 80007f0:	08000761 	.word	0x08000761

080007f4 <__sfp_lock_acquire>:
 80007f4:	4801      	ldr	r0, [pc, #4]	@ (80007fc <__sfp_lock_acquire+0x8>)
 80007f6:	f000 b90e 	b.w	8000a16 <__retarget_lock_acquire_recursive>
 80007fa:	bf00      	nop
 80007fc:	200001c5 	.word	0x200001c5

08000800 <__sfp_lock_release>:
 8000800:	4801      	ldr	r0, [pc, #4]	@ (8000808 <__sfp_lock_release+0x8>)
 8000802:	f000 b909 	b.w	8000a18 <__retarget_lock_release_recursive>
 8000806:	bf00      	nop
 8000808:	200001c5 	.word	0x200001c5

0800080c <__sinit>:
 800080c:	b510      	push	{r4, lr}
 800080e:	4604      	mov	r4, r0
 8000810:	f7ff fff0 	bl	80007f4 <__sfp_lock_acquire>
 8000814:	6a23      	ldr	r3, [r4, #32]
 8000816:	b11b      	cbz	r3, 8000820 <__sinit+0x14>
 8000818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800081c:	f7ff bff0 	b.w	8000800 <__sfp_lock_release>
 8000820:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <__sinit+0x28>)
 8000822:	6223      	str	r3, [r4, #32]
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <__sinit+0x2c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f5      	bne.n	8000818 <__sinit+0xc>
 800082c:	f7ff ffc4 	bl	80007b8 <global_stdio_init.part.0>
 8000830:	e7f2      	b.n	8000818 <__sinit+0xc>
 8000832:	bf00      	nop
 8000834:	08000779 	.word	0x08000779
 8000838:	200001bc 	.word	0x200001bc

0800083c <_fwalk_sglue>:
 800083c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000840:	4607      	mov	r7, r0
 8000842:	4688      	mov	r8, r1
 8000844:	4614      	mov	r4, r2
 8000846:	2600      	movs	r6, #0
 8000848:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800084c:	f1b9 0901 	subs.w	r9, r9, #1
 8000850:	d505      	bpl.n	800085e <_fwalk_sglue+0x22>
 8000852:	6824      	ldr	r4, [r4, #0]
 8000854:	2c00      	cmp	r4, #0
 8000856:	d1f7      	bne.n	8000848 <_fwalk_sglue+0xc>
 8000858:	4630      	mov	r0, r6
 800085a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800085e:	89ab      	ldrh	r3, [r5, #12]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d907      	bls.n	8000874 <_fwalk_sglue+0x38>
 8000864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000868:	3301      	adds	r3, #1
 800086a:	d003      	beq.n	8000874 <_fwalk_sglue+0x38>
 800086c:	4629      	mov	r1, r5
 800086e:	4638      	mov	r0, r7
 8000870:	47c0      	blx	r8
 8000872:	4306      	orrs	r6, r0
 8000874:	3568      	adds	r5, #104	@ 0x68
 8000876:	e7e9      	b.n	800084c <_fwalk_sglue+0x10>

08000878 <iprintf>:
 8000878:	b40f      	push	{r0, r1, r2, r3}
 800087a:	b507      	push	{r0, r1, r2, lr}
 800087c:	4906      	ldr	r1, [pc, #24]	@ (8000898 <iprintf+0x20>)
 800087e:	ab04      	add	r3, sp, #16
 8000880:	6808      	ldr	r0, [r1, #0]
 8000882:	f853 2b04 	ldr.w	r2, [r3], #4
 8000886:	6881      	ldr	r1, [r0, #8]
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	f000 f9e9 	bl	8000c60 <_vfiprintf_r>
 800088e:	b003      	add	sp, #12
 8000890:	f85d eb04 	ldr.w	lr, [sp], #4
 8000894:	b004      	add	sp, #16
 8000896:	4770      	bx	lr
 8000898:	20000010 	.word	0x20000010

0800089c <__sread>:
 800089c:	b510      	push	{r4, lr}
 800089e:	460c      	mov	r4, r1
 80008a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a4:	f000 f868 	bl	8000978 <_read_r>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	bfab      	itete	ge
 80008ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008ae:	89a3      	ldrhlt	r3, [r4, #12]
 80008b0:	181b      	addge	r3, r3, r0
 80008b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008b6:	bfac      	ite	ge
 80008b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008ba:	81a3      	strhlt	r3, [r4, #12]
 80008bc:	bd10      	pop	{r4, pc}

080008be <__swrite>:
 80008be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008c2:	461f      	mov	r7, r3
 80008c4:	898b      	ldrh	r3, [r1, #12]
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	4605      	mov	r5, r0
 80008ca:	460c      	mov	r4, r1
 80008cc:	4616      	mov	r6, r2
 80008ce:	d505      	bpl.n	80008dc <__swrite+0x1e>
 80008d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d4:	2302      	movs	r3, #2
 80008d6:	2200      	movs	r2, #0
 80008d8:	f000 f83c 	bl	8000954 <_lseek_r>
 80008dc:	89a3      	ldrh	r3, [r4, #12]
 80008de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008e6:	81a3      	strh	r3, [r4, #12]
 80008e8:	4632      	mov	r2, r6
 80008ea:	463b      	mov	r3, r7
 80008ec:	4628      	mov	r0, r5
 80008ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008f2:	f000 b853 	b.w	800099c <_write_r>

080008f6 <__sseek>:
 80008f6:	b510      	push	{r4, lr}
 80008f8:	460c      	mov	r4, r1
 80008fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008fe:	f000 f829 	bl	8000954 <_lseek_r>
 8000902:	1c43      	adds	r3, r0, #1
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	bf15      	itete	ne
 8000908:	6560      	strne	r0, [r4, #84]	@ 0x54
 800090a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800090e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000912:	81a3      	strheq	r3, [r4, #12]
 8000914:	bf18      	it	ne
 8000916:	81a3      	strhne	r3, [r4, #12]
 8000918:	bd10      	pop	{r4, pc}

0800091a <__sclose>:
 800091a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800091e:	f000 b809 	b.w	8000934 <_close_r>

08000922 <memset>:
 8000922:	4402      	add	r2, r0
 8000924:	4603      	mov	r3, r0
 8000926:	4293      	cmp	r3, r2
 8000928:	d100      	bne.n	800092c <memset+0xa>
 800092a:	4770      	bx	lr
 800092c:	f803 1b01 	strb.w	r1, [r3], #1
 8000930:	e7f9      	b.n	8000926 <memset+0x4>
	...

08000934 <_close_r>:
 8000934:	b538      	push	{r3, r4, r5, lr}
 8000936:	4d06      	ldr	r5, [pc, #24]	@ (8000950 <_close_r+0x1c>)
 8000938:	2300      	movs	r3, #0
 800093a:	4604      	mov	r4, r0
 800093c:	4608      	mov	r0, r1
 800093e:	602b      	str	r3, [r5, #0]
 8000940:	f7ff fd64 	bl	800040c <_close>
 8000944:	1c43      	adds	r3, r0, #1
 8000946:	d102      	bne.n	800094e <_close_r+0x1a>
 8000948:	682b      	ldr	r3, [r5, #0]
 800094a:	b103      	cbz	r3, 800094e <_close_r+0x1a>
 800094c:	6023      	str	r3, [r4, #0]
 800094e:	bd38      	pop	{r3, r4, r5, pc}
 8000950:	200001c0 	.word	0x200001c0

08000954 <_lseek_r>:
 8000954:	b538      	push	{r3, r4, r5, lr}
 8000956:	4d07      	ldr	r5, [pc, #28]	@ (8000974 <_lseek_r+0x20>)
 8000958:	4604      	mov	r4, r0
 800095a:	4608      	mov	r0, r1
 800095c:	4611      	mov	r1, r2
 800095e:	2200      	movs	r2, #0
 8000960:	602a      	str	r2, [r5, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	f7ff fd79 	bl	800045a <_lseek>
 8000968:	1c43      	adds	r3, r0, #1
 800096a:	d102      	bne.n	8000972 <_lseek_r+0x1e>
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	b103      	cbz	r3, 8000972 <_lseek_r+0x1e>
 8000970:	6023      	str	r3, [r4, #0]
 8000972:	bd38      	pop	{r3, r4, r5, pc}
 8000974:	200001c0 	.word	0x200001c0

08000978 <_read_r>:
 8000978:	b538      	push	{r3, r4, r5, lr}
 800097a:	4d07      	ldr	r5, [pc, #28]	@ (8000998 <_read_r+0x20>)
 800097c:	4604      	mov	r4, r0
 800097e:	4608      	mov	r0, r1
 8000980:	4611      	mov	r1, r2
 8000982:	2200      	movs	r2, #0
 8000984:	602a      	str	r2, [r5, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	f7ff fd07 	bl	800039a <_read>
 800098c:	1c43      	adds	r3, r0, #1
 800098e:	d102      	bne.n	8000996 <_read_r+0x1e>
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	b103      	cbz	r3, 8000996 <_read_r+0x1e>
 8000994:	6023      	str	r3, [r4, #0]
 8000996:	bd38      	pop	{r3, r4, r5, pc}
 8000998:	200001c0 	.word	0x200001c0

0800099c <_write_r>:
 800099c:	b538      	push	{r3, r4, r5, lr}
 800099e:	4d07      	ldr	r5, [pc, #28]	@ (80009bc <_write_r+0x20>)
 80009a0:	4604      	mov	r4, r0
 80009a2:	4608      	mov	r0, r1
 80009a4:	4611      	mov	r1, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	602a      	str	r2, [r5, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f7ff fd12 	bl	80003d4 <_write>
 80009b0:	1c43      	adds	r3, r0, #1
 80009b2:	d102      	bne.n	80009ba <_write_r+0x1e>
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	b103      	cbz	r3, 80009ba <_write_r+0x1e>
 80009b8:	6023      	str	r3, [r4, #0]
 80009ba:	bd38      	pop	{r3, r4, r5, pc}
 80009bc:	200001c0 	.word	0x200001c0

080009c0 <__errno>:
 80009c0:	4b01      	ldr	r3, [pc, #4]	@ (80009c8 <__errno+0x8>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000010 	.word	0x20000010

080009cc <__libc_init_array>:
 80009cc:	b570      	push	{r4, r5, r6, lr}
 80009ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000a04 <__libc_init_array+0x38>)
 80009d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000a08 <__libc_init_array+0x3c>)
 80009d2:	1b64      	subs	r4, r4, r5
 80009d4:	10a4      	asrs	r4, r4, #2
 80009d6:	2600      	movs	r6, #0
 80009d8:	42a6      	cmp	r6, r4
 80009da:	d109      	bne.n	80009f0 <__libc_init_array+0x24>
 80009dc:	4d0b      	ldr	r5, [pc, #44]	@ (8000a0c <__libc_init_array+0x40>)
 80009de:	4c0c      	ldr	r4, [pc, #48]	@ (8000a10 <__libc_init_array+0x44>)
 80009e0:	f000 fdb6 	bl	8001550 <_init>
 80009e4:	1b64      	subs	r4, r4, r5
 80009e6:	10a4      	asrs	r4, r4, #2
 80009e8:	2600      	movs	r6, #0
 80009ea:	42a6      	cmp	r6, r4
 80009ec:	d105      	bne.n	80009fa <__libc_init_array+0x2e>
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f4:	4798      	blx	r3
 80009f6:	3601      	adds	r6, #1
 80009f8:	e7ee      	b.n	80009d8 <__libc_init_array+0xc>
 80009fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80009fe:	4798      	blx	r3
 8000a00:	3601      	adds	r6, #1
 8000a02:	e7f2      	b.n	80009ea <__libc_init_array+0x1e>
 8000a04:	080015bc 	.word	0x080015bc
 8000a08:	080015bc 	.word	0x080015bc
 8000a0c:	080015bc 	.word	0x080015bc
 8000a10:	080015c0 	.word	0x080015c0

08000a14 <__retarget_lock_init_recursive>:
 8000a14:	4770      	bx	lr

08000a16 <__retarget_lock_acquire_recursive>:
 8000a16:	4770      	bx	lr

08000a18 <__retarget_lock_release_recursive>:
 8000a18:	4770      	bx	lr
	...

08000a1c <_free_r>:
 8000a1c:	b538      	push	{r3, r4, r5, lr}
 8000a1e:	4605      	mov	r5, r0
 8000a20:	2900      	cmp	r1, #0
 8000a22:	d041      	beq.n	8000aa8 <_free_r+0x8c>
 8000a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a28:	1f0c      	subs	r4, r1, #4
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bfb8      	it	lt
 8000a2e:	18e4      	addlt	r4, r4, r3
 8000a30:	f000 f8e0 	bl	8000bf4 <__malloc_lock>
 8000a34:	4a1d      	ldr	r2, [pc, #116]	@ (8000aac <_free_r+0x90>)
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	b933      	cbnz	r3, 8000a48 <_free_r+0x2c>
 8000a3a:	6063      	str	r3, [r4, #4]
 8000a3c:	6014      	str	r4, [r2, #0]
 8000a3e:	4628      	mov	r0, r5
 8000a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a44:	f000 b8dc 	b.w	8000c00 <__malloc_unlock>
 8000a48:	42a3      	cmp	r3, r4
 8000a4a:	d908      	bls.n	8000a5e <_free_r+0x42>
 8000a4c:	6820      	ldr	r0, [r4, #0]
 8000a4e:	1821      	adds	r1, r4, r0
 8000a50:	428b      	cmp	r3, r1
 8000a52:	bf01      	itttt	eq
 8000a54:	6819      	ldreq	r1, [r3, #0]
 8000a56:	685b      	ldreq	r3, [r3, #4]
 8000a58:	1809      	addeq	r1, r1, r0
 8000a5a:	6021      	streq	r1, [r4, #0]
 8000a5c:	e7ed      	b.n	8000a3a <_free_r+0x1e>
 8000a5e:	461a      	mov	r2, r3
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	b10b      	cbz	r3, 8000a68 <_free_r+0x4c>
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	d9fa      	bls.n	8000a5e <_free_r+0x42>
 8000a68:	6811      	ldr	r1, [r2, #0]
 8000a6a:	1850      	adds	r0, r2, r1
 8000a6c:	42a0      	cmp	r0, r4
 8000a6e:	d10b      	bne.n	8000a88 <_free_r+0x6c>
 8000a70:	6820      	ldr	r0, [r4, #0]
 8000a72:	4401      	add	r1, r0
 8000a74:	1850      	adds	r0, r2, r1
 8000a76:	4283      	cmp	r3, r0
 8000a78:	6011      	str	r1, [r2, #0]
 8000a7a:	d1e0      	bne.n	8000a3e <_free_r+0x22>
 8000a7c:	6818      	ldr	r0, [r3, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	6053      	str	r3, [r2, #4]
 8000a82:	4408      	add	r0, r1
 8000a84:	6010      	str	r0, [r2, #0]
 8000a86:	e7da      	b.n	8000a3e <_free_r+0x22>
 8000a88:	d902      	bls.n	8000a90 <_free_r+0x74>
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	602b      	str	r3, [r5, #0]
 8000a8e:	e7d6      	b.n	8000a3e <_free_r+0x22>
 8000a90:	6820      	ldr	r0, [r4, #0]
 8000a92:	1821      	adds	r1, r4, r0
 8000a94:	428b      	cmp	r3, r1
 8000a96:	bf04      	itt	eq
 8000a98:	6819      	ldreq	r1, [r3, #0]
 8000a9a:	685b      	ldreq	r3, [r3, #4]
 8000a9c:	6063      	str	r3, [r4, #4]
 8000a9e:	bf04      	itt	eq
 8000aa0:	1809      	addeq	r1, r1, r0
 8000aa2:	6021      	streq	r1, [r4, #0]
 8000aa4:	6054      	str	r4, [r2, #4]
 8000aa6:	e7ca      	b.n	8000a3e <_free_r+0x22>
 8000aa8:	bd38      	pop	{r3, r4, r5, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001cc 	.word	0x200001cc

08000ab0 <sbrk_aligned>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8000af0 <sbrk_aligned+0x40>)
 8000ab4:	460c      	mov	r4, r1
 8000ab6:	6831      	ldr	r1, [r6, #0]
 8000ab8:	4605      	mov	r5, r0
 8000aba:	b911      	cbnz	r1, 8000ac2 <sbrk_aligned+0x12>
 8000abc:	f000 fcb4 	bl	8001428 <_sbrk_r>
 8000ac0:	6030      	str	r0, [r6, #0]
 8000ac2:	4621      	mov	r1, r4
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	f000 fcaf 	bl	8001428 <_sbrk_r>
 8000aca:	1c43      	adds	r3, r0, #1
 8000acc:	d103      	bne.n	8000ad6 <sbrk_aligned+0x26>
 8000ace:	f04f 34ff 	mov.w	r4, #4294967295
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	1cc4      	adds	r4, r0, #3
 8000ad8:	f024 0403 	bic.w	r4, r4, #3
 8000adc:	42a0      	cmp	r0, r4
 8000ade:	d0f8      	beq.n	8000ad2 <sbrk_aligned+0x22>
 8000ae0:	1a21      	subs	r1, r4, r0
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f000 fca0 	bl	8001428 <_sbrk_r>
 8000ae8:	3001      	adds	r0, #1
 8000aea:	d1f2      	bne.n	8000ad2 <sbrk_aligned+0x22>
 8000aec:	e7ef      	b.n	8000ace <sbrk_aligned+0x1e>
 8000aee:	bf00      	nop
 8000af0:	200001c8 	.word	0x200001c8

08000af4 <_malloc_r>:
 8000af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000af8:	1ccd      	adds	r5, r1, #3
 8000afa:	f025 0503 	bic.w	r5, r5, #3
 8000afe:	3508      	adds	r5, #8
 8000b00:	2d0c      	cmp	r5, #12
 8000b02:	bf38      	it	cc
 8000b04:	250c      	movcc	r5, #12
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	4606      	mov	r6, r0
 8000b0a:	db01      	blt.n	8000b10 <_malloc_r+0x1c>
 8000b0c:	42a9      	cmp	r1, r5
 8000b0e:	d904      	bls.n	8000b1a <_malloc_r+0x26>
 8000b10:	230c      	movs	r3, #12
 8000b12:	6033      	str	r3, [r6, #0]
 8000b14:	2000      	movs	r0, #0
 8000b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bf0 <_malloc_r+0xfc>
 8000b1e:	f000 f869 	bl	8000bf4 <__malloc_lock>
 8000b22:	f8d8 3000 	ldr.w	r3, [r8]
 8000b26:	461c      	mov	r4, r3
 8000b28:	bb44      	cbnz	r4, 8000b7c <_malloc_r+0x88>
 8000b2a:	4629      	mov	r1, r5
 8000b2c:	4630      	mov	r0, r6
 8000b2e:	f7ff ffbf 	bl	8000ab0 <sbrk_aligned>
 8000b32:	1c43      	adds	r3, r0, #1
 8000b34:	4604      	mov	r4, r0
 8000b36:	d158      	bne.n	8000bea <_malloc_r+0xf6>
 8000b38:	f8d8 4000 	ldr.w	r4, [r8]
 8000b3c:	4627      	mov	r7, r4
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d143      	bne.n	8000bca <_malloc_r+0xd6>
 8000b42:	2c00      	cmp	r4, #0
 8000b44:	d04b      	beq.n	8000bde <_malloc_r+0xea>
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	4639      	mov	r1, r7
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	eb04 0903 	add.w	r9, r4, r3
 8000b50:	f000 fc6a 	bl	8001428 <_sbrk_r>
 8000b54:	4581      	cmp	r9, r0
 8000b56:	d142      	bne.n	8000bde <_malloc_r+0xea>
 8000b58:	6821      	ldr	r1, [r4, #0]
 8000b5a:	1a6d      	subs	r5, r5, r1
 8000b5c:	4629      	mov	r1, r5
 8000b5e:	4630      	mov	r0, r6
 8000b60:	f7ff ffa6 	bl	8000ab0 <sbrk_aligned>
 8000b64:	3001      	adds	r0, #1
 8000b66:	d03a      	beq.n	8000bde <_malloc_r+0xea>
 8000b68:	6823      	ldr	r3, [r4, #0]
 8000b6a:	442b      	add	r3, r5
 8000b6c:	6023      	str	r3, [r4, #0]
 8000b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	bb62      	cbnz	r2, 8000bd0 <_malloc_r+0xdc>
 8000b76:	f8c8 7000 	str.w	r7, [r8]
 8000b7a:	e00f      	b.n	8000b9c <_malloc_r+0xa8>
 8000b7c:	6822      	ldr	r2, [r4, #0]
 8000b7e:	1b52      	subs	r2, r2, r5
 8000b80:	d420      	bmi.n	8000bc4 <_malloc_r+0xd0>
 8000b82:	2a0b      	cmp	r2, #11
 8000b84:	d917      	bls.n	8000bb6 <_malloc_r+0xc2>
 8000b86:	1961      	adds	r1, r4, r5
 8000b88:	42a3      	cmp	r3, r4
 8000b8a:	6025      	str	r5, [r4, #0]
 8000b8c:	bf18      	it	ne
 8000b8e:	6059      	strne	r1, [r3, #4]
 8000b90:	6863      	ldr	r3, [r4, #4]
 8000b92:	bf08      	it	eq
 8000b94:	f8c8 1000 	streq.w	r1, [r8]
 8000b98:	5162      	str	r2, [r4, r5]
 8000b9a:	604b      	str	r3, [r1, #4]
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	f000 f82f 	bl	8000c00 <__malloc_unlock>
 8000ba2:	f104 000b 	add.w	r0, r4, #11
 8000ba6:	1d23      	adds	r3, r4, #4
 8000ba8:	f020 0007 	bic.w	r0, r0, #7
 8000bac:	1ac2      	subs	r2, r0, r3
 8000bae:	bf1c      	itt	ne
 8000bb0:	1a1b      	subne	r3, r3, r0
 8000bb2:	50a3      	strne	r3, [r4, r2]
 8000bb4:	e7af      	b.n	8000b16 <_malloc_r+0x22>
 8000bb6:	6862      	ldr	r2, [r4, #4]
 8000bb8:	42a3      	cmp	r3, r4
 8000bba:	bf0c      	ite	eq
 8000bbc:	f8c8 2000 	streq.w	r2, [r8]
 8000bc0:	605a      	strne	r2, [r3, #4]
 8000bc2:	e7eb      	b.n	8000b9c <_malloc_r+0xa8>
 8000bc4:	4623      	mov	r3, r4
 8000bc6:	6864      	ldr	r4, [r4, #4]
 8000bc8:	e7ae      	b.n	8000b28 <_malloc_r+0x34>
 8000bca:	463c      	mov	r4, r7
 8000bcc:	687f      	ldr	r7, [r7, #4]
 8000bce:	e7b6      	b.n	8000b3e <_malloc_r+0x4a>
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d1fb      	bne.n	8000bd0 <_malloc_r+0xdc>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	6053      	str	r3, [r2, #4]
 8000bdc:	e7de      	b.n	8000b9c <_malloc_r+0xa8>
 8000bde:	230c      	movs	r3, #12
 8000be0:	6033      	str	r3, [r6, #0]
 8000be2:	4630      	mov	r0, r6
 8000be4:	f000 f80c 	bl	8000c00 <__malloc_unlock>
 8000be8:	e794      	b.n	8000b14 <_malloc_r+0x20>
 8000bea:	6005      	str	r5, [r0, #0]
 8000bec:	e7d6      	b.n	8000b9c <_malloc_r+0xa8>
 8000bee:	bf00      	nop
 8000bf0:	200001cc 	.word	0x200001cc

08000bf4 <__malloc_lock>:
 8000bf4:	4801      	ldr	r0, [pc, #4]	@ (8000bfc <__malloc_lock+0x8>)
 8000bf6:	f7ff bf0e 	b.w	8000a16 <__retarget_lock_acquire_recursive>
 8000bfa:	bf00      	nop
 8000bfc:	200001c4 	.word	0x200001c4

08000c00 <__malloc_unlock>:
 8000c00:	4801      	ldr	r0, [pc, #4]	@ (8000c08 <__malloc_unlock+0x8>)
 8000c02:	f7ff bf09 	b.w	8000a18 <__retarget_lock_release_recursive>
 8000c06:	bf00      	nop
 8000c08:	200001c4 	.word	0x200001c4

08000c0c <__sfputc_r>:
 8000c0c:	6893      	ldr	r3, [r2, #8]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	b410      	push	{r4}
 8000c14:	6093      	str	r3, [r2, #8]
 8000c16:	da08      	bge.n	8000c2a <__sfputc_r+0x1e>
 8000c18:	6994      	ldr	r4, [r2, #24]
 8000c1a:	42a3      	cmp	r3, r4
 8000c1c:	db01      	blt.n	8000c22 <__sfputc_r+0x16>
 8000c1e:	290a      	cmp	r1, #10
 8000c20:	d103      	bne.n	8000c2a <__sfputc_r+0x1e>
 8000c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c26:	f000 bb6b 	b.w	8001300 <__swbuf_r>
 8000c2a:	6813      	ldr	r3, [r2, #0]
 8000c2c:	1c58      	adds	r0, r3, #1
 8000c2e:	6010      	str	r0, [r2, #0]
 8000c30:	7019      	strb	r1, [r3, #0]
 8000c32:	4608      	mov	r0, r1
 8000c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <__sfputs_r>:
 8000c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3c:	4606      	mov	r6, r0
 8000c3e:	460f      	mov	r7, r1
 8000c40:	4614      	mov	r4, r2
 8000c42:	18d5      	adds	r5, r2, r3
 8000c44:	42ac      	cmp	r4, r5
 8000c46:	d101      	bne.n	8000c4c <__sfputs_r+0x12>
 8000c48:	2000      	movs	r0, #0
 8000c4a:	e007      	b.n	8000c5c <__sfputs_r+0x22>
 8000c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c50:	463a      	mov	r2, r7
 8000c52:	4630      	mov	r0, r6
 8000c54:	f7ff ffda 	bl	8000c0c <__sfputc_r>
 8000c58:	1c43      	adds	r3, r0, #1
 8000c5a:	d1f3      	bne.n	8000c44 <__sfputs_r+0xa>
 8000c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c60 <_vfiprintf_r>:
 8000c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c64:	460d      	mov	r5, r1
 8000c66:	b09d      	sub	sp, #116	@ 0x74
 8000c68:	4614      	mov	r4, r2
 8000c6a:	4698      	mov	r8, r3
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	b118      	cbz	r0, 8000c78 <_vfiprintf_r+0x18>
 8000c70:	6a03      	ldr	r3, [r0, #32]
 8000c72:	b90b      	cbnz	r3, 8000c78 <_vfiprintf_r+0x18>
 8000c74:	f7ff fdca 	bl	800080c <__sinit>
 8000c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c7a:	07d9      	lsls	r1, r3, #31
 8000c7c:	d405      	bmi.n	8000c8a <_vfiprintf_r+0x2a>
 8000c7e:	89ab      	ldrh	r3, [r5, #12]
 8000c80:	059a      	lsls	r2, r3, #22
 8000c82:	d402      	bmi.n	8000c8a <_vfiprintf_r+0x2a>
 8000c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c86:	f7ff fec6 	bl	8000a16 <__retarget_lock_acquire_recursive>
 8000c8a:	89ab      	ldrh	r3, [r5, #12]
 8000c8c:	071b      	lsls	r3, r3, #28
 8000c8e:	d501      	bpl.n	8000c94 <_vfiprintf_r+0x34>
 8000c90:	692b      	ldr	r3, [r5, #16]
 8000c92:	b99b      	cbnz	r3, 8000cbc <_vfiprintf_r+0x5c>
 8000c94:	4629      	mov	r1, r5
 8000c96:	4630      	mov	r0, r6
 8000c98:	f000 fb70 	bl	800137c <__swsetup_r>
 8000c9c:	b170      	cbz	r0, 8000cbc <_vfiprintf_r+0x5c>
 8000c9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ca0:	07dc      	lsls	r4, r3, #31
 8000ca2:	d504      	bpl.n	8000cae <_vfiprintf_r+0x4e>
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	b01d      	add	sp, #116	@ 0x74
 8000caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cae:	89ab      	ldrh	r3, [r5, #12]
 8000cb0:	0598      	lsls	r0, r3, #22
 8000cb2:	d4f7      	bmi.n	8000ca4 <_vfiprintf_r+0x44>
 8000cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cb6:	f7ff feaf 	bl	8000a18 <__retarget_lock_release_recursive>
 8000cba:	e7f3      	b.n	8000ca4 <_vfiprintf_r+0x44>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cca:	2330      	movs	r3, #48	@ 0x30
 8000ccc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e7c <_vfiprintf_r+0x21c>
 8000cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cd4:	f04f 0901 	mov.w	r9, #1
 8000cd8:	4623      	mov	r3, r4
 8000cda:	469a      	mov	sl, r3
 8000cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ce0:	b10a      	cbz	r2, 8000ce6 <_vfiprintf_r+0x86>
 8000ce2:	2a25      	cmp	r2, #37	@ 0x25
 8000ce4:	d1f9      	bne.n	8000cda <_vfiprintf_r+0x7a>
 8000ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8000cea:	d00b      	beq.n	8000d04 <_vfiprintf_r+0xa4>
 8000cec:	465b      	mov	r3, fp
 8000cee:	4622      	mov	r2, r4
 8000cf0:	4629      	mov	r1, r5
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	f7ff ffa1 	bl	8000c3a <__sfputs_r>
 8000cf8:	3001      	adds	r0, #1
 8000cfa:	f000 80a7 	beq.w	8000e4c <_vfiprintf_r+0x1ec>
 8000cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d00:	445a      	add	r2, fp
 8000d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d04:	f89a 3000 	ldrb.w	r3, [sl]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 809f 	beq.w	8000e4c <_vfiprintf_r+0x1ec>
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d18:	f10a 0a01 	add.w	sl, sl, #1
 8000d1c:	9304      	str	r3, [sp, #16]
 8000d1e:	9307      	str	r3, [sp, #28]
 8000d20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d24:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d26:	4654      	mov	r4, sl
 8000d28:	2205      	movs	r2, #5
 8000d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d2e:	4853      	ldr	r0, [pc, #332]	@ (8000e7c <_vfiprintf_r+0x21c>)
 8000d30:	f7ff fa56 	bl	80001e0 <memchr>
 8000d34:	9a04      	ldr	r2, [sp, #16]
 8000d36:	b9d8      	cbnz	r0, 8000d70 <_vfiprintf_r+0x110>
 8000d38:	06d1      	lsls	r1, r2, #27
 8000d3a:	bf44      	itt	mi
 8000d3c:	2320      	movmi	r3, #32
 8000d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d42:	0713      	lsls	r3, r2, #28
 8000d44:	bf44      	itt	mi
 8000d46:	232b      	movmi	r3, #43	@ 0x2b
 8000d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d52:	d015      	beq.n	8000d80 <_vfiprintf_r+0x120>
 8000d54:	9a07      	ldr	r2, [sp, #28]
 8000d56:	4654      	mov	r4, sl
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f04f 0c0a 	mov.w	ip, #10
 8000d5e:	4621      	mov	r1, r4
 8000d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d64:	3b30      	subs	r3, #48	@ 0x30
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d94b      	bls.n	8000e02 <_vfiprintf_r+0x1a2>
 8000d6a:	b1b0      	cbz	r0, 8000d9a <_vfiprintf_r+0x13a>
 8000d6c:	9207      	str	r2, [sp, #28]
 8000d6e:	e014      	b.n	8000d9a <_vfiprintf_r+0x13a>
 8000d70:	eba0 0308 	sub.w	r3, r0, r8
 8000d74:	fa09 f303 	lsl.w	r3, r9, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	9304      	str	r3, [sp, #16]
 8000d7c:	46a2      	mov	sl, r4
 8000d7e:	e7d2      	b.n	8000d26 <_vfiprintf_r+0xc6>
 8000d80:	9b03      	ldr	r3, [sp, #12]
 8000d82:	1d19      	adds	r1, r3, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	9103      	str	r1, [sp, #12]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bfbb      	ittet	lt
 8000d8c:	425b      	neglt	r3, r3
 8000d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8000d92:	9307      	strge	r3, [sp, #28]
 8000d94:	9307      	strlt	r3, [sp, #28]
 8000d96:	bfb8      	it	lt
 8000d98:	9204      	strlt	r2, [sp, #16]
 8000d9a:	7823      	ldrb	r3, [r4, #0]
 8000d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d9e:	d10a      	bne.n	8000db6 <_vfiprintf_r+0x156>
 8000da0:	7863      	ldrb	r3, [r4, #1]
 8000da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000da4:	d132      	bne.n	8000e0c <_vfiprintf_r+0x1ac>
 8000da6:	9b03      	ldr	r3, [sp, #12]
 8000da8:	1d1a      	adds	r2, r3, #4
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	9203      	str	r2, [sp, #12]
 8000dae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000db2:	3402      	adds	r4, #2
 8000db4:	9305      	str	r3, [sp, #20]
 8000db6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e8c <_vfiprintf_r+0x22c>
 8000dba:	7821      	ldrb	r1, [r4, #0]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	4650      	mov	r0, sl
 8000dc0:	f7ff fa0e 	bl	80001e0 <memchr>
 8000dc4:	b138      	cbz	r0, 8000dd6 <_vfiprintf_r+0x176>
 8000dc6:	9b04      	ldr	r3, [sp, #16]
 8000dc8:	eba0 000a 	sub.w	r0, r0, sl
 8000dcc:	2240      	movs	r2, #64	@ 0x40
 8000dce:	4082      	lsls	r2, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	3401      	adds	r4, #1
 8000dd4:	9304      	str	r3, [sp, #16]
 8000dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dda:	4829      	ldr	r0, [pc, #164]	@ (8000e80 <_vfiprintf_r+0x220>)
 8000ddc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000de0:	2206      	movs	r2, #6
 8000de2:	f7ff f9fd 	bl	80001e0 <memchr>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d03f      	beq.n	8000e6a <_vfiprintf_r+0x20a>
 8000dea:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <_vfiprintf_r+0x224>)
 8000dec:	bb1b      	cbnz	r3, 8000e36 <_vfiprintf_r+0x1d6>
 8000dee:	9b03      	ldr	r3, [sp, #12]
 8000df0:	3307      	adds	r3, #7
 8000df2:	f023 0307 	bic.w	r3, r3, #7
 8000df6:	3308      	adds	r3, #8
 8000df8:	9303      	str	r3, [sp, #12]
 8000dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000dfc:	443b      	add	r3, r7
 8000dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e00:	e76a      	b.n	8000cd8 <_vfiprintf_r+0x78>
 8000e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e06:	460c      	mov	r4, r1
 8000e08:	2001      	movs	r0, #1
 8000e0a:	e7a8      	b.n	8000d5e <_vfiprintf_r+0xfe>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	3401      	adds	r4, #1
 8000e10:	9305      	str	r3, [sp, #20]
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 0c0a 	mov.w	ip, #10
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e1e:	3a30      	subs	r2, #48	@ 0x30
 8000e20:	2a09      	cmp	r2, #9
 8000e22:	d903      	bls.n	8000e2c <_vfiprintf_r+0x1cc>
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0c6      	beq.n	8000db6 <_vfiprintf_r+0x156>
 8000e28:	9105      	str	r1, [sp, #20]
 8000e2a:	e7c4      	b.n	8000db6 <_vfiprintf_r+0x156>
 8000e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e30:	4604      	mov	r4, r0
 8000e32:	2301      	movs	r3, #1
 8000e34:	e7f0      	b.n	8000e18 <_vfiprintf_r+0x1b8>
 8000e36:	ab03      	add	r3, sp, #12
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	462a      	mov	r2, r5
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <_vfiprintf_r+0x228>)
 8000e3e:	a904      	add	r1, sp, #16
 8000e40:	4630      	mov	r0, r6
 8000e42:	f3af 8000 	nop.w
 8000e46:	4607      	mov	r7, r0
 8000e48:	1c78      	adds	r0, r7, #1
 8000e4a:	d1d6      	bne.n	8000dfa <_vfiprintf_r+0x19a>
 8000e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e4e:	07d9      	lsls	r1, r3, #31
 8000e50:	d405      	bmi.n	8000e5e <_vfiprintf_r+0x1fe>
 8000e52:	89ab      	ldrh	r3, [r5, #12]
 8000e54:	059a      	lsls	r2, r3, #22
 8000e56:	d402      	bmi.n	8000e5e <_vfiprintf_r+0x1fe>
 8000e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e5a:	f7ff fddd 	bl	8000a18 <__retarget_lock_release_recursive>
 8000e5e:	89ab      	ldrh	r3, [r5, #12]
 8000e60:	065b      	lsls	r3, r3, #25
 8000e62:	f53f af1f 	bmi.w	8000ca4 <_vfiprintf_r+0x44>
 8000e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e68:	e71e      	b.n	8000ca8 <_vfiprintf_r+0x48>
 8000e6a:	ab03      	add	r3, sp, #12
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	462a      	mov	r2, r5
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <_vfiprintf_r+0x228>)
 8000e72:	a904      	add	r1, sp, #16
 8000e74:	4630      	mov	r0, r6
 8000e76:	f000 f879 	bl	8000f6c <_printf_i>
 8000e7a:	e7e4      	b.n	8000e46 <_vfiprintf_r+0x1e6>
 8000e7c:	08001581 	.word	0x08001581
 8000e80:	0800158b 	.word	0x0800158b
 8000e84:	00000000 	.word	0x00000000
 8000e88:	08000c3b 	.word	0x08000c3b
 8000e8c:	08001587 	.word	0x08001587

08000e90 <_printf_common>:
 8000e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e94:	4616      	mov	r6, r2
 8000e96:	4698      	mov	r8, r3
 8000e98:	688a      	ldr	r2, [r1, #8]
 8000e9a:	690b      	ldr	r3, [r1, #16]
 8000e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	bfb8      	it	lt
 8000ea4:	4613      	movlt	r3, r2
 8000ea6:	6033      	str	r3, [r6, #0]
 8000ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000eac:	4607      	mov	r7, r0
 8000eae:	460c      	mov	r4, r1
 8000eb0:	b10a      	cbz	r2, 8000eb6 <_printf_common+0x26>
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	6033      	str	r3, [r6, #0]
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	0699      	lsls	r1, r3, #26
 8000eba:	bf42      	ittt	mi
 8000ebc:	6833      	ldrmi	r3, [r6, #0]
 8000ebe:	3302      	addmi	r3, #2
 8000ec0:	6033      	strmi	r3, [r6, #0]
 8000ec2:	6825      	ldr	r5, [r4, #0]
 8000ec4:	f015 0506 	ands.w	r5, r5, #6
 8000ec8:	d106      	bne.n	8000ed8 <_printf_common+0x48>
 8000eca:	f104 0a19 	add.w	sl, r4, #25
 8000ece:	68e3      	ldr	r3, [r4, #12]
 8000ed0:	6832      	ldr	r2, [r6, #0]
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	42ab      	cmp	r3, r5
 8000ed6:	dc26      	bgt.n	8000f26 <_printf_common+0x96>
 8000ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000edc:	6822      	ldr	r2, [r4, #0]
 8000ede:	3b00      	subs	r3, #0
 8000ee0:	bf18      	it	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	0692      	lsls	r2, r2, #26
 8000ee6:	d42b      	bmi.n	8000f40 <_printf_common+0xb0>
 8000ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000eec:	4641      	mov	r1, r8
 8000eee:	4638      	mov	r0, r7
 8000ef0:	47c8      	blx	r9
 8000ef2:	3001      	adds	r0, #1
 8000ef4:	d01e      	beq.n	8000f34 <_printf_common+0xa4>
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	6922      	ldr	r2, [r4, #16]
 8000efa:	f003 0306 	and.w	r3, r3, #6
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf02      	ittt	eq
 8000f02:	68e5      	ldreq	r5, [r4, #12]
 8000f04:	6833      	ldreq	r3, [r6, #0]
 8000f06:	1aed      	subeq	r5, r5, r3
 8000f08:	68a3      	ldr	r3, [r4, #8]
 8000f0a:	bf0c      	ite	eq
 8000f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f10:	2500      	movne	r5, #0
 8000f12:	4293      	cmp	r3, r2
 8000f14:	bfc4      	itt	gt
 8000f16:	1a9b      	subgt	r3, r3, r2
 8000f18:	18ed      	addgt	r5, r5, r3
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	341a      	adds	r4, #26
 8000f1e:	42b5      	cmp	r5, r6
 8000f20:	d11a      	bne.n	8000f58 <_printf_common+0xc8>
 8000f22:	2000      	movs	r0, #0
 8000f24:	e008      	b.n	8000f38 <_printf_common+0xa8>
 8000f26:	2301      	movs	r3, #1
 8000f28:	4652      	mov	r2, sl
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	47c8      	blx	r9
 8000f30:	3001      	adds	r0, #1
 8000f32:	d103      	bne.n	8000f3c <_printf_common+0xac>
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3c:	3501      	adds	r5, #1
 8000f3e:	e7c6      	b.n	8000ece <_printf_common+0x3e>
 8000f40:	18e1      	adds	r1, r4, r3
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	2030      	movs	r0, #48	@ 0x30
 8000f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f4a:	4422      	add	r2, r4
 8000f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f54:	3302      	adds	r3, #2
 8000f56:	e7c7      	b.n	8000ee8 <_printf_common+0x58>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	4641      	mov	r1, r8
 8000f5e:	4638      	mov	r0, r7
 8000f60:	47c8      	blx	r9
 8000f62:	3001      	adds	r0, #1
 8000f64:	d0e6      	beq.n	8000f34 <_printf_common+0xa4>
 8000f66:	3601      	adds	r6, #1
 8000f68:	e7d9      	b.n	8000f1e <_printf_common+0x8e>
	...

08000f6c <_printf_i>:
 8000f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f70:	7e0f      	ldrb	r7, [r1, #24]
 8000f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f74:	2f78      	cmp	r7, #120	@ 0x78
 8000f76:	4691      	mov	r9, r2
 8000f78:	4680      	mov	r8, r0
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	469a      	mov	sl, r3
 8000f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f82:	d807      	bhi.n	8000f94 <_printf_i+0x28>
 8000f84:	2f62      	cmp	r7, #98	@ 0x62
 8000f86:	d80a      	bhi.n	8000f9e <_printf_i+0x32>
 8000f88:	2f00      	cmp	r7, #0
 8000f8a:	f000 80d1 	beq.w	8001130 <_printf_i+0x1c4>
 8000f8e:	2f58      	cmp	r7, #88	@ 0x58
 8000f90:	f000 80b8 	beq.w	8001104 <_printf_i+0x198>
 8000f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f9c:	e03a      	b.n	8001014 <_printf_i+0xa8>
 8000f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000fa2:	2b15      	cmp	r3, #21
 8000fa4:	d8f6      	bhi.n	8000f94 <_printf_i+0x28>
 8000fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8000fac <_printf_i+0x40>)
 8000fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fac:	08001005 	.word	0x08001005
 8000fb0:	08001019 	.word	0x08001019
 8000fb4:	08000f95 	.word	0x08000f95
 8000fb8:	08000f95 	.word	0x08000f95
 8000fbc:	08000f95 	.word	0x08000f95
 8000fc0:	08000f95 	.word	0x08000f95
 8000fc4:	08001019 	.word	0x08001019
 8000fc8:	08000f95 	.word	0x08000f95
 8000fcc:	08000f95 	.word	0x08000f95
 8000fd0:	08000f95 	.word	0x08000f95
 8000fd4:	08000f95 	.word	0x08000f95
 8000fd8:	08001117 	.word	0x08001117
 8000fdc:	08001043 	.word	0x08001043
 8000fe0:	080010d1 	.word	0x080010d1
 8000fe4:	08000f95 	.word	0x08000f95
 8000fe8:	08000f95 	.word	0x08000f95
 8000fec:	08001139 	.word	0x08001139
 8000ff0:	08000f95 	.word	0x08000f95
 8000ff4:	08001043 	.word	0x08001043
 8000ff8:	08000f95 	.word	0x08000f95
 8000ffc:	08000f95 	.word	0x08000f95
 8001000:	080010d9 	.word	0x080010d9
 8001004:	6833      	ldr	r3, [r6, #0]
 8001006:	1d1a      	adds	r2, r3, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6032      	str	r2, [r6, #0]
 800100c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001014:	2301      	movs	r3, #1
 8001016:	e09c      	b.n	8001152 <_printf_i+0x1e6>
 8001018:	6833      	ldr	r3, [r6, #0]
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	1d19      	adds	r1, r3, #4
 800101e:	6031      	str	r1, [r6, #0]
 8001020:	0606      	lsls	r6, r0, #24
 8001022:	d501      	bpl.n	8001028 <_printf_i+0xbc>
 8001024:	681d      	ldr	r5, [r3, #0]
 8001026:	e003      	b.n	8001030 <_printf_i+0xc4>
 8001028:	0645      	lsls	r5, r0, #25
 800102a:	d5fb      	bpl.n	8001024 <_printf_i+0xb8>
 800102c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001030:	2d00      	cmp	r5, #0
 8001032:	da03      	bge.n	800103c <_printf_i+0xd0>
 8001034:	232d      	movs	r3, #45	@ 0x2d
 8001036:	426d      	negs	r5, r5
 8001038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800103c:	4858      	ldr	r0, [pc, #352]	@ (80011a0 <_printf_i+0x234>)
 800103e:	230a      	movs	r3, #10
 8001040:	e011      	b.n	8001066 <_printf_i+0xfa>
 8001042:	6821      	ldr	r1, [r4, #0]
 8001044:	6833      	ldr	r3, [r6, #0]
 8001046:	0608      	lsls	r0, r1, #24
 8001048:	f853 5b04 	ldr.w	r5, [r3], #4
 800104c:	d402      	bmi.n	8001054 <_printf_i+0xe8>
 800104e:	0649      	lsls	r1, r1, #25
 8001050:	bf48      	it	mi
 8001052:	b2ad      	uxthmi	r5, r5
 8001054:	2f6f      	cmp	r7, #111	@ 0x6f
 8001056:	4852      	ldr	r0, [pc, #328]	@ (80011a0 <_printf_i+0x234>)
 8001058:	6033      	str	r3, [r6, #0]
 800105a:	bf14      	ite	ne
 800105c:	230a      	movne	r3, #10
 800105e:	2308      	moveq	r3, #8
 8001060:	2100      	movs	r1, #0
 8001062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001066:	6866      	ldr	r6, [r4, #4]
 8001068:	60a6      	str	r6, [r4, #8]
 800106a:	2e00      	cmp	r6, #0
 800106c:	db05      	blt.n	800107a <_printf_i+0x10e>
 800106e:	6821      	ldr	r1, [r4, #0]
 8001070:	432e      	orrs	r6, r5
 8001072:	f021 0104 	bic.w	r1, r1, #4
 8001076:	6021      	str	r1, [r4, #0]
 8001078:	d04b      	beq.n	8001112 <_printf_i+0x1a6>
 800107a:	4616      	mov	r6, r2
 800107c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001080:	fb03 5711 	mls	r7, r3, r1, r5
 8001084:	5dc7      	ldrb	r7, [r0, r7]
 8001086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800108a:	462f      	mov	r7, r5
 800108c:	42bb      	cmp	r3, r7
 800108e:	460d      	mov	r5, r1
 8001090:	d9f4      	bls.n	800107c <_printf_i+0x110>
 8001092:	2b08      	cmp	r3, #8
 8001094:	d10b      	bne.n	80010ae <_printf_i+0x142>
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	07df      	lsls	r7, r3, #31
 800109a:	d508      	bpl.n	80010ae <_printf_i+0x142>
 800109c:	6923      	ldr	r3, [r4, #16]
 800109e:	6861      	ldr	r1, [r4, #4]
 80010a0:	4299      	cmp	r1, r3
 80010a2:	bfde      	ittt	le
 80010a4:	2330      	movle	r3, #48	@ 0x30
 80010a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80010ae:	1b92      	subs	r2, r2, r6
 80010b0:	6122      	str	r2, [r4, #16]
 80010b2:	f8cd a000 	str.w	sl, [sp]
 80010b6:	464b      	mov	r3, r9
 80010b8:	aa03      	add	r2, sp, #12
 80010ba:	4621      	mov	r1, r4
 80010bc:	4640      	mov	r0, r8
 80010be:	f7ff fee7 	bl	8000e90 <_printf_common>
 80010c2:	3001      	adds	r0, #1
 80010c4:	d14a      	bne.n	800115c <_printf_i+0x1f0>
 80010c6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ca:	b004      	add	sp, #16
 80010cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	f043 0320 	orr.w	r3, r3, #32
 80010d6:	6023      	str	r3, [r4, #0]
 80010d8:	4832      	ldr	r0, [pc, #200]	@ (80011a4 <_printf_i+0x238>)
 80010da:	2778      	movs	r7, #120	@ 0x78
 80010dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	6831      	ldr	r1, [r6, #0]
 80010e4:	061f      	lsls	r7, r3, #24
 80010e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80010ea:	d402      	bmi.n	80010f2 <_printf_i+0x186>
 80010ec:	065f      	lsls	r7, r3, #25
 80010ee:	bf48      	it	mi
 80010f0:	b2ad      	uxthmi	r5, r5
 80010f2:	6031      	str	r1, [r6, #0]
 80010f4:	07d9      	lsls	r1, r3, #31
 80010f6:	bf44      	itt	mi
 80010f8:	f043 0320 	orrmi.w	r3, r3, #32
 80010fc:	6023      	strmi	r3, [r4, #0]
 80010fe:	b11d      	cbz	r5, 8001108 <_printf_i+0x19c>
 8001100:	2310      	movs	r3, #16
 8001102:	e7ad      	b.n	8001060 <_printf_i+0xf4>
 8001104:	4826      	ldr	r0, [pc, #152]	@ (80011a0 <_printf_i+0x234>)
 8001106:	e7e9      	b.n	80010dc <_printf_i+0x170>
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	f023 0320 	bic.w	r3, r3, #32
 800110e:	6023      	str	r3, [r4, #0]
 8001110:	e7f6      	b.n	8001100 <_printf_i+0x194>
 8001112:	4616      	mov	r6, r2
 8001114:	e7bd      	b.n	8001092 <_printf_i+0x126>
 8001116:	6833      	ldr	r3, [r6, #0]
 8001118:	6825      	ldr	r5, [r4, #0]
 800111a:	6961      	ldr	r1, [r4, #20]
 800111c:	1d18      	adds	r0, r3, #4
 800111e:	6030      	str	r0, [r6, #0]
 8001120:	062e      	lsls	r6, r5, #24
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	d501      	bpl.n	800112a <_printf_i+0x1be>
 8001126:	6019      	str	r1, [r3, #0]
 8001128:	e002      	b.n	8001130 <_printf_i+0x1c4>
 800112a:	0668      	lsls	r0, r5, #25
 800112c:	d5fb      	bpl.n	8001126 <_printf_i+0x1ba>
 800112e:	8019      	strh	r1, [r3, #0]
 8001130:	2300      	movs	r3, #0
 8001132:	6123      	str	r3, [r4, #16]
 8001134:	4616      	mov	r6, r2
 8001136:	e7bc      	b.n	80010b2 <_printf_i+0x146>
 8001138:	6833      	ldr	r3, [r6, #0]
 800113a:	1d1a      	adds	r2, r3, #4
 800113c:	6032      	str	r2, [r6, #0]
 800113e:	681e      	ldr	r6, [r3, #0]
 8001140:	6862      	ldr	r2, [r4, #4]
 8001142:	2100      	movs	r1, #0
 8001144:	4630      	mov	r0, r6
 8001146:	f7ff f84b 	bl	80001e0 <memchr>
 800114a:	b108      	cbz	r0, 8001150 <_printf_i+0x1e4>
 800114c:	1b80      	subs	r0, r0, r6
 800114e:	6060      	str	r0, [r4, #4]
 8001150:	6863      	ldr	r3, [r4, #4]
 8001152:	6123      	str	r3, [r4, #16]
 8001154:	2300      	movs	r3, #0
 8001156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800115a:	e7aa      	b.n	80010b2 <_printf_i+0x146>
 800115c:	6923      	ldr	r3, [r4, #16]
 800115e:	4632      	mov	r2, r6
 8001160:	4649      	mov	r1, r9
 8001162:	4640      	mov	r0, r8
 8001164:	47d0      	blx	sl
 8001166:	3001      	adds	r0, #1
 8001168:	d0ad      	beq.n	80010c6 <_printf_i+0x15a>
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	079b      	lsls	r3, r3, #30
 800116e:	d413      	bmi.n	8001198 <_printf_i+0x22c>
 8001170:	68e0      	ldr	r0, [r4, #12]
 8001172:	9b03      	ldr	r3, [sp, #12]
 8001174:	4298      	cmp	r0, r3
 8001176:	bfb8      	it	lt
 8001178:	4618      	movlt	r0, r3
 800117a:	e7a6      	b.n	80010ca <_printf_i+0x15e>
 800117c:	2301      	movs	r3, #1
 800117e:	4632      	mov	r2, r6
 8001180:	4649      	mov	r1, r9
 8001182:	4640      	mov	r0, r8
 8001184:	47d0      	blx	sl
 8001186:	3001      	adds	r0, #1
 8001188:	d09d      	beq.n	80010c6 <_printf_i+0x15a>
 800118a:	3501      	adds	r5, #1
 800118c:	68e3      	ldr	r3, [r4, #12]
 800118e:	9903      	ldr	r1, [sp, #12]
 8001190:	1a5b      	subs	r3, r3, r1
 8001192:	42ab      	cmp	r3, r5
 8001194:	dcf2      	bgt.n	800117c <_printf_i+0x210>
 8001196:	e7eb      	b.n	8001170 <_printf_i+0x204>
 8001198:	2500      	movs	r5, #0
 800119a:	f104 0619 	add.w	r6, r4, #25
 800119e:	e7f5      	b.n	800118c <_printf_i+0x220>
 80011a0:	08001592 	.word	0x08001592
 80011a4:	080015a3 	.word	0x080015a3

080011a8 <__sflush_r>:
 80011a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011b0:	0716      	lsls	r6, r2, #28
 80011b2:	4605      	mov	r5, r0
 80011b4:	460c      	mov	r4, r1
 80011b6:	d454      	bmi.n	8001262 <__sflush_r+0xba>
 80011b8:	684b      	ldr	r3, [r1, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dc02      	bgt.n	80011c4 <__sflush_r+0x1c>
 80011be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	dd48      	ble.n	8001256 <__sflush_r+0xae>
 80011c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011c6:	2e00      	cmp	r6, #0
 80011c8:	d045      	beq.n	8001256 <__sflush_r+0xae>
 80011ca:	2300      	movs	r3, #0
 80011cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011d0:	682f      	ldr	r7, [r5, #0]
 80011d2:	6a21      	ldr	r1, [r4, #32]
 80011d4:	602b      	str	r3, [r5, #0]
 80011d6:	d030      	beq.n	800123a <__sflush_r+0x92>
 80011d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011da:	89a3      	ldrh	r3, [r4, #12]
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	d505      	bpl.n	80011ec <__sflush_r+0x44>
 80011e0:	6863      	ldr	r3, [r4, #4]
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011e6:	b10b      	cbz	r3, 80011ec <__sflush_r+0x44>
 80011e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011ea:	1ad2      	subs	r2, r2, r3
 80011ec:	2300      	movs	r3, #0
 80011ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011f0:	6a21      	ldr	r1, [r4, #32]
 80011f2:	4628      	mov	r0, r5
 80011f4:	47b0      	blx	r6
 80011f6:	1c43      	adds	r3, r0, #1
 80011f8:	89a3      	ldrh	r3, [r4, #12]
 80011fa:	d106      	bne.n	800120a <__sflush_r+0x62>
 80011fc:	6829      	ldr	r1, [r5, #0]
 80011fe:	291d      	cmp	r1, #29
 8001200:	d82b      	bhi.n	800125a <__sflush_r+0xb2>
 8001202:	4a2a      	ldr	r2, [pc, #168]	@ (80012ac <__sflush_r+0x104>)
 8001204:	40ca      	lsrs	r2, r1
 8001206:	07d6      	lsls	r6, r2, #31
 8001208:	d527      	bpl.n	800125a <__sflush_r+0xb2>
 800120a:	2200      	movs	r2, #0
 800120c:	6062      	str	r2, [r4, #4]
 800120e:	04d9      	lsls	r1, r3, #19
 8001210:	6922      	ldr	r2, [r4, #16]
 8001212:	6022      	str	r2, [r4, #0]
 8001214:	d504      	bpl.n	8001220 <__sflush_r+0x78>
 8001216:	1c42      	adds	r2, r0, #1
 8001218:	d101      	bne.n	800121e <__sflush_r+0x76>
 800121a:	682b      	ldr	r3, [r5, #0]
 800121c:	b903      	cbnz	r3, 8001220 <__sflush_r+0x78>
 800121e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001222:	602f      	str	r7, [r5, #0]
 8001224:	b1b9      	cbz	r1, 8001256 <__sflush_r+0xae>
 8001226:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800122a:	4299      	cmp	r1, r3
 800122c:	d002      	beq.n	8001234 <__sflush_r+0x8c>
 800122e:	4628      	mov	r0, r5
 8001230:	f7ff fbf4 	bl	8000a1c <_free_r>
 8001234:	2300      	movs	r3, #0
 8001236:	6363      	str	r3, [r4, #52]	@ 0x34
 8001238:	e00d      	b.n	8001256 <__sflush_r+0xae>
 800123a:	2301      	movs	r3, #1
 800123c:	4628      	mov	r0, r5
 800123e:	47b0      	blx	r6
 8001240:	4602      	mov	r2, r0
 8001242:	1c50      	adds	r0, r2, #1
 8001244:	d1c9      	bne.n	80011da <__sflush_r+0x32>
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0c6      	beq.n	80011da <__sflush_r+0x32>
 800124c:	2b1d      	cmp	r3, #29
 800124e:	d001      	beq.n	8001254 <__sflush_r+0xac>
 8001250:	2b16      	cmp	r3, #22
 8001252:	d11e      	bne.n	8001292 <__sflush_r+0xea>
 8001254:	602f      	str	r7, [r5, #0]
 8001256:	2000      	movs	r0, #0
 8001258:	e022      	b.n	80012a0 <__sflush_r+0xf8>
 800125a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800125e:	b21b      	sxth	r3, r3
 8001260:	e01b      	b.n	800129a <__sflush_r+0xf2>
 8001262:	690f      	ldr	r7, [r1, #16]
 8001264:	2f00      	cmp	r7, #0
 8001266:	d0f6      	beq.n	8001256 <__sflush_r+0xae>
 8001268:	0793      	lsls	r3, r2, #30
 800126a:	680e      	ldr	r6, [r1, #0]
 800126c:	bf08      	it	eq
 800126e:	694b      	ldreq	r3, [r1, #20]
 8001270:	600f      	str	r7, [r1, #0]
 8001272:	bf18      	it	ne
 8001274:	2300      	movne	r3, #0
 8001276:	eba6 0807 	sub.w	r8, r6, r7
 800127a:	608b      	str	r3, [r1, #8]
 800127c:	f1b8 0f00 	cmp.w	r8, #0
 8001280:	dde9      	ble.n	8001256 <__sflush_r+0xae>
 8001282:	6a21      	ldr	r1, [r4, #32]
 8001284:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001286:	4643      	mov	r3, r8
 8001288:	463a      	mov	r2, r7
 800128a:	4628      	mov	r0, r5
 800128c:	47b0      	blx	r6
 800128e:	2800      	cmp	r0, #0
 8001290:	dc08      	bgt.n	80012a4 <__sflush_r+0xfc>
 8001292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800129a:	81a3      	strh	r3, [r4, #12]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a4:	4407      	add	r7, r0
 80012a6:	eba8 0800 	sub.w	r8, r8, r0
 80012aa:	e7e7      	b.n	800127c <__sflush_r+0xd4>
 80012ac:	20400001 	.word	0x20400001

080012b0 <_fflush_r>:
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	690b      	ldr	r3, [r1, #16]
 80012b4:	4605      	mov	r5, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	b913      	cbnz	r3, 80012c0 <_fflush_r+0x10>
 80012ba:	2500      	movs	r5, #0
 80012bc:	4628      	mov	r0, r5
 80012be:	bd38      	pop	{r3, r4, r5, pc}
 80012c0:	b118      	cbz	r0, 80012ca <_fflush_r+0x1a>
 80012c2:	6a03      	ldr	r3, [r0, #32]
 80012c4:	b90b      	cbnz	r3, 80012ca <_fflush_r+0x1a>
 80012c6:	f7ff faa1 	bl	800080c <__sinit>
 80012ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f3      	beq.n	80012ba <_fflush_r+0xa>
 80012d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012d4:	07d0      	lsls	r0, r2, #31
 80012d6:	d404      	bmi.n	80012e2 <_fflush_r+0x32>
 80012d8:	0599      	lsls	r1, r3, #22
 80012da:	d402      	bmi.n	80012e2 <_fflush_r+0x32>
 80012dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012de:	f7ff fb9a 	bl	8000a16 <__retarget_lock_acquire_recursive>
 80012e2:	4628      	mov	r0, r5
 80012e4:	4621      	mov	r1, r4
 80012e6:	f7ff ff5f 	bl	80011a8 <__sflush_r>
 80012ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012ec:	07da      	lsls	r2, r3, #31
 80012ee:	4605      	mov	r5, r0
 80012f0:	d4e4      	bmi.n	80012bc <_fflush_r+0xc>
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	059b      	lsls	r3, r3, #22
 80012f6:	d4e1      	bmi.n	80012bc <_fflush_r+0xc>
 80012f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012fa:	f7ff fb8d 	bl	8000a18 <__retarget_lock_release_recursive>
 80012fe:	e7dd      	b.n	80012bc <_fflush_r+0xc>

08001300 <__swbuf_r>:
 8001300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001302:	460e      	mov	r6, r1
 8001304:	4614      	mov	r4, r2
 8001306:	4605      	mov	r5, r0
 8001308:	b118      	cbz	r0, 8001312 <__swbuf_r+0x12>
 800130a:	6a03      	ldr	r3, [r0, #32]
 800130c:	b90b      	cbnz	r3, 8001312 <__swbuf_r+0x12>
 800130e:	f7ff fa7d 	bl	800080c <__sinit>
 8001312:	69a3      	ldr	r3, [r4, #24]
 8001314:	60a3      	str	r3, [r4, #8]
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	071a      	lsls	r2, r3, #28
 800131a:	d501      	bpl.n	8001320 <__swbuf_r+0x20>
 800131c:	6923      	ldr	r3, [r4, #16]
 800131e:	b943      	cbnz	r3, 8001332 <__swbuf_r+0x32>
 8001320:	4621      	mov	r1, r4
 8001322:	4628      	mov	r0, r5
 8001324:	f000 f82a 	bl	800137c <__swsetup_r>
 8001328:	b118      	cbz	r0, 8001332 <__swbuf_r+0x32>
 800132a:	f04f 37ff 	mov.w	r7, #4294967295
 800132e:	4638      	mov	r0, r7
 8001330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	6922      	ldr	r2, [r4, #16]
 8001336:	1a98      	subs	r0, r3, r2
 8001338:	6963      	ldr	r3, [r4, #20]
 800133a:	b2f6      	uxtb	r6, r6
 800133c:	4283      	cmp	r3, r0
 800133e:	4637      	mov	r7, r6
 8001340:	dc05      	bgt.n	800134e <__swbuf_r+0x4e>
 8001342:	4621      	mov	r1, r4
 8001344:	4628      	mov	r0, r5
 8001346:	f7ff ffb3 	bl	80012b0 <_fflush_r>
 800134a:	2800      	cmp	r0, #0
 800134c:	d1ed      	bne.n	800132a <__swbuf_r+0x2a>
 800134e:	68a3      	ldr	r3, [r4, #8]
 8001350:	3b01      	subs	r3, #1
 8001352:	60a3      	str	r3, [r4, #8]
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	6022      	str	r2, [r4, #0]
 800135a:	701e      	strb	r6, [r3, #0]
 800135c:	6962      	ldr	r2, [r4, #20]
 800135e:	1c43      	adds	r3, r0, #1
 8001360:	429a      	cmp	r2, r3
 8001362:	d004      	beq.n	800136e <__swbuf_r+0x6e>
 8001364:	89a3      	ldrh	r3, [r4, #12]
 8001366:	07db      	lsls	r3, r3, #31
 8001368:	d5e1      	bpl.n	800132e <__swbuf_r+0x2e>
 800136a:	2e0a      	cmp	r6, #10
 800136c:	d1df      	bne.n	800132e <__swbuf_r+0x2e>
 800136e:	4621      	mov	r1, r4
 8001370:	4628      	mov	r0, r5
 8001372:	f7ff ff9d 	bl	80012b0 <_fflush_r>
 8001376:	2800      	cmp	r0, #0
 8001378:	d0d9      	beq.n	800132e <__swbuf_r+0x2e>
 800137a:	e7d6      	b.n	800132a <__swbuf_r+0x2a>

0800137c <__swsetup_r>:
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <__swsetup_r+0xa8>)
 8001380:	4605      	mov	r5, r0
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	460c      	mov	r4, r1
 8001386:	b118      	cbz	r0, 8001390 <__swsetup_r+0x14>
 8001388:	6a03      	ldr	r3, [r0, #32]
 800138a:	b90b      	cbnz	r3, 8001390 <__swsetup_r+0x14>
 800138c:	f7ff fa3e 	bl	800080c <__sinit>
 8001390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001394:	0719      	lsls	r1, r3, #28
 8001396:	d422      	bmi.n	80013de <__swsetup_r+0x62>
 8001398:	06da      	lsls	r2, r3, #27
 800139a:	d407      	bmi.n	80013ac <__swsetup_r+0x30>
 800139c:	2209      	movs	r2, #9
 800139e:	602a      	str	r2, [r5, #0]
 80013a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a4:	81a3      	strh	r3, [r4, #12]
 80013a6:	f04f 30ff 	mov.w	r0, #4294967295
 80013aa:	e033      	b.n	8001414 <__swsetup_r+0x98>
 80013ac:	0758      	lsls	r0, r3, #29
 80013ae:	d512      	bpl.n	80013d6 <__swsetup_r+0x5a>
 80013b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013b2:	b141      	cbz	r1, 80013c6 <__swsetup_r+0x4a>
 80013b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013b8:	4299      	cmp	r1, r3
 80013ba:	d002      	beq.n	80013c2 <__swsetup_r+0x46>
 80013bc:	4628      	mov	r0, r5
 80013be:	f7ff fb2d 	bl	8000a1c <_free_r>
 80013c2:	2300      	movs	r3, #0
 80013c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80013c6:	89a3      	ldrh	r3, [r4, #12]
 80013c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013cc:	81a3      	strh	r3, [r4, #12]
 80013ce:	2300      	movs	r3, #0
 80013d0:	6063      	str	r3, [r4, #4]
 80013d2:	6923      	ldr	r3, [r4, #16]
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	89a3      	ldrh	r3, [r4, #12]
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	81a3      	strh	r3, [r4, #12]
 80013de:	6923      	ldr	r3, [r4, #16]
 80013e0:	b94b      	cbnz	r3, 80013f6 <__swsetup_r+0x7a>
 80013e2:	89a3      	ldrh	r3, [r4, #12]
 80013e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013ec:	d003      	beq.n	80013f6 <__swsetup_r+0x7a>
 80013ee:	4621      	mov	r1, r4
 80013f0:	4628      	mov	r0, r5
 80013f2:	f000 f84f 	bl	8001494 <__smakebuf_r>
 80013f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013fa:	f013 0201 	ands.w	r2, r3, #1
 80013fe:	d00a      	beq.n	8001416 <__swsetup_r+0x9a>
 8001400:	2200      	movs	r2, #0
 8001402:	60a2      	str	r2, [r4, #8]
 8001404:	6962      	ldr	r2, [r4, #20]
 8001406:	4252      	negs	r2, r2
 8001408:	61a2      	str	r2, [r4, #24]
 800140a:	6922      	ldr	r2, [r4, #16]
 800140c:	b942      	cbnz	r2, 8001420 <__swsetup_r+0xa4>
 800140e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001412:	d1c5      	bne.n	80013a0 <__swsetup_r+0x24>
 8001414:	bd38      	pop	{r3, r4, r5, pc}
 8001416:	0799      	lsls	r1, r3, #30
 8001418:	bf58      	it	pl
 800141a:	6962      	ldrpl	r2, [r4, #20]
 800141c:	60a2      	str	r2, [r4, #8]
 800141e:	e7f4      	b.n	800140a <__swsetup_r+0x8e>
 8001420:	2000      	movs	r0, #0
 8001422:	e7f7      	b.n	8001414 <__swsetup_r+0x98>
 8001424:	20000010 	.word	0x20000010

08001428 <_sbrk_r>:
 8001428:	b538      	push	{r3, r4, r5, lr}
 800142a:	4d06      	ldr	r5, [pc, #24]	@ (8001444 <_sbrk_r+0x1c>)
 800142c:	2300      	movs	r3, #0
 800142e:	4604      	mov	r4, r0
 8001430:	4608      	mov	r0, r1
 8001432:	602b      	str	r3, [r5, #0]
 8001434:	f7ff f81e 	bl	8000474 <_sbrk>
 8001438:	1c43      	adds	r3, r0, #1
 800143a:	d102      	bne.n	8001442 <_sbrk_r+0x1a>
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	b103      	cbz	r3, 8001442 <_sbrk_r+0x1a>
 8001440:	6023      	str	r3, [r4, #0]
 8001442:	bd38      	pop	{r3, r4, r5, pc}
 8001444:	200001c0 	.word	0x200001c0

08001448 <__swhatbuf_r>:
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	460c      	mov	r4, r1
 800144c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001450:	2900      	cmp	r1, #0
 8001452:	b096      	sub	sp, #88	@ 0x58
 8001454:	4615      	mov	r5, r2
 8001456:	461e      	mov	r6, r3
 8001458:	da0d      	bge.n	8001476 <__swhatbuf_r+0x2e>
 800145a:	89a3      	ldrh	r3, [r4, #12]
 800145c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001460:	f04f 0100 	mov.w	r1, #0
 8001464:	bf14      	ite	ne
 8001466:	2340      	movne	r3, #64	@ 0x40
 8001468:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800146c:	2000      	movs	r0, #0
 800146e:	6031      	str	r1, [r6, #0]
 8001470:	602b      	str	r3, [r5, #0]
 8001472:	b016      	add	sp, #88	@ 0x58
 8001474:	bd70      	pop	{r4, r5, r6, pc}
 8001476:	466a      	mov	r2, sp
 8001478:	f000 f848 	bl	800150c <_fstat_r>
 800147c:	2800      	cmp	r0, #0
 800147e:	dbec      	blt.n	800145a <__swhatbuf_r+0x12>
 8001480:	9901      	ldr	r1, [sp, #4]
 8001482:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001486:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800148a:	4259      	negs	r1, r3
 800148c:	4159      	adcs	r1, r3
 800148e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001492:	e7eb      	b.n	800146c <__swhatbuf_r+0x24>

08001494 <__smakebuf_r>:
 8001494:	898b      	ldrh	r3, [r1, #12]
 8001496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001498:	079d      	lsls	r5, r3, #30
 800149a:	4606      	mov	r6, r0
 800149c:	460c      	mov	r4, r1
 800149e:	d507      	bpl.n	80014b0 <__smakebuf_r+0x1c>
 80014a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80014a4:	6023      	str	r3, [r4, #0]
 80014a6:	6123      	str	r3, [r4, #16]
 80014a8:	2301      	movs	r3, #1
 80014aa:	6163      	str	r3, [r4, #20]
 80014ac:	b003      	add	sp, #12
 80014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b0:	ab01      	add	r3, sp, #4
 80014b2:	466a      	mov	r2, sp
 80014b4:	f7ff ffc8 	bl	8001448 <__swhatbuf_r>
 80014b8:	9f00      	ldr	r7, [sp, #0]
 80014ba:	4605      	mov	r5, r0
 80014bc:	4639      	mov	r1, r7
 80014be:	4630      	mov	r0, r6
 80014c0:	f7ff fb18 	bl	8000af4 <_malloc_r>
 80014c4:	b948      	cbnz	r0, 80014da <__smakebuf_r+0x46>
 80014c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ca:	059a      	lsls	r2, r3, #22
 80014cc:	d4ee      	bmi.n	80014ac <__smakebuf_r+0x18>
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	81a3      	strh	r3, [r4, #12]
 80014d8:	e7e2      	b.n	80014a0 <__smakebuf_r+0xc>
 80014da:	89a3      	ldrh	r3, [r4, #12]
 80014dc:	6020      	str	r0, [r4, #0]
 80014de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e2:	81a3      	strh	r3, [r4, #12]
 80014e4:	9b01      	ldr	r3, [sp, #4]
 80014e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014ea:	b15b      	cbz	r3, 8001504 <__smakebuf_r+0x70>
 80014ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014f0:	4630      	mov	r0, r6
 80014f2:	f000 f81d 	bl	8001530 <_isatty_r>
 80014f6:	b128      	cbz	r0, 8001504 <__smakebuf_r+0x70>
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	81a3      	strh	r3, [r4, #12]
 8001504:	89a3      	ldrh	r3, [r4, #12]
 8001506:	431d      	orrs	r5, r3
 8001508:	81a5      	strh	r5, [r4, #12]
 800150a:	e7cf      	b.n	80014ac <__smakebuf_r+0x18>

0800150c <_fstat_r>:
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4d07      	ldr	r5, [pc, #28]	@ (800152c <_fstat_r+0x20>)
 8001510:	2300      	movs	r3, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	4611      	mov	r1, r2
 8001518:	602b      	str	r3, [r5, #0]
 800151a:	f7fe ff83 	bl	8000424 <_fstat>
 800151e:	1c43      	adds	r3, r0, #1
 8001520:	d102      	bne.n	8001528 <_fstat_r+0x1c>
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	b103      	cbz	r3, 8001528 <_fstat_r+0x1c>
 8001526:	6023      	str	r3, [r4, #0]
 8001528:	bd38      	pop	{r3, r4, r5, pc}
 800152a:	bf00      	nop
 800152c:	200001c0 	.word	0x200001c0

08001530 <_isatty_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	4d06      	ldr	r5, [pc, #24]	@ (800154c <_isatty_r+0x1c>)
 8001534:	2300      	movs	r3, #0
 8001536:	4604      	mov	r4, r0
 8001538:	4608      	mov	r0, r1
 800153a:	602b      	str	r3, [r5, #0]
 800153c:	f7fe ff82 	bl	8000444 <_isatty>
 8001540:	1c43      	adds	r3, r0, #1
 8001542:	d102      	bne.n	800154a <_isatty_r+0x1a>
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	b103      	cbz	r3, 800154a <_isatty_r+0x1a>
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	bd38      	pop	{r3, r4, r5, pc}
 800154c:	200001c0 	.word	0x200001c0

08001550 <_init>:
 8001550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001552:	bf00      	nop
 8001554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001556:	bc08      	pop	{r3}
 8001558:	469e      	mov	lr, r3
 800155a:	4770      	bx	lr

0800155c <_fini>:
 800155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155e:	bf00      	nop
 8001560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001562:	bc08      	pop	{r3}
 8001564:	469e      	mov	lr, r3
 8001566:	4770      	bx	lr
