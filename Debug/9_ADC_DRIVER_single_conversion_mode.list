
9_ADC_DRIVER_single_conversion_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800158c  0800158c  0000258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015d8  080015d8  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080015d8  080015d8  000025d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015e0  080015e0  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015e0  080015e0  000025e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015e4  080015e4  000025e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080015e8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000060  08001648  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08001648  000031d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000209d  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009a4  00000000  00000000  0000512d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000300  00000000  00000000  00005ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000215  00000000  00000000  00005dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015994  00000000  00000000  00005fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000420d  00000000  00000000  0001b981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b98  00000000  00000000  0001fb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001104  00000000  00000000  000a376c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000a4870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001574 	.word	0x08001574

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08001574 	.word	0x08001574

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:
#define CR2_ADON (1U<<0)
#define CR2_SWSTART (1U<<30)
#define SR_EOC (1U<<1)
#include "ADC.h"

void pa1_adc_init(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	//enable clock access to adc pin port  gpioa
    RCC->AHB1ENR |=GPIOAEN;
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <pa1_adc_init+0x58>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <pa1_adc_init+0x58>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
	//st moder to pa1 to analog
    GPIOA->MODER |=(1U<<2);
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <pa1_adc_init+0x5c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <pa1_adc_init+0x5c>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=(1U<<3);
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <pa1_adc_init+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <pa1_adc_init+0x5c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]
	//configure the adc pin
    RCC->APB2ENR |= ADC1EN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <pa1_adc_init+0x58>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <pa1_adc_init+0x58>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002b2:	6453      	str	r3, [r2, #68]	@ 0x44
    //Configuring the adc parameters
    /*
     * conversion sequnence start/
     * conversion sequence length
     * enable adc module*/
    ADC1->SQR3=ADCCH1;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <pa1_adc_init+0x60>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SQR1=ADC_SEQ_LEN_1;
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <pa1_adc_init+0x60>)
 80002bc:	2200      	movs	r2, #0
 80002be:	62da      	str	r2, [r3, #44]	@ 0x2c

    ADC1->CR2 |=CR2_ADON;
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a06      	ldr	r2, [pc, #24]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6093      	str	r3, [r2, #8]


}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40012000 	.word	0x40012000

080002e4 <start_conversion>:

void start_conversion(void){
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	//start the adc conversion
	ADC1->CR2|=CR2_SWSTART;//enables the swst(start conversions in the regular channnel)
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <start_conversion+0x1c>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <start_conversion+0x1c>)
 80002ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002f2:	6093      	str	r3, [r2, #8]

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40012000 	.word	0x40012000

08000304 <adc_read>:
uint32_t adc_read(void){
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	//wait for conversion to be complete
	//read the converted result
while(!(ADC1->SR & SR_EOC)){}
 8000308:	bf00      	nop
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <adc_read+0x20>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f003 0302 	and.w	r3, r3, #2
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0f9      	beq.n	800030a <adc_read+0x6>
return (ADC1->DR);
 8000316:	4b03      	ldr	r3, [pc, #12]	@ (8000324 <adc_read+0x20>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800031a:	4618      	mov	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	40012000 	.word	0x40012000

08000328 <main>:
#include "uart.h"
#include"ADC.h"


uint32_t sensor_value;
int main(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0


	UART2_RXTX_INIT();
 800032c:	f000 f922 	bl	8000574 <UART2_RXTX_INIT>
    pa1_adc_init();
 8000330:	f7ff ffa6 	bl	8000280 <pa1_adc_init>
	start_conversion();
 8000334:	f7ff ffd6 	bl	80002e4 <start_conversion>
	while(1){
		 start_conversion();
 8000338:	f7ff ffd4 	bl	80002e4 <start_conversion>
		sensor_value=adc_read();
 800033c:	f7ff ffe2 	bl	8000304 <adc_read>
 8000340:	4603      	mov	r3, r0
 8000342:	4a05      	ldr	r2, [pc, #20]	@ (8000358 <main+0x30>)
 8000344:	6013      	str	r3, [r2, #0]
		printf("sensor value :%d \n \r ",(int)sensor_value);
 8000346:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <main+0x30>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4619      	mov	r1, r3
 800034c:	4803      	ldr	r0, [pc, #12]	@ (800035c <main+0x34>)
 800034e:	f000 faa5 	bl	800089c <iprintf>
		 start_conversion();
 8000352:	bf00      	nop
 8000354:	e7f0      	b.n	8000338 <main+0x10>
 8000356:	bf00      	nop
 8000358:	2000007c 	.word	0x2000007c
 800035c:	0800158c 	.word	0x0800158c

08000360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <NMI_Handler+0x4>

08000368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <HardFault_Handler+0x4>

08000370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <MemManage_Handler+0x4>

08000378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <UsageFault_Handler+0x4>

08000388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b6:	f000 f99b 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}

080003be <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
 80003ce:	e00a      	b.n	80003e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003d0:	f3af 8000 	nop.w
 80003d4:	4601      	mov	r1, r0
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	60ba      	str	r2, [r7, #8]
 80003dc:	b2ca      	uxtb	r2, r1
 80003de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	3301      	adds	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	697a      	ldr	r2, [r7, #20]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	429a      	cmp	r2, r3
 80003ec:	dbf0      	blt.n	80003d0 <_read+0x12>
  }

  return len;
 80003ee:	687b      	ldr	r3, [r7, #4]
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	60b9      	str	r1, [r7, #8]
 8000402:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	e009      	b.n	800041e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	60ba      	str	r2, [r7, #8]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f936 	bl	8000684 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	3301      	adds	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	697a      	ldr	r2, [r7, #20]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	429a      	cmp	r2, r3
 8000424:	dbf1      	blt.n	800040a <_write+0x12>
  }
  return len;
 8000426:	687b      	ldr	r3, [r7, #4]
}
 8000428:	4618      	mov	r0, r3
 800042a:	3718      	adds	r7, #24
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <_close>:

int _close(int file)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800043c:	4618      	mov	r0, r3
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000458:	605a      	str	r2, [r3, #4]
  return 0;
 800045a:	2300      	movs	r3, #0
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <_isatty>:

int _isatty(int file)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000470:	2301      	movs	r3, #1
}
 8000472:	4618      	mov	r0, r3
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800047e:	b480      	push	{r7}
 8000480:	b085      	sub	sp, #20
 8000482:	af00      	add	r7, sp, #0
 8000484:	60f8      	str	r0, [r7, #12]
 8000486:	60b9      	str	r1, [r7, #8]
 8000488:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a0:	4a14      	ldr	r2, [pc, #80]	@ (80004f4 <_sbrk+0x5c>)
 80004a2:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <_sbrk+0x60>)
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ac:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b4:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <_sbrk+0x64>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	@ (8000500 <_sbrk+0x68>)
 80004b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ba:	4b10      	ldr	r3, [pc, #64]	@ (80004fc <_sbrk+0x64>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d207      	bcs.n	80004d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c8:	f000 fa8c 	bl	80009e4 <__errno>
 80004cc:	4603      	mov	r3, r0
 80004ce:	220c      	movs	r2, #12
 80004d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
 80004d6:	e009      	b.n	80004ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d8:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <_sbrk+0x64>)
 80004e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20018000 	.word	0x20018000
 80004f8:	00000400 	.word	0x00000400
 80004fc:	20000080 	.word	0x20000080
 8000500:	200001d8 	.word	0x200001d8

08000504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000508:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <SystemInit+0x20>)
 800050a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800050e:	4a05      	ldr	r2, [pc, #20]	@ (8000524 <SystemInit+0x20>)
 8000510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <uart_set_baudrate>:
static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate);
int __io_putchar(int ch);



static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate){
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compute_uart_div(Perif_clk,Baudrate);
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f000 f808 	bl	800054c <compute_uart_div>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	609a      	str	r2, [r3, #8]
}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <compute_uart_div>:


static uint16_t compute_uart_div(uint32_t Perif_clk,uint32_t Baudrate){
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	return ((Perif_clk +(Baudrate/2U))/Baudrate);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	085a      	lsrs	r2, r3, #1
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	441a      	add	r2, r3
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	fbb2 f3f3 	udiv	r3, r2, r3
 8000564:	b29b      	uxth	r3, r3

}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <UART2_RXTX_INIT>:




void UART2_RXTX_INIT(void){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	/*************congiure uart gpio pin*************/
	//enable clock to gpioa
	RCC->AHB1ENR|=GPIOAEN;
 8000578:	4b32      	ldr	r3, [pc, #200]	@ (8000644 <UART2_RXTX_INIT+0xd0>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057c:	4a31      	ldr	r2, [pc, #196]	@ (8000644 <UART2_RXTX_INIT+0xd0>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6313      	str	r3, [r2, #48]	@ 0x30
	//set pa2 to alternate function mode
	GPIOA->MODER|=(1U<<5);
 8000584:	4b30      	ldr	r3, [pc, #192]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a2f      	ldr	r2, [pc, #188]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<4);
 8000590:	4b2d      	ldr	r3, [pc, #180]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a2c      	ldr	r2, [pc, #176]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 8000596:	f023 0310 	bic.w	r3, r3, #16
 800059a:	6013      	str	r3, [r2, #0]
	//set pa2 alternate function type to UART_TX(AF07)
	GPIOA->AFR[0]|=(1U<<8);//for afrl low arf[0] and for afr high arf[1]
 800059c:	4b2a      	ldr	r3, [pc, #168]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	4a29      	ldr	r2, [pc, #164]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<9);
 80005a8:	4b27      	ldr	r3, [pc, #156]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005aa:	6a1b      	ldr	r3, [r3, #32]
 80005ac:	4a26      	ldr	r2, [pc, #152]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<10);
 80005b4:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005b6:	6a1b      	ldr	r3, [r3, #32]
 80005b8:	4a23      	ldr	r2, [pc, #140]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 80005c0:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	4a20      	ldr	r2, [pc, #128]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005ca:	6213      	str	r3, [r2, #32]

   //set pa3 to alternate function mode as it is rx value
	GPIOA->MODER|=(1U<<7);
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<6);
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005e2:	6013      	str	r3, [r2, #0]


	GPIOA->AFR[0]|=(1U<<12);//for afrl low arf[0] and for afr high arf[1]
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005e6:	6a1b      	ldr	r3, [r3, #32]
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<13);
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005f2:	6a1b      	ldr	r3, [r3, #32]
 80005f4:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<14);
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 80005fe:	6a1b      	ldr	r3, [r3, #32]
 8000600:	4a11      	ldr	r2, [pc, #68]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000606:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<15);
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 800060a:	6a1b      	ldr	r3, [r3, #32]
 800060c:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <UART2_RXTX_INIT+0xd4>)
 800060e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000612:	6213      	str	r3, [r2, #32]


	/*configure uart module*/
	//enable clock  to uart2
	RCC->APB1ENR|=UART_EN;
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <UART2_RXTX_INIT+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <UART2_RXTX_INIT+0xd0>)
 800061a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
	//configure baud rate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUD_RATE);
 8000620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000624:	4909      	ldr	r1, [pc, #36]	@ (800064c <UART2_RXTX_INIT+0xd8>)
 8000626:	480a      	ldr	r0, [pc, #40]	@ (8000650 <UART2_RXTX_INIT+0xdc>)
 8000628:	f7ff ff7e 	bl	8000528 <uart_set_baudrate>
	//configure the transfer direction
	USART2->CR1 =CR1_TE|CR1_RX;
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <UART2_RXTX_INIT+0xdc>)
 800062e:	220c      	movs	r2, #12
 8000630:	60da      	str	r2, [r3, #12]

	USART2->CR1|=(1U<<13);
 8000632:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <UART2_RXTX_INIT+0xdc>)
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	4a06      	ldr	r2, [pc, #24]	@ (8000650 <UART2_RXTX_INIT+0xdc>)
 8000638:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800063c:	60d3      	str	r3, [r2, #12]
	//enable uart module
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000
 800064c:	00f42400 	.word	0x00f42400
 8000650:	40004400 	.word	0x40004400

08000654 <uart2_write>:
	while(!(USART2->SR & SR_RXE)){}

	//return the data
	return USART2->DR;
}
void uart2_write(int ch){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	//make sure the transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 800065c:	bf00      	nop
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <uart2_write+0x2c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f9      	beq.n	800065e <uart2_write+0xa>
	//write to transmit data register
	USART2->DR = ch & 0xff;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <uart2_write+0x2c>)
 800066e:	b2db      	uxtb	r3, r3
 8000670:	6053      	str	r3, [r2, #4]

}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40004400 	.word	0x40004400

08000684 <__io_putchar>:
int __io_putchar(int ch){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ffe1 	bl	8000654 <uart2_write>
	return ch;
 8000692:	687b      	ldr	r3, [r7, #4]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800069c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006a0:	f7ff ff30 	bl	8000504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	@ (80006dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	@ (80006e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	@ (80006e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80006ca:	f000 f991 	bl	80009f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ce:	f7ff fe2b 	bl	8000328 <main>
  bx  lr    
 80006d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006e0:	080015e8 	.word	0x080015e8
  ldr r2, =_sbss
 80006e4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006e8:	200001d4 	.word	0x200001d4

080006ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC_IRQHandler>
	...

080006f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <HAL_IncTick+0x20>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <HAL_IncTick+0x24>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a04      	ldr	r2, [pc, #16]	@ (8000714 <HAL_IncTick+0x24>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000000 	.word	0x20000000
 8000714:	20000084 	.word	0x20000084

08000718 <std>:
 8000718:	2300      	movs	r3, #0
 800071a:	b510      	push	{r4, lr}
 800071c:	4604      	mov	r4, r0
 800071e:	e9c0 3300 	strd	r3, r3, [r0]
 8000722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000726:	6083      	str	r3, [r0, #8]
 8000728:	8181      	strh	r1, [r0, #12]
 800072a:	6643      	str	r3, [r0, #100]	@ 0x64
 800072c:	81c2      	strh	r2, [r0, #14]
 800072e:	6183      	str	r3, [r0, #24]
 8000730:	4619      	mov	r1, r3
 8000732:	2208      	movs	r2, #8
 8000734:	305c      	adds	r0, #92	@ 0x5c
 8000736:	f000 f906 	bl	8000946 <memset>
 800073a:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <std+0x58>)
 800073c:	6263      	str	r3, [r4, #36]	@ 0x24
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <std+0x5c>)
 8000740:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <std+0x60>)
 8000744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <std+0x64>)
 8000748:	6323      	str	r3, [r4, #48]	@ 0x30
 800074a:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <std+0x68>)
 800074c:	6224      	str	r4, [r4, #32]
 800074e:	429c      	cmp	r4, r3
 8000750:	d006      	beq.n	8000760 <std+0x48>
 8000752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000756:	4294      	cmp	r4, r2
 8000758:	d002      	beq.n	8000760 <std+0x48>
 800075a:	33d0      	adds	r3, #208	@ 0xd0
 800075c:	429c      	cmp	r4, r3
 800075e:	d105      	bne.n	800076c <std+0x54>
 8000760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000768:	f000 b966 	b.w	8000a38 <__retarget_lock_init_recursive>
 800076c:	bd10      	pop	{r4, pc}
 800076e:	bf00      	nop
 8000770:	080008c1 	.word	0x080008c1
 8000774:	080008e3 	.word	0x080008e3
 8000778:	0800091b 	.word	0x0800091b
 800077c:	0800093f 	.word	0x0800093f
 8000780:	20000088 	.word	0x20000088

08000784 <stdio_exit_handler>:
 8000784:	4a02      	ldr	r2, [pc, #8]	@ (8000790 <stdio_exit_handler+0xc>)
 8000786:	4903      	ldr	r1, [pc, #12]	@ (8000794 <stdio_exit_handler+0x10>)
 8000788:	4803      	ldr	r0, [pc, #12]	@ (8000798 <stdio_exit_handler+0x14>)
 800078a:	f000 b869 	b.w	8000860 <_fwalk_sglue>
 800078e:	bf00      	nop
 8000790:	20000004 	.word	0x20000004
 8000794:	080012d5 	.word	0x080012d5
 8000798:	20000014 	.word	0x20000014

0800079c <cleanup_stdio>:
 800079c:	6841      	ldr	r1, [r0, #4]
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <cleanup_stdio+0x34>)
 80007a0:	4299      	cmp	r1, r3
 80007a2:	b510      	push	{r4, lr}
 80007a4:	4604      	mov	r4, r0
 80007a6:	d001      	beq.n	80007ac <cleanup_stdio+0x10>
 80007a8:	f000 fd94 	bl	80012d4 <_fflush_r>
 80007ac:	68a1      	ldr	r1, [r4, #8]
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <cleanup_stdio+0x38>)
 80007b0:	4299      	cmp	r1, r3
 80007b2:	d002      	beq.n	80007ba <cleanup_stdio+0x1e>
 80007b4:	4620      	mov	r0, r4
 80007b6:	f000 fd8d 	bl	80012d4 <_fflush_r>
 80007ba:	68e1      	ldr	r1, [r4, #12]
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <cleanup_stdio+0x3c>)
 80007be:	4299      	cmp	r1, r3
 80007c0:	d004      	beq.n	80007cc <cleanup_stdio+0x30>
 80007c2:	4620      	mov	r0, r4
 80007c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c8:	f000 bd84 	b.w	80012d4 <_fflush_r>
 80007cc:	bd10      	pop	{r4, pc}
 80007ce:	bf00      	nop
 80007d0:	20000088 	.word	0x20000088
 80007d4:	200000f0 	.word	0x200000f0
 80007d8:	20000158 	.word	0x20000158

080007dc <global_stdio_init.part.0>:
 80007dc:	b510      	push	{r4, lr}
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <global_stdio_init.part.0+0x30>)
 80007e0:	4c0b      	ldr	r4, [pc, #44]	@ (8000810 <global_stdio_init.part.0+0x34>)
 80007e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <global_stdio_init.part.0+0x38>)
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	4620      	mov	r0, r4
 80007e8:	2200      	movs	r2, #0
 80007ea:	2104      	movs	r1, #4
 80007ec:	f7ff ff94 	bl	8000718 <std>
 80007f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007f4:	2201      	movs	r2, #1
 80007f6:	2109      	movs	r1, #9
 80007f8:	f7ff ff8e 	bl	8000718 <std>
 80007fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000800:	2202      	movs	r2, #2
 8000802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000806:	2112      	movs	r1, #18
 8000808:	f7ff bf86 	b.w	8000718 <std>
 800080c:	200001c0 	.word	0x200001c0
 8000810:	20000088 	.word	0x20000088
 8000814:	08000785 	.word	0x08000785

08000818 <__sfp_lock_acquire>:
 8000818:	4801      	ldr	r0, [pc, #4]	@ (8000820 <__sfp_lock_acquire+0x8>)
 800081a:	f000 b90e 	b.w	8000a3a <__retarget_lock_acquire_recursive>
 800081e:	bf00      	nop
 8000820:	200001c9 	.word	0x200001c9

08000824 <__sfp_lock_release>:
 8000824:	4801      	ldr	r0, [pc, #4]	@ (800082c <__sfp_lock_release+0x8>)
 8000826:	f000 b909 	b.w	8000a3c <__retarget_lock_release_recursive>
 800082a:	bf00      	nop
 800082c:	200001c9 	.word	0x200001c9

08000830 <__sinit>:
 8000830:	b510      	push	{r4, lr}
 8000832:	4604      	mov	r4, r0
 8000834:	f7ff fff0 	bl	8000818 <__sfp_lock_acquire>
 8000838:	6a23      	ldr	r3, [r4, #32]
 800083a:	b11b      	cbz	r3, 8000844 <__sinit+0x14>
 800083c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000840:	f7ff bff0 	b.w	8000824 <__sfp_lock_release>
 8000844:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <__sinit+0x28>)
 8000846:	6223      	str	r3, [r4, #32]
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <__sinit+0x2c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f5      	bne.n	800083c <__sinit+0xc>
 8000850:	f7ff ffc4 	bl	80007dc <global_stdio_init.part.0>
 8000854:	e7f2      	b.n	800083c <__sinit+0xc>
 8000856:	bf00      	nop
 8000858:	0800079d 	.word	0x0800079d
 800085c:	200001c0 	.word	0x200001c0

08000860 <_fwalk_sglue>:
 8000860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000864:	4607      	mov	r7, r0
 8000866:	4688      	mov	r8, r1
 8000868:	4614      	mov	r4, r2
 800086a:	2600      	movs	r6, #0
 800086c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000870:	f1b9 0901 	subs.w	r9, r9, #1
 8000874:	d505      	bpl.n	8000882 <_fwalk_sglue+0x22>
 8000876:	6824      	ldr	r4, [r4, #0]
 8000878:	2c00      	cmp	r4, #0
 800087a:	d1f7      	bne.n	800086c <_fwalk_sglue+0xc>
 800087c:	4630      	mov	r0, r6
 800087e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000882:	89ab      	ldrh	r3, [r5, #12]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d907      	bls.n	8000898 <_fwalk_sglue+0x38>
 8000888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800088c:	3301      	adds	r3, #1
 800088e:	d003      	beq.n	8000898 <_fwalk_sglue+0x38>
 8000890:	4629      	mov	r1, r5
 8000892:	4638      	mov	r0, r7
 8000894:	47c0      	blx	r8
 8000896:	4306      	orrs	r6, r0
 8000898:	3568      	adds	r5, #104	@ 0x68
 800089a:	e7e9      	b.n	8000870 <_fwalk_sglue+0x10>

0800089c <iprintf>:
 800089c:	b40f      	push	{r0, r1, r2, r3}
 800089e:	b507      	push	{r0, r1, r2, lr}
 80008a0:	4906      	ldr	r1, [pc, #24]	@ (80008bc <iprintf+0x20>)
 80008a2:	ab04      	add	r3, sp, #16
 80008a4:	6808      	ldr	r0, [r1, #0]
 80008a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80008aa:	6881      	ldr	r1, [r0, #8]
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	f000 f9e9 	bl	8000c84 <_vfiprintf_r>
 80008b2:	b003      	add	sp, #12
 80008b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr
 80008bc:	20000010 	.word	0x20000010

080008c0 <__sread>:
 80008c0:	b510      	push	{r4, lr}
 80008c2:	460c      	mov	r4, r1
 80008c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c8:	f000 f868 	bl	800099c <_read_r>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	bfab      	itete	ge
 80008d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008d2:	89a3      	ldrhlt	r3, [r4, #12]
 80008d4:	181b      	addge	r3, r3, r0
 80008d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008da:	bfac      	ite	ge
 80008dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008de:	81a3      	strhlt	r3, [r4, #12]
 80008e0:	bd10      	pop	{r4, pc}

080008e2 <__swrite>:
 80008e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e6:	461f      	mov	r7, r3
 80008e8:	898b      	ldrh	r3, [r1, #12]
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	4605      	mov	r5, r0
 80008ee:	460c      	mov	r4, r1
 80008f0:	4616      	mov	r6, r2
 80008f2:	d505      	bpl.n	8000900 <__swrite+0x1e>
 80008f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f8:	2302      	movs	r3, #2
 80008fa:	2200      	movs	r2, #0
 80008fc:	f000 f83c 	bl	8000978 <_lseek_r>
 8000900:	89a3      	ldrh	r3, [r4, #12]
 8000902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800090a:	81a3      	strh	r3, [r4, #12]
 800090c:	4632      	mov	r2, r6
 800090e:	463b      	mov	r3, r7
 8000910:	4628      	mov	r0, r5
 8000912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000916:	f000 b853 	b.w	80009c0 <_write_r>

0800091a <__sseek>:
 800091a:	b510      	push	{r4, lr}
 800091c:	460c      	mov	r4, r1
 800091e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000922:	f000 f829 	bl	8000978 <_lseek_r>
 8000926:	1c43      	adds	r3, r0, #1
 8000928:	89a3      	ldrh	r3, [r4, #12]
 800092a:	bf15      	itete	ne
 800092c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800092e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000936:	81a3      	strheq	r3, [r4, #12]
 8000938:	bf18      	it	ne
 800093a:	81a3      	strhne	r3, [r4, #12]
 800093c:	bd10      	pop	{r4, pc}

0800093e <__sclose>:
 800093e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000942:	f000 b809 	b.w	8000958 <_close_r>

08000946 <memset>:
 8000946:	4402      	add	r2, r0
 8000948:	4603      	mov	r3, r0
 800094a:	4293      	cmp	r3, r2
 800094c:	d100      	bne.n	8000950 <memset+0xa>
 800094e:	4770      	bx	lr
 8000950:	f803 1b01 	strb.w	r1, [r3], #1
 8000954:	e7f9      	b.n	800094a <memset+0x4>
	...

08000958 <_close_r>:
 8000958:	b538      	push	{r3, r4, r5, lr}
 800095a:	4d06      	ldr	r5, [pc, #24]	@ (8000974 <_close_r+0x1c>)
 800095c:	2300      	movs	r3, #0
 800095e:	4604      	mov	r4, r0
 8000960:	4608      	mov	r0, r1
 8000962:	602b      	str	r3, [r5, #0]
 8000964:	f7ff fd64 	bl	8000430 <_close>
 8000968:	1c43      	adds	r3, r0, #1
 800096a:	d102      	bne.n	8000972 <_close_r+0x1a>
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	b103      	cbz	r3, 8000972 <_close_r+0x1a>
 8000970:	6023      	str	r3, [r4, #0]
 8000972:	bd38      	pop	{r3, r4, r5, pc}
 8000974:	200001c4 	.word	0x200001c4

08000978 <_lseek_r>:
 8000978:	b538      	push	{r3, r4, r5, lr}
 800097a:	4d07      	ldr	r5, [pc, #28]	@ (8000998 <_lseek_r+0x20>)
 800097c:	4604      	mov	r4, r0
 800097e:	4608      	mov	r0, r1
 8000980:	4611      	mov	r1, r2
 8000982:	2200      	movs	r2, #0
 8000984:	602a      	str	r2, [r5, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	f7ff fd79 	bl	800047e <_lseek>
 800098c:	1c43      	adds	r3, r0, #1
 800098e:	d102      	bne.n	8000996 <_lseek_r+0x1e>
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	b103      	cbz	r3, 8000996 <_lseek_r+0x1e>
 8000994:	6023      	str	r3, [r4, #0]
 8000996:	bd38      	pop	{r3, r4, r5, pc}
 8000998:	200001c4 	.word	0x200001c4

0800099c <_read_r>:
 800099c:	b538      	push	{r3, r4, r5, lr}
 800099e:	4d07      	ldr	r5, [pc, #28]	@ (80009bc <_read_r+0x20>)
 80009a0:	4604      	mov	r4, r0
 80009a2:	4608      	mov	r0, r1
 80009a4:	4611      	mov	r1, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	602a      	str	r2, [r5, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f7ff fd07 	bl	80003be <_read>
 80009b0:	1c43      	adds	r3, r0, #1
 80009b2:	d102      	bne.n	80009ba <_read_r+0x1e>
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	b103      	cbz	r3, 80009ba <_read_r+0x1e>
 80009b8:	6023      	str	r3, [r4, #0]
 80009ba:	bd38      	pop	{r3, r4, r5, pc}
 80009bc:	200001c4 	.word	0x200001c4

080009c0 <_write_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4d07      	ldr	r5, [pc, #28]	@ (80009e0 <_write_r+0x20>)
 80009c4:	4604      	mov	r4, r0
 80009c6:	4608      	mov	r0, r1
 80009c8:	4611      	mov	r1, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	602a      	str	r2, [r5, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	f7ff fd12 	bl	80003f8 <_write>
 80009d4:	1c43      	adds	r3, r0, #1
 80009d6:	d102      	bne.n	80009de <_write_r+0x1e>
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	b103      	cbz	r3, 80009de <_write_r+0x1e>
 80009dc:	6023      	str	r3, [r4, #0]
 80009de:	bd38      	pop	{r3, r4, r5, pc}
 80009e0:	200001c4 	.word	0x200001c4

080009e4 <__errno>:
 80009e4:	4b01      	ldr	r3, [pc, #4]	@ (80009ec <__errno+0x8>)
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000010 	.word	0x20000010

080009f0 <__libc_init_array>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000a28 <__libc_init_array+0x38>)
 80009f4:	4c0d      	ldr	r4, [pc, #52]	@ (8000a2c <__libc_init_array+0x3c>)
 80009f6:	1b64      	subs	r4, r4, r5
 80009f8:	10a4      	asrs	r4, r4, #2
 80009fa:	2600      	movs	r6, #0
 80009fc:	42a6      	cmp	r6, r4
 80009fe:	d109      	bne.n	8000a14 <__libc_init_array+0x24>
 8000a00:	4d0b      	ldr	r5, [pc, #44]	@ (8000a30 <__libc_init_array+0x40>)
 8000a02:	4c0c      	ldr	r4, [pc, #48]	@ (8000a34 <__libc_init_array+0x44>)
 8000a04:	f000 fdb6 	bl	8001574 <_init>
 8000a08:	1b64      	subs	r4, r4, r5
 8000a0a:	10a4      	asrs	r4, r4, #2
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	42a6      	cmp	r6, r4
 8000a10:	d105      	bne.n	8000a1e <__libc_init_array+0x2e>
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a18:	4798      	blx	r3
 8000a1a:	3601      	adds	r6, #1
 8000a1c:	e7ee      	b.n	80009fc <__libc_init_array+0xc>
 8000a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a22:	4798      	blx	r3
 8000a24:	3601      	adds	r6, #1
 8000a26:	e7f2      	b.n	8000a0e <__libc_init_array+0x1e>
 8000a28:	080015e0 	.word	0x080015e0
 8000a2c:	080015e0 	.word	0x080015e0
 8000a30:	080015e0 	.word	0x080015e0
 8000a34:	080015e4 	.word	0x080015e4

08000a38 <__retarget_lock_init_recursive>:
 8000a38:	4770      	bx	lr

08000a3a <__retarget_lock_acquire_recursive>:
 8000a3a:	4770      	bx	lr

08000a3c <__retarget_lock_release_recursive>:
 8000a3c:	4770      	bx	lr
	...

08000a40 <_free_r>:
 8000a40:	b538      	push	{r3, r4, r5, lr}
 8000a42:	4605      	mov	r5, r0
 8000a44:	2900      	cmp	r1, #0
 8000a46:	d041      	beq.n	8000acc <_free_r+0x8c>
 8000a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a4c:	1f0c      	subs	r4, r1, #4
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bfb8      	it	lt
 8000a52:	18e4      	addlt	r4, r4, r3
 8000a54:	f000 f8e0 	bl	8000c18 <__malloc_lock>
 8000a58:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad0 <_free_r+0x90>)
 8000a5a:	6813      	ldr	r3, [r2, #0]
 8000a5c:	b933      	cbnz	r3, 8000a6c <_free_r+0x2c>
 8000a5e:	6063      	str	r3, [r4, #4]
 8000a60:	6014      	str	r4, [r2, #0]
 8000a62:	4628      	mov	r0, r5
 8000a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a68:	f000 b8dc 	b.w	8000c24 <__malloc_unlock>
 8000a6c:	42a3      	cmp	r3, r4
 8000a6e:	d908      	bls.n	8000a82 <_free_r+0x42>
 8000a70:	6820      	ldr	r0, [r4, #0]
 8000a72:	1821      	adds	r1, r4, r0
 8000a74:	428b      	cmp	r3, r1
 8000a76:	bf01      	itttt	eq
 8000a78:	6819      	ldreq	r1, [r3, #0]
 8000a7a:	685b      	ldreq	r3, [r3, #4]
 8000a7c:	1809      	addeq	r1, r1, r0
 8000a7e:	6021      	streq	r1, [r4, #0]
 8000a80:	e7ed      	b.n	8000a5e <_free_r+0x1e>
 8000a82:	461a      	mov	r2, r3
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	b10b      	cbz	r3, 8000a8c <_free_r+0x4c>
 8000a88:	42a3      	cmp	r3, r4
 8000a8a:	d9fa      	bls.n	8000a82 <_free_r+0x42>
 8000a8c:	6811      	ldr	r1, [r2, #0]
 8000a8e:	1850      	adds	r0, r2, r1
 8000a90:	42a0      	cmp	r0, r4
 8000a92:	d10b      	bne.n	8000aac <_free_r+0x6c>
 8000a94:	6820      	ldr	r0, [r4, #0]
 8000a96:	4401      	add	r1, r0
 8000a98:	1850      	adds	r0, r2, r1
 8000a9a:	4283      	cmp	r3, r0
 8000a9c:	6011      	str	r1, [r2, #0]
 8000a9e:	d1e0      	bne.n	8000a62 <_free_r+0x22>
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	6053      	str	r3, [r2, #4]
 8000aa6:	4408      	add	r0, r1
 8000aa8:	6010      	str	r0, [r2, #0]
 8000aaa:	e7da      	b.n	8000a62 <_free_r+0x22>
 8000aac:	d902      	bls.n	8000ab4 <_free_r+0x74>
 8000aae:	230c      	movs	r3, #12
 8000ab0:	602b      	str	r3, [r5, #0]
 8000ab2:	e7d6      	b.n	8000a62 <_free_r+0x22>
 8000ab4:	6820      	ldr	r0, [r4, #0]
 8000ab6:	1821      	adds	r1, r4, r0
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	bf04      	itt	eq
 8000abc:	6819      	ldreq	r1, [r3, #0]
 8000abe:	685b      	ldreq	r3, [r3, #4]
 8000ac0:	6063      	str	r3, [r4, #4]
 8000ac2:	bf04      	itt	eq
 8000ac4:	1809      	addeq	r1, r1, r0
 8000ac6:	6021      	streq	r1, [r4, #0]
 8000ac8:	6054      	str	r4, [r2, #4]
 8000aca:	e7ca      	b.n	8000a62 <_free_r+0x22>
 8000acc:	bd38      	pop	{r3, r4, r5, pc}
 8000ace:	bf00      	nop
 8000ad0:	200001d0 	.word	0x200001d0

08000ad4 <sbrk_aligned>:
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8000b14 <sbrk_aligned+0x40>)
 8000ad8:	460c      	mov	r4, r1
 8000ada:	6831      	ldr	r1, [r6, #0]
 8000adc:	4605      	mov	r5, r0
 8000ade:	b911      	cbnz	r1, 8000ae6 <sbrk_aligned+0x12>
 8000ae0:	f000 fcb4 	bl	800144c <_sbrk_r>
 8000ae4:	6030      	str	r0, [r6, #0]
 8000ae6:	4621      	mov	r1, r4
 8000ae8:	4628      	mov	r0, r5
 8000aea:	f000 fcaf 	bl	800144c <_sbrk_r>
 8000aee:	1c43      	adds	r3, r0, #1
 8000af0:	d103      	bne.n	8000afa <sbrk_aligned+0x26>
 8000af2:	f04f 34ff 	mov.w	r4, #4294967295
 8000af6:	4620      	mov	r0, r4
 8000af8:	bd70      	pop	{r4, r5, r6, pc}
 8000afa:	1cc4      	adds	r4, r0, #3
 8000afc:	f024 0403 	bic.w	r4, r4, #3
 8000b00:	42a0      	cmp	r0, r4
 8000b02:	d0f8      	beq.n	8000af6 <sbrk_aligned+0x22>
 8000b04:	1a21      	subs	r1, r4, r0
 8000b06:	4628      	mov	r0, r5
 8000b08:	f000 fca0 	bl	800144c <_sbrk_r>
 8000b0c:	3001      	adds	r0, #1
 8000b0e:	d1f2      	bne.n	8000af6 <sbrk_aligned+0x22>
 8000b10:	e7ef      	b.n	8000af2 <sbrk_aligned+0x1e>
 8000b12:	bf00      	nop
 8000b14:	200001cc 	.word	0x200001cc

08000b18 <_malloc_r>:
 8000b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b1c:	1ccd      	adds	r5, r1, #3
 8000b1e:	f025 0503 	bic.w	r5, r5, #3
 8000b22:	3508      	adds	r5, #8
 8000b24:	2d0c      	cmp	r5, #12
 8000b26:	bf38      	it	cc
 8000b28:	250c      	movcc	r5, #12
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	4606      	mov	r6, r0
 8000b2e:	db01      	blt.n	8000b34 <_malloc_r+0x1c>
 8000b30:	42a9      	cmp	r1, r5
 8000b32:	d904      	bls.n	8000b3e <_malloc_r+0x26>
 8000b34:	230c      	movs	r3, #12
 8000b36:	6033      	str	r3, [r6, #0]
 8000b38:	2000      	movs	r0, #0
 8000b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c14 <_malloc_r+0xfc>
 8000b42:	f000 f869 	bl	8000c18 <__malloc_lock>
 8000b46:	f8d8 3000 	ldr.w	r3, [r8]
 8000b4a:	461c      	mov	r4, r3
 8000b4c:	bb44      	cbnz	r4, 8000ba0 <_malloc_r+0x88>
 8000b4e:	4629      	mov	r1, r5
 8000b50:	4630      	mov	r0, r6
 8000b52:	f7ff ffbf 	bl	8000ad4 <sbrk_aligned>
 8000b56:	1c43      	adds	r3, r0, #1
 8000b58:	4604      	mov	r4, r0
 8000b5a:	d158      	bne.n	8000c0e <_malloc_r+0xf6>
 8000b5c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b60:	4627      	mov	r7, r4
 8000b62:	2f00      	cmp	r7, #0
 8000b64:	d143      	bne.n	8000bee <_malloc_r+0xd6>
 8000b66:	2c00      	cmp	r4, #0
 8000b68:	d04b      	beq.n	8000c02 <_malloc_r+0xea>
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	4630      	mov	r0, r6
 8000b70:	eb04 0903 	add.w	r9, r4, r3
 8000b74:	f000 fc6a 	bl	800144c <_sbrk_r>
 8000b78:	4581      	cmp	r9, r0
 8000b7a:	d142      	bne.n	8000c02 <_malloc_r+0xea>
 8000b7c:	6821      	ldr	r1, [r4, #0]
 8000b7e:	1a6d      	subs	r5, r5, r1
 8000b80:	4629      	mov	r1, r5
 8000b82:	4630      	mov	r0, r6
 8000b84:	f7ff ffa6 	bl	8000ad4 <sbrk_aligned>
 8000b88:	3001      	adds	r0, #1
 8000b8a:	d03a      	beq.n	8000c02 <_malloc_r+0xea>
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	442b      	add	r3, r5
 8000b90:	6023      	str	r3, [r4, #0]
 8000b92:	f8d8 3000 	ldr.w	r3, [r8]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	bb62      	cbnz	r2, 8000bf4 <_malloc_r+0xdc>
 8000b9a:	f8c8 7000 	str.w	r7, [r8]
 8000b9e:	e00f      	b.n	8000bc0 <_malloc_r+0xa8>
 8000ba0:	6822      	ldr	r2, [r4, #0]
 8000ba2:	1b52      	subs	r2, r2, r5
 8000ba4:	d420      	bmi.n	8000be8 <_malloc_r+0xd0>
 8000ba6:	2a0b      	cmp	r2, #11
 8000ba8:	d917      	bls.n	8000bda <_malloc_r+0xc2>
 8000baa:	1961      	adds	r1, r4, r5
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	6025      	str	r5, [r4, #0]
 8000bb0:	bf18      	it	ne
 8000bb2:	6059      	strne	r1, [r3, #4]
 8000bb4:	6863      	ldr	r3, [r4, #4]
 8000bb6:	bf08      	it	eq
 8000bb8:	f8c8 1000 	streq.w	r1, [r8]
 8000bbc:	5162      	str	r2, [r4, r5]
 8000bbe:	604b      	str	r3, [r1, #4]
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	f000 f82f 	bl	8000c24 <__malloc_unlock>
 8000bc6:	f104 000b 	add.w	r0, r4, #11
 8000bca:	1d23      	adds	r3, r4, #4
 8000bcc:	f020 0007 	bic.w	r0, r0, #7
 8000bd0:	1ac2      	subs	r2, r0, r3
 8000bd2:	bf1c      	itt	ne
 8000bd4:	1a1b      	subne	r3, r3, r0
 8000bd6:	50a3      	strne	r3, [r4, r2]
 8000bd8:	e7af      	b.n	8000b3a <_malloc_r+0x22>
 8000bda:	6862      	ldr	r2, [r4, #4]
 8000bdc:	42a3      	cmp	r3, r4
 8000bde:	bf0c      	ite	eq
 8000be0:	f8c8 2000 	streq.w	r2, [r8]
 8000be4:	605a      	strne	r2, [r3, #4]
 8000be6:	e7eb      	b.n	8000bc0 <_malloc_r+0xa8>
 8000be8:	4623      	mov	r3, r4
 8000bea:	6864      	ldr	r4, [r4, #4]
 8000bec:	e7ae      	b.n	8000b4c <_malloc_r+0x34>
 8000bee:	463c      	mov	r4, r7
 8000bf0:	687f      	ldr	r7, [r7, #4]
 8000bf2:	e7b6      	b.n	8000b62 <_malloc_r+0x4a>
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	42a3      	cmp	r3, r4
 8000bfa:	d1fb      	bne.n	8000bf4 <_malloc_r+0xdc>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	6053      	str	r3, [r2, #4]
 8000c00:	e7de      	b.n	8000bc0 <_malloc_r+0xa8>
 8000c02:	230c      	movs	r3, #12
 8000c04:	6033      	str	r3, [r6, #0]
 8000c06:	4630      	mov	r0, r6
 8000c08:	f000 f80c 	bl	8000c24 <__malloc_unlock>
 8000c0c:	e794      	b.n	8000b38 <_malloc_r+0x20>
 8000c0e:	6005      	str	r5, [r0, #0]
 8000c10:	e7d6      	b.n	8000bc0 <_malloc_r+0xa8>
 8000c12:	bf00      	nop
 8000c14:	200001d0 	.word	0x200001d0

08000c18 <__malloc_lock>:
 8000c18:	4801      	ldr	r0, [pc, #4]	@ (8000c20 <__malloc_lock+0x8>)
 8000c1a:	f7ff bf0e 	b.w	8000a3a <__retarget_lock_acquire_recursive>
 8000c1e:	bf00      	nop
 8000c20:	200001c8 	.word	0x200001c8

08000c24 <__malloc_unlock>:
 8000c24:	4801      	ldr	r0, [pc, #4]	@ (8000c2c <__malloc_unlock+0x8>)
 8000c26:	f7ff bf09 	b.w	8000a3c <__retarget_lock_release_recursive>
 8000c2a:	bf00      	nop
 8000c2c:	200001c8 	.word	0x200001c8

08000c30 <__sfputc_r>:
 8000c30:	6893      	ldr	r3, [r2, #8]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	b410      	push	{r4}
 8000c38:	6093      	str	r3, [r2, #8]
 8000c3a:	da08      	bge.n	8000c4e <__sfputc_r+0x1e>
 8000c3c:	6994      	ldr	r4, [r2, #24]
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	db01      	blt.n	8000c46 <__sfputc_r+0x16>
 8000c42:	290a      	cmp	r1, #10
 8000c44:	d103      	bne.n	8000c4e <__sfputc_r+0x1e>
 8000c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c4a:	f000 bb6b 	b.w	8001324 <__swbuf_r>
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	1c58      	adds	r0, r3, #1
 8000c52:	6010      	str	r0, [r2, #0]
 8000c54:	7019      	strb	r1, [r3, #0]
 8000c56:	4608      	mov	r0, r1
 8000c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <__sfputs_r>:
 8000c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c60:	4606      	mov	r6, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	4614      	mov	r4, r2
 8000c66:	18d5      	adds	r5, r2, r3
 8000c68:	42ac      	cmp	r4, r5
 8000c6a:	d101      	bne.n	8000c70 <__sfputs_r+0x12>
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	e007      	b.n	8000c80 <__sfputs_r+0x22>
 8000c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c74:	463a      	mov	r2, r7
 8000c76:	4630      	mov	r0, r6
 8000c78:	f7ff ffda 	bl	8000c30 <__sfputc_r>
 8000c7c:	1c43      	adds	r3, r0, #1
 8000c7e:	d1f3      	bne.n	8000c68 <__sfputs_r+0xa>
 8000c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c84 <_vfiprintf_r>:
 8000c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c88:	460d      	mov	r5, r1
 8000c8a:	b09d      	sub	sp, #116	@ 0x74
 8000c8c:	4614      	mov	r4, r2
 8000c8e:	4698      	mov	r8, r3
 8000c90:	4606      	mov	r6, r0
 8000c92:	b118      	cbz	r0, 8000c9c <_vfiprintf_r+0x18>
 8000c94:	6a03      	ldr	r3, [r0, #32]
 8000c96:	b90b      	cbnz	r3, 8000c9c <_vfiprintf_r+0x18>
 8000c98:	f7ff fdca 	bl	8000830 <__sinit>
 8000c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c9e:	07d9      	lsls	r1, r3, #31
 8000ca0:	d405      	bmi.n	8000cae <_vfiprintf_r+0x2a>
 8000ca2:	89ab      	ldrh	r3, [r5, #12]
 8000ca4:	059a      	lsls	r2, r3, #22
 8000ca6:	d402      	bmi.n	8000cae <_vfiprintf_r+0x2a>
 8000ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000caa:	f7ff fec6 	bl	8000a3a <__retarget_lock_acquire_recursive>
 8000cae:	89ab      	ldrh	r3, [r5, #12]
 8000cb0:	071b      	lsls	r3, r3, #28
 8000cb2:	d501      	bpl.n	8000cb8 <_vfiprintf_r+0x34>
 8000cb4:	692b      	ldr	r3, [r5, #16]
 8000cb6:	b99b      	cbnz	r3, 8000ce0 <_vfiprintf_r+0x5c>
 8000cb8:	4629      	mov	r1, r5
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f000 fb70 	bl	80013a0 <__swsetup_r>
 8000cc0:	b170      	cbz	r0, 8000ce0 <_vfiprintf_r+0x5c>
 8000cc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cc4:	07dc      	lsls	r4, r3, #31
 8000cc6:	d504      	bpl.n	8000cd2 <_vfiprintf_r+0x4e>
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	b01d      	add	sp, #116	@ 0x74
 8000cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd2:	89ab      	ldrh	r3, [r5, #12]
 8000cd4:	0598      	lsls	r0, r3, #22
 8000cd6:	d4f7      	bmi.n	8000cc8 <_vfiprintf_r+0x44>
 8000cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cda:	f7ff feaf 	bl	8000a3c <__retarget_lock_release_recursive>
 8000cde:	e7f3      	b.n	8000cc8 <_vfiprintf_r+0x44>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ce4:	2320      	movs	r3, #32
 8000ce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cee:	2330      	movs	r3, #48	@ 0x30
 8000cf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000ea0 <_vfiprintf_r+0x21c>
 8000cf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cf8:	f04f 0901 	mov.w	r9, #1
 8000cfc:	4623      	mov	r3, r4
 8000cfe:	469a      	mov	sl, r3
 8000d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d04:	b10a      	cbz	r2, 8000d0a <_vfiprintf_r+0x86>
 8000d06:	2a25      	cmp	r2, #37	@ 0x25
 8000d08:	d1f9      	bne.n	8000cfe <_vfiprintf_r+0x7a>
 8000d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8000d0e:	d00b      	beq.n	8000d28 <_vfiprintf_r+0xa4>
 8000d10:	465b      	mov	r3, fp
 8000d12:	4622      	mov	r2, r4
 8000d14:	4629      	mov	r1, r5
 8000d16:	4630      	mov	r0, r6
 8000d18:	f7ff ffa1 	bl	8000c5e <__sfputs_r>
 8000d1c:	3001      	adds	r0, #1
 8000d1e:	f000 80a7 	beq.w	8000e70 <_vfiprintf_r+0x1ec>
 8000d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d24:	445a      	add	r2, fp
 8000d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d28:	f89a 3000 	ldrb.w	r3, [sl]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 809f 	beq.w	8000e70 <_vfiprintf_r+0x1ec>
 8000d32:	2300      	movs	r3, #0
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d3c:	f10a 0a01 	add.w	sl, sl, #1
 8000d40:	9304      	str	r3, [sp, #16]
 8000d42:	9307      	str	r3, [sp, #28]
 8000d44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d48:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d4a:	4654      	mov	r4, sl
 8000d4c:	2205      	movs	r2, #5
 8000d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d52:	4853      	ldr	r0, [pc, #332]	@ (8000ea0 <_vfiprintf_r+0x21c>)
 8000d54:	f7ff fa44 	bl	80001e0 <memchr>
 8000d58:	9a04      	ldr	r2, [sp, #16]
 8000d5a:	b9d8      	cbnz	r0, 8000d94 <_vfiprintf_r+0x110>
 8000d5c:	06d1      	lsls	r1, r2, #27
 8000d5e:	bf44      	itt	mi
 8000d60:	2320      	movmi	r3, #32
 8000d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d66:	0713      	lsls	r3, r2, #28
 8000d68:	bf44      	itt	mi
 8000d6a:	232b      	movmi	r3, #43	@ 0x2b
 8000d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d70:	f89a 3000 	ldrb.w	r3, [sl]
 8000d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d76:	d015      	beq.n	8000da4 <_vfiprintf_r+0x120>
 8000d78:	9a07      	ldr	r2, [sp, #28]
 8000d7a:	4654      	mov	r4, sl
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f04f 0c0a 	mov.w	ip, #10
 8000d82:	4621      	mov	r1, r4
 8000d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d88:	3b30      	subs	r3, #48	@ 0x30
 8000d8a:	2b09      	cmp	r3, #9
 8000d8c:	d94b      	bls.n	8000e26 <_vfiprintf_r+0x1a2>
 8000d8e:	b1b0      	cbz	r0, 8000dbe <_vfiprintf_r+0x13a>
 8000d90:	9207      	str	r2, [sp, #28]
 8000d92:	e014      	b.n	8000dbe <_vfiprintf_r+0x13a>
 8000d94:	eba0 0308 	sub.w	r3, r0, r8
 8000d98:	fa09 f303 	lsl.w	r3, r9, r3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	9304      	str	r3, [sp, #16]
 8000da0:	46a2      	mov	sl, r4
 8000da2:	e7d2      	b.n	8000d4a <_vfiprintf_r+0xc6>
 8000da4:	9b03      	ldr	r3, [sp, #12]
 8000da6:	1d19      	adds	r1, r3, #4
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	9103      	str	r1, [sp, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bfbb      	ittet	lt
 8000db0:	425b      	neglt	r3, r3
 8000db2:	f042 0202 	orrlt.w	r2, r2, #2
 8000db6:	9307      	strge	r3, [sp, #28]
 8000db8:	9307      	strlt	r3, [sp, #28]
 8000dba:	bfb8      	it	lt
 8000dbc:	9204      	strlt	r2, [sp, #16]
 8000dbe:	7823      	ldrb	r3, [r4, #0]
 8000dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8000dc2:	d10a      	bne.n	8000dda <_vfiprintf_r+0x156>
 8000dc4:	7863      	ldrb	r3, [r4, #1]
 8000dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dc8:	d132      	bne.n	8000e30 <_vfiprintf_r+0x1ac>
 8000dca:	9b03      	ldr	r3, [sp, #12]
 8000dcc:	1d1a      	adds	r2, r3, #4
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	9203      	str	r2, [sp, #12]
 8000dd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000dd6:	3402      	adds	r4, #2
 8000dd8:	9305      	str	r3, [sp, #20]
 8000dda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000eb0 <_vfiprintf_r+0x22c>
 8000dde:	7821      	ldrb	r1, [r4, #0]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4650      	mov	r0, sl
 8000de4:	f7ff f9fc 	bl	80001e0 <memchr>
 8000de8:	b138      	cbz	r0, 8000dfa <_vfiprintf_r+0x176>
 8000dea:	9b04      	ldr	r3, [sp, #16]
 8000dec:	eba0 000a 	sub.w	r0, r0, sl
 8000df0:	2240      	movs	r2, #64	@ 0x40
 8000df2:	4082      	lsls	r2, r0
 8000df4:	4313      	orrs	r3, r2
 8000df6:	3401      	adds	r4, #1
 8000df8:	9304      	str	r3, [sp, #16]
 8000dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dfe:	4829      	ldr	r0, [pc, #164]	@ (8000ea4 <_vfiprintf_r+0x220>)
 8000e00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e04:	2206      	movs	r2, #6
 8000e06:	f7ff f9eb 	bl	80001e0 <memchr>
 8000e0a:	2800      	cmp	r0, #0
 8000e0c:	d03f      	beq.n	8000e8e <_vfiprintf_r+0x20a>
 8000e0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <_vfiprintf_r+0x224>)
 8000e10:	bb1b      	cbnz	r3, 8000e5a <_vfiprintf_r+0x1d6>
 8000e12:	9b03      	ldr	r3, [sp, #12]
 8000e14:	3307      	adds	r3, #7
 8000e16:	f023 0307 	bic.w	r3, r3, #7
 8000e1a:	3308      	adds	r3, #8
 8000e1c:	9303      	str	r3, [sp, #12]
 8000e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e20:	443b      	add	r3, r7
 8000e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e24:	e76a      	b.n	8000cfc <_vfiprintf_r+0x78>
 8000e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	e7a8      	b.n	8000d82 <_vfiprintf_r+0xfe>
 8000e30:	2300      	movs	r3, #0
 8000e32:	3401      	adds	r4, #1
 8000e34:	9305      	str	r3, [sp, #20]
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 0c0a 	mov.w	ip, #10
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e42:	3a30      	subs	r2, #48	@ 0x30
 8000e44:	2a09      	cmp	r2, #9
 8000e46:	d903      	bls.n	8000e50 <_vfiprintf_r+0x1cc>
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0c6      	beq.n	8000dda <_vfiprintf_r+0x156>
 8000e4c:	9105      	str	r1, [sp, #20]
 8000e4e:	e7c4      	b.n	8000dda <_vfiprintf_r+0x156>
 8000e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e54:	4604      	mov	r4, r0
 8000e56:	2301      	movs	r3, #1
 8000e58:	e7f0      	b.n	8000e3c <_vfiprintf_r+0x1b8>
 8000e5a:	ab03      	add	r3, sp, #12
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	462a      	mov	r2, r5
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <_vfiprintf_r+0x228>)
 8000e62:	a904      	add	r1, sp, #16
 8000e64:	4630      	mov	r0, r6
 8000e66:	f3af 8000 	nop.w
 8000e6a:	4607      	mov	r7, r0
 8000e6c:	1c78      	adds	r0, r7, #1
 8000e6e:	d1d6      	bne.n	8000e1e <_vfiprintf_r+0x19a>
 8000e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e72:	07d9      	lsls	r1, r3, #31
 8000e74:	d405      	bmi.n	8000e82 <_vfiprintf_r+0x1fe>
 8000e76:	89ab      	ldrh	r3, [r5, #12]
 8000e78:	059a      	lsls	r2, r3, #22
 8000e7a:	d402      	bmi.n	8000e82 <_vfiprintf_r+0x1fe>
 8000e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e7e:	f7ff fddd 	bl	8000a3c <__retarget_lock_release_recursive>
 8000e82:	89ab      	ldrh	r3, [r5, #12]
 8000e84:	065b      	lsls	r3, r3, #25
 8000e86:	f53f af1f 	bmi.w	8000cc8 <_vfiprintf_r+0x44>
 8000e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e8c:	e71e      	b.n	8000ccc <_vfiprintf_r+0x48>
 8000e8e:	ab03      	add	r3, sp, #12
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	462a      	mov	r2, r5
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <_vfiprintf_r+0x228>)
 8000e96:	a904      	add	r1, sp, #16
 8000e98:	4630      	mov	r0, r6
 8000e9a:	f000 f879 	bl	8000f90 <_printf_i>
 8000e9e:	e7e4      	b.n	8000e6a <_vfiprintf_r+0x1e6>
 8000ea0:	080015a2 	.word	0x080015a2
 8000ea4:	080015ac 	.word	0x080015ac
 8000ea8:	00000000 	.word	0x00000000
 8000eac:	08000c5f 	.word	0x08000c5f
 8000eb0:	080015a8 	.word	0x080015a8

08000eb4 <_printf_common>:
 8000eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb8:	4616      	mov	r6, r2
 8000eba:	4698      	mov	r8, r3
 8000ebc:	688a      	ldr	r2, [r1, #8]
 8000ebe:	690b      	ldr	r3, [r1, #16]
 8000ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	bfb8      	it	lt
 8000ec8:	4613      	movlt	r3, r2
 8000eca:	6033      	str	r3, [r6, #0]
 8000ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ed0:	4607      	mov	r7, r0
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	b10a      	cbz	r2, 8000eda <_printf_common+0x26>
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	6033      	str	r3, [r6, #0]
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	0699      	lsls	r1, r3, #26
 8000ede:	bf42      	ittt	mi
 8000ee0:	6833      	ldrmi	r3, [r6, #0]
 8000ee2:	3302      	addmi	r3, #2
 8000ee4:	6033      	strmi	r3, [r6, #0]
 8000ee6:	6825      	ldr	r5, [r4, #0]
 8000ee8:	f015 0506 	ands.w	r5, r5, #6
 8000eec:	d106      	bne.n	8000efc <_printf_common+0x48>
 8000eee:	f104 0a19 	add.w	sl, r4, #25
 8000ef2:	68e3      	ldr	r3, [r4, #12]
 8000ef4:	6832      	ldr	r2, [r6, #0]
 8000ef6:	1a9b      	subs	r3, r3, r2
 8000ef8:	42ab      	cmp	r3, r5
 8000efa:	dc26      	bgt.n	8000f4a <_printf_common+0x96>
 8000efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	3b00      	subs	r3, #0
 8000f04:	bf18      	it	ne
 8000f06:	2301      	movne	r3, #1
 8000f08:	0692      	lsls	r2, r2, #26
 8000f0a:	d42b      	bmi.n	8000f64 <_printf_common+0xb0>
 8000f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f10:	4641      	mov	r1, r8
 8000f12:	4638      	mov	r0, r7
 8000f14:	47c8      	blx	r9
 8000f16:	3001      	adds	r0, #1
 8000f18:	d01e      	beq.n	8000f58 <_printf_common+0xa4>
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	6922      	ldr	r2, [r4, #16]
 8000f1e:	f003 0306 	and.w	r3, r3, #6
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf02      	ittt	eq
 8000f26:	68e5      	ldreq	r5, [r4, #12]
 8000f28:	6833      	ldreq	r3, [r6, #0]
 8000f2a:	1aed      	subeq	r5, r5, r3
 8000f2c:	68a3      	ldr	r3, [r4, #8]
 8000f2e:	bf0c      	ite	eq
 8000f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f34:	2500      	movne	r5, #0
 8000f36:	4293      	cmp	r3, r2
 8000f38:	bfc4      	itt	gt
 8000f3a:	1a9b      	subgt	r3, r3, r2
 8000f3c:	18ed      	addgt	r5, r5, r3
 8000f3e:	2600      	movs	r6, #0
 8000f40:	341a      	adds	r4, #26
 8000f42:	42b5      	cmp	r5, r6
 8000f44:	d11a      	bne.n	8000f7c <_printf_common+0xc8>
 8000f46:	2000      	movs	r0, #0
 8000f48:	e008      	b.n	8000f5c <_printf_common+0xa8>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	4652      	mov	r2, sl
 8000f4e:	4641      	mov	r1, r8
 8000f50:	4638      	mov	r0, r7
 8000f52:	47c8      	blx	r9
 8000f54:	3001      	adds	r0, #1
 8000f56:	d103      	bne.n	8000f60 <_printf_common+0xac>
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f60:	3501      	adds	r5, #1
 8000f62:	e7c6      	b.n	8000ef2 <_printf_common+0x3e>
 8000f64:	18e1      	adds	r1, r4, r3
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	2030      	movs	r0, #48	@ 0x30
 8000f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f6e:	4422      	add	r2, r4
 8000f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f78:	3302      	adds	r3, #2
 8000f7a:	e7c7      	b.n	8000f0c <_printf_common+0x58>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	4622      	mov	r2, r4
 8000f80:	4641      	mov	r1, r8
 8000f82:	4638      	mov	r0, r7
 8000f84:	47c8      	blx	r9
 8000f86:	3001      	adds	r0, #1
 8000f88:	d0e6      	beq.n	8000f58 <_printf_common+0xa4>
 8000f8a:	3601      	adds	r6, #1
 8000f8c:	e7d9      	b.n	8000f42 <_printf_common+0x8e>
	...

08000f90 <_printf_i>:
 8000f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	7e0f      	ldrb	r7, [r1, #24]
 8000f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f98:	2f78      	cmp	r7, #120	@ 0x78
 8000f9a:	4691      	mov	r9, r2
 8000f9c:	4680      	mov	r8, r0
 8000f9e:	460c      	mov	r4, r1
 8000fa0:	469a      	mov	sl, r3
 8000fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000fa6:	d807      	bhi.n	8000fb8 <_printf_i+0x28>
 8000fa8:	2f62      	cmp	r7, #98	@ 0x62
 8000faa:	d80a      	bhi.n	8000fc2 <_printf_i+0x32>
 8000fac:	2f00      	cmp	r7, #0
 8000fae:	f000 80d1 	beq.w	8001154 <_printf_i+0x1c4>
 8000fb2:	2f58      	cmp	r7, #88	@ 0x58
 8000fb4:	f000 80b8 	beq.w	8001128 <_printf_i+0x198>
 8000fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000fc0:	e03a      	b.n	8001038 <_printf_i+0xa8>
 8000fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000fc6:	2b15      	cmp	r3, #21
 8000fc8:	d8f6      	bhi.n	8000fb8 <_printf_i+0x28>
 8000fca:	a101      	add	r1, pc, #4	@ (adr r1, 8000fd0 <_printf_i+0x40>)
 8000fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fd0:	08001029 	.word	0x08001029
 8000fd4:	0800103d 	.word	0x0800103d
 8000fd8:	08000fb9 	.word	0x08000fb9
 8000fdc:	08000fb9 	.word	0x08000fb9
 8000fe0:	08000fb9 	.word	0x08000fb9
 8000fe4:	08000fb9 	.word	0x08000fb9
 8000fe8:	0800103d 	.word	0x0800103d
 8000fec:	08000fb9 	.word	0x08000fb9
 8000ff0:	08000fb9 	.word	0x08000fb9
 8000ff4:	08000fb9 	.word	0x08000fb9
 8000ff8:	08000fb9 	.word	0x08000fb9
 8000ffc:	0800113b 	.word	0x0800113b
 8001000:	08001067 	.word	0x08001067
 8001004:	080010f5 	.word	0x080010f5
 8001008:	08000fb9 	.word	0x08000fb9
 800100c:	08000fb9 	.word	0x08000fb9
 8001010:	0800115d 	.word	0x0800115d
 8001014:	08000fb9 	.word	0x08000fb9
 8001018:	08001067 	.word	0x08001067
 800101c:	08000fb9 	.word	0x08000fb9
 8001020:	08000fb9 	.word	0x08000fb9
 8001024:	080010fd 	.word	0x080010fd
 8001028:	6833      	ldr	r3, [r6, #0]
 800102a:	1d1a      	adds	r2, r3, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6032      	str	r2, [r6, #0]
 8001030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001038:	2301      	movs	r3, #1
 800103a:	e09c      	b.n	8001176 <_printf_i+0x1e6>
 800103c:	6833      	ldr	r3, [r6, #0]
 800103e:	6820      	ldr	r0, [r4, #0]
 8001040:	1d19      	adds	r1, r3, #4
 8001042:	6031      	str	r1, [r6, #0]
 8001044:	0606      	lsls	r6, r0, #24
 8001046:	d501      	bpl.n	800104c <_printf_i+0xbc>
 8001048:	681d      	ldr	r5, [r3, #0]
 800104a:	e003      	b.n	8001054 <_printf_i+0xc4>
 800104c:	0645      	lsls	r5, r0, #25
 800104e:	d5fb      	bpl.n	8001048 <_printf_i+0xb8>
 8001050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001054:	2d00      	cmp	r5, #0
 8001056:	da03      	bge.n	8001060 <_printf_i+0xd0>
 8001058:	232d      	movs	r3, #45	@ 0x2d
 800105a:	426d      	negs	r5, r5
 800105c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001060:	4858      	ldr	r0, [pc, #352]	@ (80011c4 <_printf_i+0x234>)
 8001062:	230a      	movs	r3, #10
 8001064:	e011      	b.n	800108a <_printf_i+0xfa>
 8001066:	6821      	ldr	r1, [r4, #0]
 8001068:	6833      	ldr	r3, [r6, #0]
 800106a:	0608      	lsls	r0, r1, #24
 800106c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001070:	d402      	bmi.n	8001078 <_printf_i+0xe8>
 8001072:	0649      	lsls	r1, r1, #25
 8001074:	bf48      	it	mi
 8001076:	b2ad      	uxthmi	r5, r5
 8001078:	2f6f      	cmp	r7, #111	@ 0x6f
 800107a:	4852      	ldr	r0, [pc, #328]	@ (80011c4 <_printf_i+0x234>)
 800107c:	6033      	str	r3, [r6, #0]
 800107e:	bf14      	ite	ne
 8001080:	230a      	movne	r3, #10
 8001082:	2308      	moveq	r3, #8
 8001084:	2100      	movs	r1, #0
 8001086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800108a:	6866      	ldr	r6, [r4, #4]
 800108c:	60a6      	str	r6, [r4, #8]
 800108e:	2e00      	cmp	r6, #0
 8001090:	db05      	blt.n	800109e <_printf_i+0x10e>
 8001092:	6821      	ldr	r1, [r4, #0]
 8001094:	432e      	orrs	r6, r5
 8001096:	f021 0104 	bic.w	r1, r1, #4
 800109a:	6021      	str	r1, [r4, #0]
 800109c:	d04b      	beq.n	8001136 <_printf_i+0x1a6>
 800109e:	4616      	mov	r6, r2
 80010a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80010a4:	fb03 5711 	mls	r7, r3, r1, r5
 80010a8:	5dc7      	ldrb	r7, [r0, r7]
 80010aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80010ae:	462f      	mov	r7, r5
 80010b0:	42bb      	cmp	r3, r7
 80010b2:	460d      	mov	r5, r1
 80010b4:	d9f4      	bls.n	80010a0 <_printf_i+0x110>
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d10b      	bne.n	80010d2 <_printf_i+0x142>
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	07df      	lsls	r7, r3, #31
 80010be:	d508      	bpl.n	80010d2 <_printf_i+0x142>
 80010c0:	6923      	ldr	r3, [r4, #16]
 80010c2:	6861      	ldr	r1, [r4, #4]
 80010c4:	4299      	cmp	r1, r3
 80010c6:	bfde      	ittt	le
 80010c8:	2330      	movle	r3, #48	@ 0x30
 80010ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80010d2:	1b92      	subs	r2, r2, r6
 80010d4:	6122      	str	r2, [r4, #16]
 80010d6:	f8cd a000 	str.w	sl, [sp]
 80010da:	464b      	mov	r3, r9
 80010dc:	aa03      	add	r2, sp, #12
 80010de:	4621      	mov	r1, r4
 80010e0:	4640      	mov	r0, r8
 80010e2:	f7ff fee7 	bl	8000eb4 <_printf_common>
 80010e6:	3001      	adds	r0, #1
 80010e8:	d14a      	bne.n	8001180 <_printf_i+0x1f0>
 80010ea:	f04f 30ff 	mov.w	r0, #4294967295
 80010ee:	b004      	add	sp, #16
 80010f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	f043 0320 	orr.w	r3, r3, #32
 80010fa:	6023      	str	r3, [r4, #0]
 80010fc:	4832      	ldr	r0, [pc, #200]	@ (80011c8 <_printf_i+0x238>)
 80010fe:	2778      	movs	r7, #120	@ 0x78
 8001100:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	6831      	ldr	r1, [r6, #0]
 8001108:	061f      	lsls	r7, r3, #24
 800110a:	f851 5b04 	ldr.w	r5, [r1], #4
 800110e:	d402      	bmi.n	8001116 <_printf_i+0x186>
 8001110:	065f      	lsls	r7, r3, #25
 8001112:	bf48      	it	mi
 8001114:	b2ad      	uxthmi	r5, r5
 8001116:	6031      	str	r1, [r6, #0]
 8001118:	07d9      	lsls	r1, r3, #31
 800111a:	bf44      	itt	mi
 800111c:	f043 0320 	orrmi.w	r3, r3, #32
 8001120:	6023      	strmi	r3, [r4, #0]
 8001122:	b11d      	cbz	r5, 800112c <_printf_i+0x19c>
 8001124:	2310      	movs	r3, #16
 8001126:	e7ad      	b.n	8001084 <_printf_i+0xf4>
 8001128:	4826      	ldr	r0, [pc, #152]	@ (80011c4 <_printf_i+0x234>)
 800112a:	e7e9      	b.n	8001100 <_printf_i+0x170>
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	f023 0320 	bic.w	r3, r3, #32
 8001132:	6023      	str	r3, [r4, #0]
 8001134:	e7f6      	b.n	8001124 <_printf_i+0x194>
 8001136:	4616      	mov	r6, r2
 8001138:	e7bd      	b.n	80010b6 <_printf_i+0x126>
 800113a:	6833      	ldr	r3, [r6, #0]
 800113c:	6825      	ldr	r5, [r4, #0]
 800113e:	6961      	ldr	r1, [r4, #20]
 8001140:	1d18      	adds	r0, r3, #4
 8001142:	6030      	str	r0, [r6, #0]
 8001144:	062e      	lsls	r6, r5, #24
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	d501      	bpl.n	800114e <_printf_i+0x1be>
 800114a:	6019      	str	r1, [r3, #0]
 800114c:	e002      	b.n	8001154 <_printf_i+0x1c4>
 800114e:	0668      	lsls	r0, r5, #25
 8001150:	d5fb      	bpl.n	800114a <_printf_i+0x1ba>
 8001152:	8019      	strh	r1, [r3, #0]
 8001154:	2300      	movs	r3, #0
 8001156:	6123      	str	r3, [r4, #16]
 8001158:	4616      	mov	r6, r2
 800115a:	e7bc      	b.n	80010d6 <_printf_i+0x146>
 800115c:	6833      	ldr	r3, [r6, #0]
 800115e:	1d1a      	adds	r2, r3, #4
 8001160:	6032      	str	r2, [r6, #0]
 8001162:	681e      	ldr	r6, [r3, #0]
 8001164:	6862      	ldr	r2, [r4, #4]
 8001166:	2100      	movs	r1, #0
 8001168:	4630      	mov	r0, r6
 800116a:	f7ff f839 	bl	80001e0 <memchr>
 800116e:	b108      	cbz	r0, 8001174 <_printf_i+0x1e4>
 8001170:	1b80      	subs	r0, r0, r6
 8001172:	6060      	str	r0, [r4, #4]
 8001174:	6863      	ldr	r3, [r4, #4]
 8001176:	6123      	str	r3, [r4, #16]
 8001178:	2300      	movs	r3, #0
 800117a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800117e:	e7aa      	b.n	80010d6 <_printf_i+0x146>
 8001180:	6923      	ldr	r3, [r4, #16]
 8001182:	4632      	mov	r2, r6
 8001184:	4649      	mov	r1, r9
 8001186:	4640      	mov	r0, r8
 8001188:	47d0      	blx	sl
 800118a:	3001      	adds	r0, #1
 800118c:	d0ad      	beq.n	80010ea <_printf_i+0x15a>
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	079b      	lsls	r3, r3, #30
 8001192:	d413      	bmi.n	80011bc <_printf_i+0x22c>
 8001194:	68e0      	ldr	r0, [r4, #12]
 8001196:	9b03      	ldr	r3, [sp, #12]
 8001198:	4298      	cmp	r0, r3
 800119a:	bfb8      	it	lt
 800119c:	4618      	movlt	r0, r3
 800119e:	e7a6      	b.n	80010ee <_printf_i+0x15e>
 80011a0:	2301      	movs	r3, #1
 80011a2:	4632      	mov	r2, r6
 80011a4:	4649      	mov	r1, r9
 80011a6:	4640      	mov	r0, r8
 80011a8:	47d0      	blx	sl
 80011aa:	3001      	adds	r0, #1
 80011ac:	d09d      	beq.n	80010ea <_printf_i+0x15a>
 80011ae:	3501      	adds	r5, #1
 80011b0:	68e3      	ldr	r3, [r4, #12]
 80011b2:	9903      	ldr	r1, [sp, #12]
 80011b4:	1a5b      	subs	r3, r3, r1
 80011b6:	42ab      	cmp	r3, r5
 80011b8:	dcf2      	bgt.n	80011a0 <_printf_i+0x210>
 80011ba:	e7eb      	b.n	8001194 <_printf_i+0x204>
 80011bc:	2500      	movs	r5, #0
 80011be:	f104 0619 	add.w	r6, r4, #25
 80011c2:	e7f5      	b.n	80011b0 <_printf_i+0x220>
 80011c4:	080015b3 	.word	0x080015b3
 80011c8:	080015c4 	.word	0x080015c4

080011cc <__sflush_r>:
 80011cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d4:	0716      	lsls	r6, r2, #28
 80011d6:	4605      	mov	r5, r0
 80011d8:	460c      	mov	r4, r1
 80011da:	d454      	bmi.n	8001286 <__sflush_r+0xba>
 80011dc:	684b      	ldr	r3, [r1, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dc02      	bgt.n	80011e8 <__sflush_r+0x1c>
 80011e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dd48      	ble.n	800127a <__sflush_r+0xae>
 80011e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011ea:	2e00      	cmp	r6, #0
 80011ec:	d045      	beq.n	800127a <__sflush_r+0xae>
 80011ee:	2300      	movs	r3, #0
 80011f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011f4:	682f      	ldr	r7, [r5, #0]
 80011f6:	6a21      	ldr	r1, [r4, #32]
 80011f8:	602b      	str	r3, [r5, #0]
 80011fa:	d030      	beq.n	800125e <__sflush_r+0x92>
 80011fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011fe:	89a3      	ldrh	r3, [r4, #12]
 8001200:	0759      	lsls	r1, r3, #29
 8001202:	d505      	bpl.n	8001210 <__sflush_r+0x44>
 8001204:	6863      	ldr	r3, [r4, #4]
 8001206:	1ad2      	subs	r2, r2, r3
 8001208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800120a:	b10b      	cbz	r3, 8001210 <__sflush_r+0x44>
 800120c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800120e:	1ad2      	subs	r2, r2, r3
 8001210:	2300      	movs	r3, #0
 8001212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001214:	6a21      	ldr	r1, [r4, #32]
 8001216:	4628      	mov	r0, r5
 8001218:	47b0      	blx	r6
 800121a:	1c43      	adds	r3, r0, #1
 800121c:	89a3      	ldrh	r3, [r4, #12]
 800121e:	d106      	bne.n	800122e <__sflush_r+0x62>
 8001220:	6829      	ldr	r1, [r5, #0]
 8001222:	291d      	cmp	r1, #29
 8001224:	d82b      	bhi.n	800127e <__sflush_r+0xb2>
 8001226:	4a2a      	ldr	r2, [pc, #168]	@ (80012d0 <__sflush_r+0x104>)
 8001228:	40ca      	lsrs	r2, r1
 800122a:	07d6      	lsls	r6, r2, #31
 800122c:	d527      	bpl.n	800127e <__sflush_r+0xb2>
 800122e:	2200      	movs	r2, #0
 8001230:	6062      	str	r2, [r4, #4]
 8001232:	04d9      	lsls	r1, r3, #19
 8001234:	6922      	ldr	r2, [r4, #16]
 8001236:	6022      	str	r2, [r4, #0]
 8001238:	d504      	bpl.n	8001244 <__sflush_r+0x78>
 800123a:	1c42      	adds	r2, r0, #1
 800123c:	d101      	bne.n	8001242 <__sflush_r+0x76>
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	b903      	cbnz	r3, 8001244 <__sflush_r+0x78>
 8001242:	6560      	str	r0, [r4, #84]	@ 0x54
 8001244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001246:	602f      	str	r7, [r5, #0]
 8001248:	b1b9      	cbz	r1, 800127a <__sflush_r+0xae>
 800124a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800124e:	4299      	cmp	r1, r3
 8001250:	d002      	beq.n	8001258 <__sflush_r+0x8c>
 8001252:	4628      	mov	r0, r5
 8001254:	f7ff fbf4 	bl	8000a40 <_free_r>
 8001258:	2300      	movs	r3, #0
 800125a:	6363      	str	r3, [r4, #52]	@ 0x34
 800125c:	e00d      	b.n	800127a <__sflush_r+0xae>
 800125e:	2301      	movs	r3, #1
 8001260:	4628      	mov	r0, r5
 8001262:	47b0      	blx	r6
 8001264:	4602      	mov	r2, r0
 8001266:	1c50      	adds	r0, r2, #1
 8001268:	d1c9      	bne.n	80011fe <__sflush_r+0x32>
 800126a:	682b      	ldr	r3, [r5, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0c6      	beq.n	80011fe <__sflush_r+0x32>
 8001270:	2b1d      	cmp	r3, #29
 8001272:	d001      	beq.n	8001278 <__sflush_r+0xac>
 8001274:	2b16      	cmp	r3, #22
 8001276:	d11e      	bne.n	80012b6 <__sflush_r+0xea>
 8001278:	602f      	str	r7, [r5, #0]
 800127a:	2000      	movs	r0, #0
 800127c:	e022      	b.n	80012c4 <__sflush_r+0xf8>
 800127e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001282:	b21b      	sxth	r3, r3
 8001284:	e01b      	b.n	80012be <__sflush_r+0xf2>
 8001286:	690f      	ldr	r7, [r1, #16]
 8001288:	2f00      	cmp	r7, #0
 800128a:	d0f6      	beq.n	800127a <__sflush_r+0xae>
 800128c:	0793      	lsls	r3, r2, #30
 800128e:	680e      	ldr	r6, [r1, #0]
 8001290:	bf08      	it	eq
 8001292:	694b      	ldreq	r3, [r1, #20]
 8001294:	600f      	str	r7, [r1, #0]
 8001296:	bf18      	it	ne
 8001298:	2300      	movne	r3, #0
 800129a:	eba6 0807 	sub.w	r8, r6, r7
 800129e:	608b      	str	r3, [r1, #8]
 80012a0:	f1b8 0f00 	cmp.w	r8, #0
 80012a4:	dde9      	ble.n	800127a <__sflush_r+0xae>
 80012a6:	6a21      	ldr	r1, [r4, #32]
 80012a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80012aa:	4643      	mov	r3, r8
 80012ac:	463a      	mov	r2, r7
 80012ae:	4628      	mov	r0, r5
 80012b0:	47b0      	blx	r6
 80012b2:	2800      	cmp	r0, #0
 80012b4:	dc08      	bgt.n	80012c8 <__sflush_r+0xfc>
 80012b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012be:	81a3      	strh	r3, [r4, #12]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012c8:	4407      	add	r7, r0
 80012ca:	eba8 0800 	sub.w	r8, r8, r0
 80012ce:	e7e7      	b.n	80012a0 <__sflush_r+0xd4>
 80012d0:	20400001 	.word	0x20400001

080012d4 <_fflush_r>:
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	690b      	ldr	r3, [r1, #16]
 80012d8:	4605      	mov	r5, r0
 80012da:	460c      	mov	r4, r1
 80012dc:	b913      	cbnz	r3, 80012e4 <_fflush_r+0x10>
 80012de:	2500      	movs	r5, #0
 80012e0:	4628      	mov	r0, r5
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
 80012e4:	b118      	cbz	r0, 80012ee <_fflush_r+0x1a>
 80012e6:	6a03      	ldr	r3, [r0, #32]
 80012e8:	b90b      	cbnz	r3, 80012ee <_fflush_r+0x1a>
 80012ea:	f7ff faa1 	bl	8000830 <__sinit>
 80012ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f3      	beq.n	80012de <_fflush_r+0xa>
 80012f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012f8:	07d0      	lsls	r0, r2, #31
 80012fa:	d404      	bmi.n	8001306 <_fflush_r+0x32>
 80012fc:	0599      	lsls	r1, r3, #22
 80012fe:	d402      	bmi.n	8001306 <_fflush_r+0x32>
 8001300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001302:	f7ff fb9a 	bl	8000a3a <__retarget_lock_acquire_recursive>
 8001306:	4628      	mov	r0, r5
 8001308:	4621      	mov	r1, r4
 800130a:	f7ff ff5f 	bl	80011cc <__sflush_r>
 800130e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001310:	07da      	lsls	r2, r3, #31
 8001312:	4605      	mov	r5, r0
 8001314:	d4e4      	bmi.n	80012e0 <_fflush_r+0xc>
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	059b      	lsls	r3, r3, #22
 800131a:	d4e1      	bmi.n	80012e0 <_fflush_r+0xc>
 800131c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800131e:	f7ff fb8d 	bl	8000a3c <__retarget_lock_release_recursive>
 8001322:	e7dd      	b.n	80012e0 <_fflush_r+0xc>

08001324 <__swbuf_r>:
 8001324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001326:	460e      	mov	r6, r1
 8001328:	4614      	mov	r4, r2
 800132a:	4605      	mov	r5, r0
 800132c:	b118      	cbz	r0, 8001336 <__swbuf_r+0x12>
 800132e:	6a03      	ldr	r3, [r0, #32]
 8001330:	b90b      	cbnz	r3, 8001336 <__swbuf_r+0x12>
 8001332:	f7ff fa7d 	bl	8000830 <__sinit>
 8001336:	69a3      	ldr	r3, [r4, #24]
 8001338:	60a3      	str	r3, [r4, #8]
 800133a:	89a3      	ldrh	r3, [r4, #12]
 800133c:	071a      	lsls	r2, r3, #28
 800133e:	d501      	bpl.n	8001344 <__swbuf_r+0x20>
 8001340:	6923      	ldr	r3, [r4, #16]
 8001342:	b943      	cbnz	r3, 8001356 <__swbuf_r+0x32>
 8001344:	4621      	mov	r1, r4
 8001346:	4628      	mov	r0, r5
 8001348:	f000 f82a 	bl	80013a0 <__swsetup_r>
 800134c:	b118      	cbz	r0, 8001356 <__swbuf_r+0x32>
 800134e:	f04f 37ff 	mov.w	r7, #4294967295
 8001352:	4638      	mov	r0, r7
 8001354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	6922      	ldr	r2, [r4, #16]
 800135a:	1a98      	subs	r0, r3, r2
 800135c:	6963      	ldr	r3, [r4, #20]
 800135e:	b2f6      	uxtb	r6, r6
 8001360:	4283      	cmp	r3, r0
 8001362:	4637      	mov	r7, r6
 8001364:	dc05      	bgt.n	8001372 <__swbuf_r+0x4e>
 8001366:	4621      	mov	r1, r4
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff ffb3 	bl	80012d4 <_fflush_r>
 800136e:	2800      	cmp	r0, #0
 8001370:	d1ed      	bne.n	800134e <__swbuf_r+0x2a>
 8001372:	68a3      	ldr	r3, [r4, #8]
 8001374:	3b01      	subs	r3, #1
 8001376:	60a3      	str	r3, [r4, #8]
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	6022      	str	r2, [r4, #0]
 800137e:	701e      	strb	r6, [r3, #0]
 8001380:	6962      	ldr	r2, [r4, #20]
 8001382:	1c43      	adds	r3, r0, #1
 8001384:	429a      	cmp	r2, r3
 8001386:	d004      	beq.n	8001392 <__swbuf_r+0x6e>
 8001388:	89a3      	ldrh	r3, [r4, #12]
 800138a:	07db      	lsls	r3, r3, #31
 800138c:	d5e1      	bpl.n	8001352 <__swbuf_r+0x2e>
 800138e:	2e0a      	cmp	r6, #10
 8001390:	d1df      	bne.n	8001352 <__swbuf_r+0x2e>
 8001392:	4621      	mov	r1, r4
 8001394:	4628      	mov	r0, r5
 8001396:	f7ff ff9d 	bl	80012d4 <_fflush_r>
 800139a:	2800      	cmp	r0, #0
 800139c:	d0d9      	beq.n	8001352 <__swbuf_r+0x2e>
 800139e:	e7d6      	b.n	800134e <__swbuf_r+0x2a>

080013a0 <__swsetup_r>:
 80013a0:	b538      	push	{r3, r4, r5, lr}
 80013a2:	4b29      	ldr	r3, [pc, #164]	@ (8001448 <__swsetup_r+0xa8>)
 80013a4:	4605      	mov	r5, r0
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	460c      	mov	r4, r1
 80013aa:	b118      	cbz	r0, 80013b4 <__swsetup_r+0x14>
 80013ac:	6a03      	ldr	r3, [r0, #32]
 80013ae:	b90b      	cbnz	r3, 80013b4 <__swsetup_r+0x14>
 80013b0:	f7ff fa3e 	bl	8000830 <__sinit>
 80013b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013b8:	0719      	lsls	r1, r3, #28
 80013ba:	d422      	bmi.n	8001402 <__swsetup_r+0x62>
 80013bc:	06da      	lsls	r2, r3, #27
 80013be:	d407      	bmi.n	80013d0 <__swsetup_r+0x30>
 80013c0:	2209      	movs	r2, #9
 80013c2:	602a      	str	r2, [r5, #0]
 80013c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013c8:	81a3      	strh	r3, [r4, #12]
 80013ca:	f04f 30ff 	mov.w	r0, #4294967295
 80013ce:	e033      	b.n	8001438 <__swsetup_r+0x98>
 80013d0:	0758      	lsls	r0, r3, #29
 80013d2:	d512      	bpl.n	80013fa <__swsetup_r+0x5a>
 80013d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013d6:	b141      	cbz	r1, 80013ea <__swsetup_r+0x4a>
 80013d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013dc:	4299      	cmp	r1, r3
 80013de:	d002      	beq.n	80013e6 <__swsetup_r+0x46>
 80013e0:	4628      	mov	r0, r5
 80013e2:	f7ff fb2d 	bl	8000a40 <_free_r>
 80013e6:	2300      	movs	r3, #0
 80013e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80013ea:	89a3      	ldrh	r3, [r4, #12]
 80013ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013f0:	81a3      	strh	r3, [r4, #12]
 80013f2:	2300      	movs	r3, #0
 80013f4:	6063      	str	r3, [r4, #4]
 80013f6:	6923      	ldr	r3, [r4, #16]
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	89a3      	ldrh	r3, [r4, #12]
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	81a3      	strh	r3, [r4, #12]
 8001402:	6923      	ldr	r3, [r4, #16]
 8001404:	b94b      	cbnz	r3, 800141a <__swsetup_r+0x7a>
 8001406:	89a3      	ldrh	r3, [r4, #12]
 8001408:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800140c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001410:	d003      	beq.n	800141a <__swsetup_r+0x7a>
 8001412:	4621      	mov	r1, r4
 8001414:	4628      	mov	r0, r5
 8001416:	f000 f84f 	bl	80014b8 <__smakebuf_r>
 800141a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800141e:	f013 0201 	ands.w	r2, r3, #1
 8001422:	d00a      	beq.n	800143a <__swsetup_r+0x9a>
 8001424:	2200      	movs	r2, #0
 8001426:	60a2      	str	r2, [r4, #8]
 8001428:	6962      	ldr	r2, [r4, #20]
 800142a:	4252      	negs	r2, r2
 800142c:	61a2      	str	r2, [r4, #24]
 800142e:	6922      	ldr	r2, [r4, #16]
 8001430:	b942      	cbnz	r2, 8001444 <__swsetup_r+0xa4>
 8001432:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001436:	d1c5      	bne.n	80013c4 <__swsetup_r+0x24>
 8001438:	bd38      	pop	{r3, r4, r5, pc}
 800143a:	0799      	lsls	r1, r3, #30
 800143c:	bf58      	it	pl
 800143e:	6962      	ldrpl	r2, [r4, #20]
 8001440:	60a2      	str	r2, [r4, #8]
 8001442:	e7f4      	b.n	800142e <__swsetup_r+0x8e>
 8001444:	2000      	movs	r0, #0
 8001446:	e7f7      	b.n	8001438 <__swsetup_r+0x98>
 8001448:	20000010 	.word	0x20000010

0800144c <_sbrk_r>:
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	4d06      	ldr	r5, [pc, #24]	@ (8001468 <_sbrk_r+0x1c>)
 8001450:	2300      	movs	r3, #0
 8001452:	4604      	mov	r4, r0
 8001454:	4608      	mov	r0, r1
 8001456:	602b      	str	r3, [r5, #0]
 8001458:	f7ff f81e 	bl	8000498 <_sbrk>
 800145c:	1c43      	adds	r3, r0, #1
 800145e:	d102      	bne.n	8001466 <_sbrk_r+0x1a>
 8001460:	682b      	ldr	r3, [r5, #0]
 8001462:	b103      	cbz	r3, 8001466 <_sbrk_r+0x1a>
 8001464:	6023      	str	r3, [r4, #0]
 8001466:	bd38      	pop	{r3, r4, r5, pc}
 8001468:	200001c4 	.word	0x200001c4

0800146c <__swhatbuf_r>:
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	460c      	mov	r4, r1
 8001470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001474:	2900      	cmp	r1, #0
 8001476:	b096      	sub	sp, #88	@ 0x58
 8001478:	4615      	mov	r5, r2
 800147a:	461e      	mov	r6, r3
 800147c:	da0d      	bge.n	800149a <__swhatbuf_r+0x2e>
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	bf14      	ite	ne
 800148a:	2340      	movne	r3, #64	@ 0x40
 800148c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001490:	2000      	movs	r0, #0
 8001492:	6031      	str	r1, [r6, #0]
 8001494:	602b      	str	r3, [r5, #0]
 8001496:	b016      	add	sp, #88	@ 0x58
 8001498:	bd70      	pop	{r4, r5, r6, pc}
 800149a:	466a      	mov	r2, sp
 800149c:	f000 f848 	bl	8001530 <_fstat_r>
 80014a0:	2800      	cmp	r0, #0
 80014a2:	dbec      	blt.n	800147e <__swhatbuf_r+0x12>
 80014a4:	9901      	ldr	r1, [sp, #4]
 80014a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80014aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80014ae:	4259      	negs	r1, r3
 80014b0:	4159      	adcs	r1, r3
 80014b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b6:	e7eb      	b.n	8001490 <__swhatbuf_r+0x24>

080014b8 <__smakebuf_r>:
 80014b8:	898b      	ldrh	r3, [r1, #12]
 80014ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014bc:	079d      	lsls	r5, r3, #30
 80014be:	4606      	mov	r6, r0
 80014c0:	460c      	mov	r4, r1
 80014c2:	d507      	bpl.n	80014d4 <__smakebuf_r+0x1c>
 80014c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80014c8:	6023      	str	r3, [r4, #0]
 80014ca:	6123      	str	r3, [r4, #16]
 80014cc:	2301      	movs	r3, #1
 80014ce:	6163      	str	r3, [r4, #20]
 80014d0:	b003      	add	sp, #12
 80014d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d4:	ab01      	add	r3, sp, #4
 80014d6:	466a      	mov	r2, sp
 80014d8:	f7ff ffc8 	bl	800146c <__swhatbuf_r>
 80014dc:	9f00      	ldr	r7, [sp, #0]
 80014de:	4605      	mov	r5, r0
 80014e0:	4639      	mov	r1, r7
 80014e2:	4630      	mov	r0, r6
 80014e4:	f7ff fb18 	bl	8000b18 <_malloc_r>
 80014e8:	b948      	cbnz	r0, 80014fe <__smakebuf_r+0x46>
 80014ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ee:	059a      	lsls	r2, r3, #22
 80014f0:	d4ee      	bmi.n	80014d0 <__smakebuf_r+0x18>
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	81a3      	strh	r3, [r4, #12]
 80014fc:	e7e2      	b.n	80014c4 <__smakebuf_r+0xc>
 80014fe:	89a3      	ldrh	r3, [r4, #12]
 8001500:	6020      	str	r0, [r4, #0]
 8001502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001506:	81a3      	strh	r3, [r4, #12]
 8001508:	9b01      	ldr	r3, [sp, #4]
 800150a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800150e:	b15b      	cbz	r3, 8001528 <__smakebuf_r+0x70>
 8001510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001514:	4630      	mov	r0, r6
 8001516:	f000 f81d 	bl	8001554 <_isatty_r>
 800151a:	b128      	cbz	r0, 8001528 <__smakebuf_r+0x70>
 800151c:	89a3      	ldrh	r3, [r4, #12]
 800151e:	f023 0303 	bic.w	r3, r3, #3
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	81a3      	strh	r3, [r4, #12]
 8001528:	89a3      	ldrh	r3, [r4, #12]
 800152a:	431d      	orrs	r5, r3
 800152c:	81a5      	strh	r5, [r4, #12]
 800152e:	e7cf      	b.n	80014d0 <__smakebuf_r+0x18>

08001530 <_fstat_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	4d07      	ldr	r5, [pc, #28]	@ (8001550 <_fstat_r+0x20>)
 8001534:	2300      	movs	r3, #0
 8001536:	4604      	mov	r4, r0
 8001538:	4608      	mov	r0, r1
 800153a:	4611      	mov	r1, r2
 800153c:	602b      	str	r3, [r5, #0]
 800153e:	f7fe ff83 	bl	8000448 <_fstat>
 8001542:	1c43      	adds	r3, r0, #1
 8001544:	d102      	bne.n	800154c <_fstat_r+0x1c>
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	b103      	cbz	r3, 800154c <_fstat_r+0x1c>
 800154a:	6023      	str	r3, [r4, #0]
 800154c:	bd38      	pop	{r3, r4, r5, pc}
 800154e:	bf00      	nop
 8001550:	200001c4 	.word	0x200001c4

08001554 <_isatty_r>:
 8001554:	b538      	push	{r3, r4, r5, lr}
 8001556:	4d06      	ldr	r5, [pc, #24]	@ (8001570 <_isatty_r+0x1c>)
 8001558:	2300      	movs	r3, #0
 800155a:	4604      	mov	r4, r0
 800155c:	4608      	mov	r0, r1
 800155e:	602b      	str	r3, [r5, #0]
 8001560:	f7fe ff82 	bl	8000468 <_isatty>
 8001564:	1c43      	adds	r3, r0, #1
 8001566:	d102      	bne.n	800156e <_isatty_r+0x1a>
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	b103      	cbz	r3, 800156e <_isatty_r+0x1a>
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	bd38      	pop	{r3, r4, r5, pc}
 8001570:	200001c4 	.word	0x200001c4

08001574 <_init>:
 8001574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001576:	bf00      	nop
 8001578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157a:	bc08      	pop	{r3}
 800157c:	469e      	mov	lr, r3
 800157e:	4770      	bx	lr

08001580 <_fini>:
 8001580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001582:	bf00      	nop
 8001584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001586:	bc08      	pop	{r3}
 8001588:	469e      	mov	lr, r3
 800158a:	4770      	bx	lr
