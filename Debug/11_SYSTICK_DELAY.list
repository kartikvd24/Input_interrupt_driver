
11_SYSTICK_DELAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001558  08001558  00002558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015a4  080015a4  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080015a4  080015a4  000025a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015ac  080015ac  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015ac  080015ac  000025ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015b0  080015b0  000025b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080015b4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001614  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001614  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001feb  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009b9  00000000  00000000  0000507b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f0  00000000  00000000  00005a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000209  00000000  00000000  00005d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002569  00000000  00000000  00005f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000041ec  00000000  00000000  0000849a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083baa  00000000  00000000  0000c686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00090230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010cc  00000000  00000000  00090274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00091340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001540 	.word	0x08001540

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08001540 	.word	0x08001540

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#include "systick.h"

#define GPIOAEN (1U<<0)
#define PIN5 (1U<<5)
#define LED_PIN PIN5
int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0


	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b11      	ldr	r3, [pc, #68]	@ (80002cc <main+0x4c>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a10      	ldr	r2, [pc, #64]	@ (80002cc <main+0x4c>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER |=(1U<<10);
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <main+0x50>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0e      	ldr	r2, [pc, #56]	@ (80002d0 <main+0x50>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800029c:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <main+0x50>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0b      	ldr	r2, [pc, #44]	@ (80002d0 <main+0x50>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002a6:	6013      	str	r3, [r2, #0]


	 UART2_RXTX_INIT();
 80002a8:	f000 f94a 	bl	8000540 <UART2_RXTX_INIT>
	while(1){

	printf("A second is passed!! \n \r");
 80002ac:	4809      	ldr	r0, [pc, #36]	@ (80002d4 <main+0x54>)
 80002ae:	f000 fadb 	bl	8000868 <iprintf>
	GPIOA->ODR ^= LED_PIN;
 80002b2:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <main+0x50>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a06      	ldr	r2, [pc, #24]	@ (80002d0 <main+0x50>)
 80002b8:	f083 0320 	eor.w	r3, r3, #32
 80002bc:	6153      	str	r3, [r2, #20]
	systickdelayMS(1000);
 80002be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002c2:	f000 f8ed 	bl	80004a0 <systickdelayMS>
	printf("A second is passed!! \n \r");
 80002c6:	bf00      	nop
 80002c8:	e7f0      	b.n	80002ac <main+0x2c>
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020000 	.word	0x40020000
 80002d4:	08001558 	.word	0x08001558

080002d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <NMI_Handler+0x4>

080002e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <HardFault_Handler+0x4>

080002e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <MemManage_Handler+0x4>

080002f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002f4:	bf00      	nop
 80002f6:	e7fd      	b.n	80002f4 <BusFault_Handler+0x4>

080002f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <UsageFault_Handler+0x4>

08000300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr

0800032a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800032e:	f000 f9c5 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}

08000336 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b086      	sub	sp, #24
 800033a:	af00      	add	r7, sp, #0
 800033c:	60f8      	str	r0, [r7, #12]
 800033e:	60b9      	str	r1, [r7, #8]
 8000340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
 8000346:	e00a      	b.n	800035e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000348:	f3af 8000 	nop.w
 800034c:	4601      	mov	r1, r0
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	1c5a      	adds	r2, r3, #1
 8000352:	60ba      	str	r2, [r7, #8]
 8000354:	b2ca      	uxtb	r2, r1
 8000356:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	3301      	adds	r3, #1
 800035c:	617b      	str	r3, [r7, #20]
 800035e:	697a      	ldr	r2, [r7, #20]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	429a      	cmp	r2, r3
 8000364:	dbf0      	blt.n	8000348 <_read+0x12>
  }

  return len;
 8000366:	687b      	ldr	r3, [r7, #4]
}
 8000368:	4618      	mov	r0, r3
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]
 8000380:	e009      	b.n	8000396 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	1c5a      	adds	r2, r3, #1
 8000386:	60ba      	str	r2, [r7, #8]
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f960 	bl	8000650 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	3301      	adds	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	697a      	ldr	r2, [r7, #20]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	429a      	cmp	r2, r3
 800039c:	dbf1      	blt.n	8000382 <_write+0x12>
  }
  return len;
 800039e:	687b      	ldr	r3, [r7, #4]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3718      	adds	r7, #24
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <_close>:

int _close(int file)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003d0:	605a      	str	r2, [r3, #4]
  return 0;
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <_isatty>:

int _isatty(int file)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003e8:	2301      	movs	r3, #1
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b085      	sub	sp, #20
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	60f8      	str	r0, [r7, #12]
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000402:	2300      	movs	r3, #0
}
 8000404:	4618      	mov	r0, r3
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000418:	4a14      	ldr	r2, [pc, #80]	@ (800046c <_sbrk+0x5c>)
 800041a:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <_sbrk+0x60>)
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <_sbrk+0x64>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d102      	bne.n	8000432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800042c:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <_sbrk+0x64>)
 800042e:	4a12      	ldr	r2, [pc, #72]	@ (8000478 <_sbrk+0x68>)
 8000430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000432:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <_sbrk+0x64>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	693a      	ldr	r2, [r7, #16]
 800043c:	429a      	cmp	r2, r3
 800043e:	d207      	bcs.n	8000450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000440:	f000 fab6 	bl	80009b0 <__errno>
 8000444:	4603      	mov	r3, r0
 8000446:	220c      	movs	r2, #12
 8000448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	e009      	b.n	8000464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000450:	4b08      	ldr	r3, [pc, #32]	@ (8000474 <_sbrk+0x64>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000456:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <_sbrk+0x64>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	4a05      	ldr	r2, [pc, #20]	@ (8000474 <_sbrk+0x64>)
 8000460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000462:	68fb      	ldr	r3, [r7, #12]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20018000 	.word	0x20018000
 8000470:	00000400 	.word	0x00000400
 8000474:	2000007c 	.word	0x2000007c
 8000478:	200001d0 	.word	0x200001d0

0800047c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <SystemInit+0x20>)
 8000482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000486:	4a05      	ldr	r2, [pc, #20]	@ (800049c <SystemInit+0x20>)
 8000488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800048c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <systickdelayMS>:





void systickdelayMS(int delay){
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
		SysTick->LOAD=systick_load_value;//configure the systick value with the load value in the systick timer(load the nuber of clocks per milli seconmd)
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <systickdelayMS+0x50>)
 80004aa:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80004ae:	605a      	str	r2, [r3, #4]
		//clear systick current value register
		SysTick->VAL=0;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <systickdelayMS+0x50>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
		//enable systick and select internal clock source
		SysTick->CTRL=systick_enable | CTRL_CLOCK;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <systickdelayMS+0x50>)
 80004b8:	2205      	movs	r2, #5
 80004ba:	601a      	str	r2, [r3, #0]


		for(int i=0;i<delay;i++){
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	e009      	b.n	80004d6 <systickdelayMS+0x36>
			//wait until the count flag is set
			while((SysTick->CTRL &CTRL_COUNT_FLAG )==0){}
 80004c2:	bf00      	nop
 80004c4:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <systickdelayMS+0x50>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d0f9      	beq.n	80004c4 <systickdelayMS+0x24>
		for(int i=0;i<delay;i++){
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	429a      	cmp	r2, r3
 80004dc:	dbf1      	blt.n	80004c2 <systickdelayMS+0x22>


		}

		SysTick->CTRL=0;
 80004de:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <systickdelayMS+0x50>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
}
 80004e4:	bf00      	nop
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <uart_set_baudrate>:
static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate);
int __io_putchar(int ch);



static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compute_uart_div(Perif_clk,Baudrate);
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	68b8      	ldr	r0, [r7, #8]
 8000504:	f000 f808 	bl	8000518 <compute_uart_div>
 8000508:	4603      	mov	r3, r0
 800050a:	461a      	mov	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	609a      	str	r2, [r3, #8]
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <compute_uart_div>:


static uint16_t compute_uart_div(uint32_t Perif_clk,uint32_t Baudrate){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	return ((Perif_clk +(Baudrate/2U))/Baudrate);
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	085a      	lsrs	r2, r3, #1
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	441a      	add	r2, r3
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000530:	b29b      	uxth	r3, r3

}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <UART2_RXTX_INIT>:




void UART2_RXTX_INIT(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	/*************congiure uart gpio pin*************/
	//enable clock to gpioa
	RCC->AHB1ENR|=GPIOAEN;
 8000544:	4b32      	ldr	r3, [pc, #200]	@ (8000610 <UART2_RXTX_INIT+0xd0>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000548:	4a31      	ldr	r2, [pc, #196]	@ (8000610 <UART2_RXTX_INIT+0xd0>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6313      	str	r3, [r2, #48]	@ 0x30
	//set pa2 to alternate function mode
	GPIOA->MODER|=(1U<<5);
 8000550:	4b30      	ldr	r3, [pc, #192]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a2f      	ldr	r2, [pc, #188]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<4);
 800055c:	4b2d      	ldr	r3, [pc, #180]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a2c      	ldr	r2, [pc, #176]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 8000562:	f023 0310 	bic.w	r3, r3, #16
 8000566:	6013      	str	r3, [r2, #0]
	//set pa2 alternate function type to UART_TX(AF07)
	GPIOA->AFR[0]|=(1U<<8);//for afrl low arf[0] and for afr high arf[1]
 8000568:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a29      	ldr	r2, [pc, #164]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 800056e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000572:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<9);
 8000574:	4b27      	ldr	r3, [pc, #156]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 8000576:	6a1b      	ldr	r3, [r3, #32]
 8000578:	4a26      	ldr	r2, [pc, #152]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800057e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<10);
 8000580:	4b24      	ldr	r3, [pc, #144]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 8000582:	6a1b      	ldr	r3, [r3, #32]
 8000584:	4a23      	ldr	r2, [pc, #140]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800058a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 800058c:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	4a20      	ldr	r2, [pc, #128]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 8000592:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000596:	6213      	str	r3, [r2, #32]

   //set pa3 to alternate function mode as it is rx value
	GPIOA->MODER|=(1U<<7);
 8000598:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a1d      	ldr	r2, [pc, #116]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 800059e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<6);
 80005a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 80005aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005ae:	6013      	str	r3, [r2, #0]


	GPIOA->AFR[0]|=(1U<<12);//for afrl low arf[0] and for afr high arf[1]
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 80005b2:	6a1b      	ldr	r3, [r3, #32]
 80005b4:	4a17      	ldr	r2, [pc, #92]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 80005b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<13);
 80005bc:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 80005be:	6a1b      	ldr	r3, [r3, #32]
 80005c0:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 80005c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<14);
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 80005ca:	6a1b      	ldr	r3, [r3, #32]
 80005cc:	4a11      	ldr	r2, [pc, #68]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<15);
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <UART2_RXTX_INIT+0xd4>)
 80005da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80005de:	6213      	str	r3, [r2, #32]


	/*configure uart module*/
	//enable clock  to uart2
	RCC->APB1ENR|=UART_EN;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <UART2_RXTX_INIT+0xd0>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <UART2_RXTX_INIT+0xd0>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ea:	6413      	str	r3, [r2, #64]	@ 0x40
	//configure baud rate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUD_RATE);
 80005ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f0:	4909      	ldr	r1, [pc, #36]	@ (8000618 <UART2_RXTX_INIT+0xd8>)
 80005f2:	480a      	ldr	r0, [pc, #40]	@ (800061c <UART2_RXTX_INIT+0xdc>)
 80005f4:	f7ff ff7e 	bl	80004f4 <uart_set_baudrate>
	//configure the transfer direction
	USART2->CR1 =CR1_TE|CR1_RX;
 80005f8:	4b08      	ldr	r3, [pc, #32]	@ (800061c <UART2_RXTX_INIT+0xdc>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	60da      	str	r2, [r3, #12]

	USART2->CR1|=(1U<<13);
 80005fe:	4b07      	ldr	r3, [pc, #28]	@ (800061c <UART2_RXTX_INIT+0xdc>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	4a06      	ldr	r2, [pc, #24]	@ (800061c <UART2_RXTX_INIT+0xdc>)
 8000604:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000608:	60d3      	str	r3, [r2, #12]
	//enable uart module
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40020000 	.word	0x40020000
 8000618:	00f42400 	.word	0x00f42400
 800061c:	40004400 	.word	0x40004400

08000620 <uart2_write>:
	while(!(USART2->SR & SR_RXE)){}

	//return the data
	return USART2->DR;
}
void uart2_write(int ch){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	//make sure the transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 8000628:	bf00      	nop
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <uart2_write+0x2c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f9      	beq.n	800062a <uart2_write+0xa>
	//write to transmit data register
	USART2->DR = ch & 0xff;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a04      	ldr	r2, [pc, #16]	@ (800064c <uart2_write+0x2c>)
 800063a:	b2db      	uxtb	r3, r3
 800063c:	6053      	str	r3, [r2, #4]

}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40004400 	.word	0x40004400

08000650 <__io_putchar>:
int __io_putchar(int ch){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ffe1 	bl	8000620 <uart2_write>
	return ch;
 800065e:	687b      	ldr	r3, [r7, #4]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800066c:	f7ff ff06 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	@ (80006a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	@ (80006b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000696:	f000 f991 	bl	80009bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800069a:	f7ff fdf1 	bl	8000280 <main>
  bx  lr    
 800069e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006ac:	080015b4 	.word	0x080015b4
  ldr r2, =_sbss
 80006b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006b4:	200001d0 	.word	0x200001d0

080006b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC_IRQHandler>
	...

080006bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_IncTick+0x20>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <HAL_IncTick+0x24>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <HAL_IncTick+0x24>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000080 	.word	0x20000080

080006e4 <std>:
 80006e4:	2300      	movs	r3, #0
 80006e6:	b510      	push	{r4, lr}
 80006e8:	4604      	mov	r4, r0
 80006ea:	e9c0 3300 	strd	r3, r3, [r0]
 80006ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006f2:	6083      	str	r3, [r0, #8]
 80006f4:	8181      	strh	r1, [r0, #12]
 80006f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80006f8:	81c2      	strh	r2, [r0, #14]
 80006fa:	6183      	str	r3, [r0, #24]
 80006fc:	4619      	mov	r1, r3
 80006fe:	2208      	movs	r2, #8
 8000700:	305c      	adds	r0, #92	@ 0x5c
 8000702:	f000 f906 	bl	8000912 <memset>
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <std+0x58>)
 8000708:	6263      	str	r3, [r4, #36]	@ 0x24
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <std+0x5c>)
 800070c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <std+0x60>)
 8000710:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <std+0x64>)
 8000714:	6323      	str	r3, [r4, #48]	@ 0x30
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <std+0x68>)
 8000718:	6224      	str	r4, [r4, #32]
 800071a:	429c      	cmp	r4, r3
 800071c:	d006      	beq.n	800072c <std+0x48>
 800071e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000722:	4294      	cmp	r4, r2
 8000724:	d002      	beq.n	800072c <std+0x48>
 8000726:	33d0      	adds	r3, #208	@ 0xd0
 8000728:	429c      	cmp	r4, r3
 800072a:	d105      	bne.n	8000738 <std+0x54>
 800072c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000734:	f000 b966 	b.w	8000a04 <__retarget_lock_init_recursive>
 8000738:	bd10      	pop	{r4, pc}
 800073a:	bf00      	nop
 800073c:	0800088d 	.word	0x0800088d
 8000740:	080008af 	.word	0x080008af
 8000744:	080008e7 	.word	0x080008e7
 8000748:	0800090b 	.word	0x0800090b
 800074c:	20000084 	.word	0x20000084

08000750 <stdio_exit_handler>:
 8000750:	4a02      	ldr	r2, [pc, #8]	@ (800075c <stdio_exit_handler+0xc>)
 8000752:	4903      	ldr	r1, [pc, #12]	@ (8000760 <stdio_exit_handler+0x10>)
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <stdio_exit_handler+0x14>)
 8000756:	f000 b869 	b.w	800082c <_fwalk_sglue>
 800075a:	bf00      	nop
 800075c:	20000004 	.word	0x20000004
 8000760:	080012a1 	.word	0x080012a1
 8000764:	20000014 	.word	0x20000014

08000768 <cleanup_stdio>:
 8000768:	6841      	ldr	r1, [r0, #4]
 800076a:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <cleanup_stdio+0x34>)
 800076c:	4299      	cmp	r1, r3
 800076e:	b510      	push	{r4, lr}
 8000770:	4604      	mov	r4, r0
 8000772:	d001      	beq.n	8000778 <cleanup_stdio+0x10>
 8000774:	f000 fd94 	bl	80012a0 <_fflush_r>
 8000778:	68a1      	ldr	r1, [r4, #8]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <cleanup_stdio+0x38>)
 800077c:	4299      	cmp	r1, r3
 800077e:	d002      	beq.n	8000786 <cleanup_stdio+0x1e>
 8000780:	4620      	mov	r0, r4
 8000782:	f000 fd8d 	bl	80012a0 <_fflush_r>
 8000786:	68e1      	ldr	r1, [r4, #12]
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <cleanup_stdio+0x3c>)
 800078a:	4299      	cmp	r1, r3
 800078c:	d004      	beq.n	8000798 <cleanup_stdio+0x30>
 800078e:	4620      	mov	r0, r4
 8000790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000794:	f000 bd84 	b.w	80012a0 <_fflush_r>
 8000798:	bd10      	pop	{r4, pc}
 800079a:	bf00      	nop
 800079c:	20000084 	.word	0x20000084
 80007a0:	200000ec 	.word	0x200000ec
 80007a4:	20000154 	.word	0x20000154

080007a8 <global_stdio_init.part.0>:
 80007a8:	b510      	push	{r4, lr}
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <global_stdio_init.part.0+0x30>)
 80007ac:	4c0b      	ldr	r4, [pc, #44]	@ (80007dc <global_stdio_init.part.0+0x34>)
 80007ae:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <global_stdio_init.part.0+0x38>)
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	4620      	mov	r0, r4
 80007b4:	2200      	movs	r2, #0
 80007b6:	2104      	movs	r1, #4
 80007b8:	f7ff ff94 	bl	80006e4 <std>
 80007bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007c0:	2201      	movs	r2, #1
 80007c2:	2109      	movs	r1, #9
 80007c4:	f7ff ff8e 	bl	80006e4 <std>
 80007c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007cc:	2202      	movs	r2, #2
 80007ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d2:	2112      	movs	r1, #18
 80007d4:	f7ff bf86 	b.w	80006e4 <std>
 80007d8:	200001bc 	.word	0x200001bc
 80007dc:	20000084 	.word	0x20000084
 80007e0:	08000751 	.word	0x08000751

080007e4 <__sfp_lock_acquire>:
 80007e4:	4801      	ldr	r0, [pc, #4]	@ (80007ec <__sfp_lock_acquire+0x8>)
 80007e6:	f000 b90e 	b.w	8000a06 <__retarget_lock_acquire_recursive>
 80007ea:	bf00      	nop
 80007ec:	200001c5 	.word	0x200001c5

080007f0 <__sfp_lock_release>:
 80007f0:	4801      	ldr	r0, [pc, #4]	@ (80007f8 <__sfp_lock_release+0x8>)
 80007f2:	f000 b909 	b.w	8000a08 <__retarget_lock_release_recursive>
 80007f6:	bf00      	nop
 80007f8:	200001c5 	.word	0x200001c5

080007fc <__sinit>:
 80007fc:	b510      	push	{r4, lr}
 80007fe:	4604      	mov	r4, r0
 8000800:	f7ff fff0 	bl	80007e4 <__sfp_lock_acquire>
 8000804:	6a23      	ldr	r3, [r4, #32]
 8000806:	b11b      	cbz	r3, 8000810 <__sinit+0x14>
 8000808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800080c:	f7ff bff0 	b.w	80007f0 <__sfp_lock_release>
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <__sinit+0x28>)
 8000812:	6223      	str	r3, [r4, #32]
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <__sinit+0x2c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1f5      	bne.n	8000808 <__sinit+0xc>
 800081c:	f7ff ffc4 	bl	80007a8 <global_stdio_init.part.0>
 8000820:	e7f2      	b.n	8000808 <__sinit+0xc>
 8000822:	bf00      	nop
 8000824:	08000769 	.word	0x08000769
 8000828:	200001bc 	.word	0x200001bc

0800082c <_fwalk_sglue>:
 800082c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000830:	4607      	mov	r7, r0
 8000832:	4688      	mov	r8, r1
 8000834:	4614      	mov	r4, r2
 8000836:	2600      	movs	r6, #0
 8000838:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800083c:	f1b9 0901 	subs.w	r9, r9, #1
 8000840:	d505      	bpl.n	800084e <_fwalk_sglue+0x22>
 8000842:	6824      	ldr	r4, [r4, #0]
 8000844:	2c00      	cmp	r4, #0
 8000846:	d1f7      	bne.n	8000838 <_fwalk_sglue+0xc>
 8000848:	4630      	mov	r0, r6
 800084a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800084e:	89ab      	ldrh	r3, [r5, #12]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d907      	bls.n	8000864 <_fwalk_sglue+0x38>
 8000854:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000858:	3301      	adds	r3, #1
 800085a:	d003      	beq.n	8000864 <_fwalk_sglue+0x38>
 800085c:	4629      	mov	r1, r5
 800085e:	4638      	mov	r0, r7
 8000860:	47c0      	blx	r8
 8000862:	4306      	orrs	r6, r0
 8000864:	3568      	adds	r5, #104	@ 0x68
 8000866:	e7e9      	b.n	800083c <_fwalk_sglue+0x10>

08000868 <iprintf>:
 8000868:	b40f      	push	{r0, r1, r2, r3}
 800086a:	b507      	push	{r0, r1, r2, lr}
 800086c:	4906      	ldr	r1, [pc, #24]	@ (8000888 <iprintf+0x20>)
 800086e:	ab04      	add	r3, sp, #16
 8000870:	6808      	ldr	r0, [r1, #0]
 8000872:	f853 2b04 	ldr.w	r2, [r3], #4
 8000876:	6881      	ldr	r1, [r0, #8]
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	f000 f9e9 	bl	8000c50 <_vfiprintf_r>
 800087e:	b003      	add	sp, #12
 8000880:	f85d eb04 	ldr.w	lr, [sp], #4
 8000884:	b004      	add	sp, #16
 8000886:	4770      	bx	lr
 8000888:	20000010 	.word	0x20000010

0800088c <__sread>:
 800088c:	b510      	push	{r4, lr}
 800088e:	460c      	mov	r4, r1
 8000890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000894:	f000 f868 	bl	8000968 <_read_r>
 8000898:	2800      	cmp	r0, #0
 800089a:	bfab      	itete	ge
 800089c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800089e:	89a3      	ldrhlt	r3, [r4, #12]
 80008a0:	181b      	addge	r3, r3, r0
 80008a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008a6:	bfac      	ite	ge
 80008a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008aa:	81a3      	strhlt	r3, [r4, #12]
 80008ac:	bd10      	pop	{r4, pc}

080008ae <__swrite>:
 80008ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008b2:	461f      	mov	r7, r3
 80008b4:	898b      	ldrh	r3, [r1, #12]
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	4605      	mov	r5, r0
 80008ba:	460c      	mov	r4, r1
 80008bc:	4616      	mov	r6, r2
 80008be:	d505      	bpl.n	80008cc <__swrite+0x1e>
 80008c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c4:	2302      	movs	r3, #2
 80008c6:	2200      	movs	r2, #0
 80008c8:	f000 f83c 	bl	8000944 <_lseek_r>
 80008cc:	89a3      	ldrh	r3, [r4, #12]
 80008ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008d6:	81a3      	strh	r3, [r4, #12]
 80008d8:	4632      	mov	r2, r6
 80008da:	463b      	mov	r3, r7
 80008dc:	4628      	mov	r0, r5
 80008de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008e2:	f000 b853 	b.w	800098c <_write_r>

080008e6 <__sseek>:
 80008e6:	b510      	push	{r4, lr}
 80008e8:	460c      	mov	r4, r1
 80008ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ee:	f000 f829 	bl	8000944 <_lseek_r>
 80008f2:	1c43      	adds	r3, r0, #1
 80008f4:	89a3      	ldrh	r3, [r4, #12]
 80008f6:	bf15      	itete	ne
 80008f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000902:	81a3      	strheq	r3, [r4, #12]
 8000904:	bf18      	it	ne
 8000906:	81a3      	strhne	r3, [r4, #12]
 8000908:	bd10      	pop	{r4, pc}

0800090a <__sclose>:
 800090a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800090e:	f000 b809 	b.w	8000924 <_close_r>

08000912 <memset>:
 8000912:	4402      	add	r2, r0
 8000914:	4603      	mov	r3, r0
 8000916:	4293      	cmp	r3, r2
 8000918:	d100      	bne.n	800091c <memset+0xa>
 800091a:	4770      	bx	lr
 800091c:	f803 1b01 	strb.w	r1, [r3], #1
 8000920:	e7f9      	b.n	8000916 <memset+0x4>
	...

08000924 <_close_r>:
 8000924:	b538      	push	{r3, r4, r5, lr}
 8000926:	4d06      	ldr	r5, [pc, #24]	@ (8000940 <_close_r+0x1c>)
 8000928:	2300      	movs	r3, #0
 800092a:	4604      	mov	r4, r0
 800092c:	4608      	mov	r0, r1
 800092e:	602b      	str	r3, [r5, #0]
 8000930:	f7ff fd3a 	bl	80003a8 <_close>
 8000934:	1c43      	adds	r3, r0, #1
 8000936:	d102      	bne.n	800093e <_close_r+0x1a>
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	b103      	cbz	r3, 800093e <_close_r+0x1a>
 800093c:	6023      	str	r3, [r4, #0]
 800093e:	bd38      	pop	{r3, r4, r5, pc}
 8000940:	200001c0 	.word	0x200001c0

08000944 <_lseek_r>:
 8000944:	b538      	push	{r3, r4, r5, lr}
 8000946:	4d07      	ldr	r5, [pc, #28]	@ (8000964 <_lseek_r+0x20>)
 8000948:	4604      	mov	r4, r0
 800094a:	4608      	mov	r0, r1
 800094c:	4611      	mov	r1, r2
 800094e:	2200      	movs	r2, #0
 8000950:	602a      	str	r2, [r5, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	f7ff fd4f 	bl	80003f6 <_lseek>
 8000958:	1c43      	adds	r3, r0, #1
 800095a:	d102      	bne.n	8000962 <_lseek_r+0x1e>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	b103      	cbz	r3, 8000962 <_lseek_r+0x1e>
 8000960:	6023      	str	r3, [r4, #0]
 8000962:	bd38      	pop	{r3, r4, r5, pc}
 8000964:	200001c0 	.word	0x200001c0

08000968 <_read_r>:
 8000968:	b538      	push	{r3, r4, r5, lr}
 800096a:	4d07      	ldr	r5, [pc, #28]	@ (8000988 <_read_r+0x20>)
 800096c:	4604      	mov	r4, r0
 800096e:	4608      	mov	r0, r1
 8000970:	4611      	mov	r1, r2
 8000972:	2200      	movs	r2, #0
 8000974:	602a      	str	r2, [r5, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	f7ff fcdd 	bl	8000336 <_read>
 800097c:	1c43      	adds	r3, r0, #1
 800097e:	d102      	bne.n	8000986 <_read_r+0x1e>
 8000980:	682b      	ldr	r3, [r5, #0]
 8000982:	b103      	cbz	r3, 8000986 <_read_r+0x1e>
 8000984:	6023      	str	r3, [r4, #0]
 8000986:	bd38      	pop	{r3, r4, r5, pc}
 8000988:	200001c0 	.word	0x200001c0

0800098c <_write_r>:
 800098c:	b538      	push	{r3, r4, r5, lr}
 800098e:	4d07      	ldr	r5, [pc, #28]	@ (80009ac <_write_r+0x20>)
 8000990:	4604      	mov	r4, r0
 8000992:	4608      	mov	r0, r1
 8000994:	4611      	mov	r1, r2
 8000996:	2200      	movs	r2, #0
 8000998:	602a      	str	r2, [r5, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	f7ff fce8 	bl	8000370 <_write>
 80009a0:	1c43      	adds	r3, r0, #1
 80009a2:	d102      	bne.n	80009aa <_write_r+0x1e>
 80009a4:	682b      	ldr	r3, [r5, #0]
 80009a6:	b103      	cbz	r3, 80009aa <_write_r+0x1e>
 80009a8:	6023      	str	r3, [r4, #0]
 80009aa:	bd38      	pop	{r3, r4, r5, pc}
 80009ac:	200001c0 	.word	0x200001c0

080009b0 <__errno>:
 80009b0:	4b01      	ldr	r3, [pc, #4]	@ (80009b8 <__errno+0x8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000010 	.word	0x20000010

080009bc <__libc_init_array>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	4d0d      	ldr	r5, [pc, #52]	@ (80009f4 <__libc_init_array+0x38>)
 80009c0:	4c0d      	ldr	r4, [pc, #52]	@ (80009f8 <__libc_init_array+0x3c>)
 80009c2:	1b64      	subs	r4, r4, r5
 80009c4:	10a4      	asrs	r4, r4, #2
 80009c6:	2600      	movs	r6, #0
 80009c8:	42a6      	cmp	r6, r4
 80009ca:	d109      	bne.n	80009e0 <__libc_init_array+0x24>
 80009cc:	4d0b      	ldr	r5, [pc, #44]	@ (80009fc <__libc_init_array+0x40>)
 80009ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000a00 <__libc_init_array+0x44>)
 80009d0:	f000 fdb6 	bl	8001540 <_init>
 80009d4:	1b64      	subs	r4, r4, r5
 80009d6:	10a4      	asrs	r4, r4, #2
 80009d8:	2600      	movs	r6, #0
 80009da:	42a6      	cmp	r6, r4
 80009dc:	d105      	bne.n	80009ea <__libc_init_array+0x2e>
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e4:	4798      	blx	r3
 80009e6:	3601      	adds	r6, #1
 80009e8:	e7ee      	b.n	80009c8 <__libc_init_array+0xc>
 80009ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ee:	4798      	blx	r3
 80009f0:	3601      	adds	r6, #1
 80009f2:	e7f2      	b.n	80009da <__libc_init_array+0x1e>
 80009f4:	080015ac 	.word	0x080015ac
 80009f8:	080015ac 	.word	0x080015ac
 80009fc:	080015ac 	.word	0x080015ac
 8000a00:	080015b0 	.word	0x080015b0

08000a04 <__retarget_lock_init_recursive>:
 8000a04:	4770      	bx	lr

08000a06 <__retarget_lock_acquire_recursive>:
 8000a06:	4770      	bx	lr

08000a08 <__retarget_lock_release_recursive>:
 8000a08:	4770      	bx	lr
	...

08000a0c <_free_r>:
 8000a0c:	b538      	push	{r3, r4, r5, lr}
 8000a0e:	4605      	mov	r5, r0
 8000a10:	2900      	cmp	r1, #0
 8000a12:	d041      	beq.n	8000a98 <_free_r+0x8c>
 8000a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a18:	1f0c      	subs	r4, r1, #4
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	bfb8      	it	lt
 8000a1e:	18e4      	addlt	r4, r4, r3
 8000a20:	f000 f8e0 	bl	8000be4 <__malloc_lock>
 8000a24:	4a1d      	ldr	r2, [pc, #116]	@ (8000a9c <_free_r+0x90>)
 8000a26:	6813      	ldr	r3, [r2, #0]
 8000a28:	b933      	cbnz	r3, 8000a38 <_free_r+0x2c>
 8000a2a:	6063      	str	r3, [r4, #4]
 8000a2c:	6014      	str	r4, [r2, #0]
 8000a2e:	4628      	mov	r0, r5
 8000a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a34:	f000 b8dc 	b.w	8000bf0 <__malloc_unlock>
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <_free_r+0x42>
 8000a3c:	6820      	ldr	r0, [r4, #0]
 8000a3e:	1821      	adds	r1, r4, r0
 8000a40:	428b      	cmp	r3, r1
 8000a42:	bf01      	itttt	eq
 8000a44:	6819      	ldreq	r1, [r3, #0]
 8000a46:	685b      	ldreq	r3, [r3, #4]
 8000a48:	1809      	addeq	r1, r1, r0
 8000a4a:	6021      	streq	r1, [r4, #0]
 8000a4c:	e7ed      	b.n	8000a2a <_free_r+0x1e>
 8000a4e:	461a      	mov	r2, r3
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	b10b      	cbz	r3, 8000a58 <_free_r+0x4c>
 8000a54:	42a3      	cmp	r3, r4
 8000a56:	d9fa      	bls.n	8000a4e <_free_r+0x42>
 8000a58:	6811      	ldr	r1, [r2, #0]
 8000a5a:	1850      	adds	r0, r2, r1
 8000a5c:	42a0      	cmp	r0, r4
 8000a5e:	d10b      	bne.n	8000a78 <_free_r+0x6c>
 8000a60:	6820      	ldr	r0, [r4, #0]
 8000a62:	4401      	add	r1, r0
 8000a64:	1850      	adds	r0, r2, r1
 8000a66:	4283      	cmp	r3, r0
 8000a68:	6011      	str	r1, [r2, #0]
 8000a6a:	d1e0      	bne.n	8000a2e <_free_r+0x22>
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	6053      	str	r3, [r2, #4]
 8000a72:	4408      	add	r0, r1
 8000a74:	6010      	str	r0, [r2, #0]
 8000a76:	e7da      	b.n	8000a2e <_free_r+0x22>
 8000a78:	d902      	bls.n	8000a80 <_free_r+0x74>
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	602b      	str	r3, [r5, #0]
 8000a7e:	e7d6      	b.n	8000a2e <_free_r+0x22>
 8000a80:	6820      	ldr	r0, [r4, #0]
 8000a82:	1821      	adds	r1, r4, r0
 8000a84:	428b      	cmp	r3, r1
 8000a86:	bf04      	itt	eq
 8000a88:	6819      	ldreq	r1, [r3, #0]
 8000a8a:	685b      	ldreq	r3, [r3, #4]
 8000a8c:	6063      	str	r3, [r4, #4]
 8000a8e:	bf04      	itt	eq
 8000a90:	1809      	addeq	r1, r1, r0
 8000a92:	6021      	streq	r1, [r4, #0]
 8000a94:	6054      	str	r4, [r2, #4]
 8000a96:	e7ca      	b.n	8000a2e <_free_r+0x22>
 8000a98:	bd38      	pop	{r3, r4, r5, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001cc 	.word	0x200001cc

08000aa0 <sbrk_aligned>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8000ae0 <sbrk_aligned+0x40>)
 8000aa4:	460c      	mov	r4, r1
 8000aa6:	6831      	ldr	r1, [r6, #0]
 8000aa8:	4605      	mov	r5, r0
 8000aaa:	b911      	cbnz	r1, 8000ab2 <sbrk_aligned+0x12>
 8000aac:	f000 fcb4 	bl	8001418 <_sbrk_r>
 8000ab0:	6030      	str	r0, [r6, #0]
 8000ab2:	4621      	mov	r1, r4
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	f000 fcaf 	bl	8001418 <_sbrk_r>
 8000aba:	1c43      	adds	r3, r0, #1
 8000abc:	d103      	bne.n	8000ac6 <sbrk_aligned+0x26>
 8000abe:	f04f 34ff 	mov.w	r4, #4294967295
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
 8000ac6:	1cc4      	adds	r4, r0, #3
 8000ac8:	f024 0403 	bic.w	r4, r4, #3
 8000acc:	42a0      	cmp	r0, r4
 8000ace:	d0f8      	beq.n	8000ac2 <sbrk_aligned+0x22>
 8000ad0:	1a21      	subs	r1, r4, r0
 8000ad2:	4628      	mov	r0, r5
 8000ad4:	f000 fca0 	bl	8001418 <_sbrk_r>
 8000ad8:	3001      	adds	r0, #1
 8000ada:	d1f2      	bne.n	8000ac2 <sbrk_aligned+0x22>
 8000adc:	e7ef      	b.n	8000abe <sbrk_aligned+0x1e>
 8000ade:	bf00      	nop
 8000ae0:	200001c8 	.word	0x200001c8

08000ae4 <_malloc_r>:
 8000ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ae8:	1ccd      	adds	r5, r1, #3
 8000aea:	f025 0503 	bic.w	r5, r5, #3
 8000aee:	3508      	adds	r5, #8
 8000af0:	2d0c      	cmp	r5, #12
 8000af2:	bf38      	it	cc
 8000af4:	250c      	movcc	r5, #12
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	4606      	mov	r6, r0
 8000afa:	db01      	blt.n	8000b00 <_malloc_r+0x1c>
 8000afc:	42a9      	cmp	r1, r5
 8000afe:	d904      	bls.n	8000b0a <_malloc_r+0x26>
 8000b00:	230c      	movs	r3, #12
 8000b02:	6033      	str	r3, [r6, #0]
 8000b04:	2000      	movs	r0, #0
 8000b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000be0 <_malloc_r+0xfc>
 8000b0e:	f000 f869 	bl	8000be4 <__malloc_lock>
 8000b12:	f8d8 3000 	ldr.w	r3, [r8]
 8000b16:	461c      	mov	r4, r3
 8000b18:	bb44      	cbnz	r4, 8000b6c <_malloc_r+0x88>
 8000b1a:	4629      	mov	r1, r5
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	f7ff ffbf 	bl	8000aa0 <sbrk_aligned>
 8000b22:	1c43      	adds	r3, r0, #1
 8000b24:	4604      	mov	r4, r0
 8000b26:	d158      	bne.n	8000bda <_malloc_r+0xf6>
 8000b28:	f8d8 4000 	ldr.w	r4, [r8]
 8000b2c:	4627      	mov	r7, r4
 8000b2e:	2f00      	cmp	r7, #0
 8000b30:	d143      	bne.n	8000bba <_malloc_r+0xd6>
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d04b      	beq.n	8000bce <_malloc_r+0xea>
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	4639      	mov	r1, r7
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	eb04 0903 	add.w	r9, r4, r3
 8000b40:	f000 fc6a 	bl	8001418 <_sbrk_r>
 8000b44:	4581      	cmp	r9, r0
 8000b46:	d142      	bne.n	8000bce <_malloc_r+0xea>
 8000b48:	6821      	ldr	r1, [r4, #0]
 8000b4a:	1a6d      	subs	r5, r5, r1
 8000b4c:	4629      	mov	r1, r5
 8000b4e:	4630      	mov	r0, r6
 8000b50:	f7ff ffa6 	bl	8000aa0 <sbrk_aligned>
 8000b54:	3001      	adds	r0, #1
 8000b56:	d03a      	beq.n	8000bce <_malloc_r+0xea>
 8000b58:	6823      	ldr	r3, [r4, #0]
 8000b5a:	442b      	add	r3, r5
 8000b5c:	6023      	str	r3, [r4, #0]
 8000b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	bb62      	cbnz	r2, 8000bc0 <_malloc_r+0xdc>
 8000b66:	f8c8 7000 	str.w	r7, [r8]
 8000b6a:	e00f      	b.n	8000b8c <_malloc_r+0xa8>
 8000b6c:	6822      	ldr	r2, [r4, #0]
 8000b6e:	1b52      	subs	r2, r2, r5
 8000b70:	d420      	bmi.n	8000bb4 <_malloc_r+0xd0>
 8000b72:	2a0b      	cmp	r2, #11
 8000b74:	d917      	bls.n	8000ba6 <_malloc_r+0xc2>
 8000b76:	1961      	adds	r1, r4, r5
 8000b78:	42a3      	cmp	r3, r4
 8000b7a:	6025      	str	r5, [r4, #0]
 8000b7c:	bf18      	it	ne
 8000b7e:	6059      	strne	r1, [r3, #4]
 8000b80:	6863      	ldr	r3, [r4, #4]
 8000b82:	bf08      	it	eq
 8000b84:	f8c8 1000 	streq.w	r1, [r8]
 8000b88:	5162      	str	r2, [r4, r5]
 8000b8a:	604b      	str	r3, [r1, #4]
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	f000 f82f 	bl	8000bf0 <__malloc_unlock>
 8000b92:	f104 000b 	add.w	r0, r4, #11
 8000b96:	1d23      	adds	r3, r4, #4
 8000b98:	f020 0007 	bic.w	r0, r0, #7
 8000b9c:	1ac2      	subs	r2, r0, r3
 8000b9e:	bf1c      	itt	ne
 8000ba0:	1a1b      	subne	r3, r3, r0
 8000ba2:	50a3      	strne	r3, [r4, r2]
 8000ba4:	e7af      	b.n	8000b06 <_malloc_r+0x22>
 8000ba6:	6862      	ldr	r2, [r4, #4]
 8000ba8:	42a3      	cmp	r3, r4
 8000baa:	bf0c      	ite	eq
 8000bac:	f8c8 2000 	streq.w	r2, [r8]
 8000bb0:	605a      	strne	r2, [r3, #4]
 8000bb2:	e7eb      	b.n	8000b8c <_malloc_r+0xa8>
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	6864      	ldr	r4, [r4, #4]
 8000bb8:	e7ae      	b.n	8000b18 <_malloc_r+0x34>
 8000bba:	463c      	mov	r4, r7
 8000bbc:	687f      	ldr	r7, [r7, #4]
 8000bbe:	e7b6      	b.n	8000b2e <_malloc_r+0x4a>
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	42a3      	cmp	r3, r4
 8000bc6:	d1fb      	bne.n	8000bc0 <_malloc_r+0xdc>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	6053      	str	r3, [r2, #4]
 8000bcc:	e7de      	b.n	8000b8c <_malloc_r+0xa8>
 8000bce:	230c      	movs	r3, #12
 8000bd0:	6033      	str	r3, [r6, #0]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	f000 f80c 	bl	8000bf0 <__malloc_unlock>
 8000bd8:	e794      	b.n	8000b04 <_malloc_r+0x20>
 8000bda:	6005      	str	r5, [r0, #0]
 8000bdc:	e7d6      	b.n	8000b8c <_malloc_r+0xa8>
 8000bde:	bf00      	nop
 8000be0:	200001cc 	.word	0x200001cc

08000be4 <__malloc_lock>:
 8000be4:	4801      	ldr	r0, [pc, #4]	@ (8000bec <__malloc_lock+0x8>)
 8000be6:	f7ff bf0e 	b.w	8000a06 <__retarget_lock_acquire_recursive>
 8000bea:	bf00      	nop
 8000bec:	200001c4 	.word	0x200001c4

08000bf0 <__malloc_unlock>:
 8000bf0:	4801      	ldr	r0, [pc, #4]	@ (8000bf8 <__malloc_unlock+0x8>)
 8000bf2:	f7ff bf09 	b.w	8000a08 <__retarget_lock_release_recursive>
 8000bf6:	bf00      	nop
 8000bf8:	200001c4 	.word	0x200001c4

08000bfc <__sfputc_r>:
 8000bfc:	6893      	ldr	r3, [r2, #8]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	b410      	push	{r4}
 8000c04:	6093      	str	r3, [r2, #8]
 8000c06:	da08      	bge.n	8000c1a <__sfputc_r+0x1e>
 8000c08:	6994      	ldr	r4, [r2, #24]
 8000c0a:	42a3      	cmp	r3, r4
 8000c0c:	db01      	blt.n	8000c12 <__sfputc_r+0x16>
 8000c0e:	290a      	cmp	r1, #10
 8000c10:	d103      	bne.n	8000c1a <__sfputc_r+0x1e>
 8000c12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c16:	f000 bb6b 	b.w	80012f0 <__swbuf_r>
 8000c1a:	6813      	ldr	r3, [r2, #0]
 8000c1c:	1c58      	adds	r0, r3, #1
 8000c1e:	6010      	str	r0, [r2, #0]
 8000c20:	7019      	strb	r1, [r3, #0]
 8000c22:	4608      	mov	r0, r1
 8000c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <__sfputs_r>:
 8000c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2c:	4606      	mov	r6, r0
 8000c2e:	460f      	mov	r7, r1
 8000c30:	4614      	mov	r4, r2
 8000c32:	18d5      	adds	r5, r2, r3
 8000c34:	42ac      	cmp	r4, r5
 8000c36:	d101      	bne.n	8000c3c <__sfputs_r+0x12>
 8000c38:	2000      	movs	r0, #0
 8000c3a:	e007      	b.n	8000c4c <__sfputs_r+0x22>
 8000c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c40:	463a      	mov	r2, r7
 8000c42:	4630      	mov	r0, r6
 8000c44:	f7ff ffda 	bl	8000bfc <__sfputc_r>
 8000c48:	1c43      	adds	r3, r0, #1
 8000c4a:	d1f3      	bne.n	8000c34 <__sfputs_r+0xa>
 8000c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c50 <_vfiprintf_r>:
 8000c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c54:	460d      	mov	r5, r1
 8000c56:	b09d      	sub	sp, #116	@ 0x74
 8000c58:	4614      	mov	r4, r2
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	b118      	cbz	r0, 8000c68 <_vfiprintf_r+0x18>
 8000c60:	6a03      	ldr	r3, [r0, #32]
 8000c62:	b90b      	cbnz	r3, 8000c68 <_vfiprintf_r+0x18>
 8000c64:	f7ff fdca 	bl	80007fc <__sinit>
 8000c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c6a:	07d9      	lsls	r1, r3, #31
 8000c6c:	d405      	bmi.n	8000c7a <_vfiprintf_r+0x2a>
 8000c6e:	89ab      	ldrh	r3, [r5, #12]
 8000c70:	059a      	lsls	r2, r3, #22
 8000c72:	d402      	bmi.n	8000c7a <_vfiprintf_r+0x2a>
 8000c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c76:	f7ff fec6 	bl	8000a06 <__retarget_lock_acquire_recursive>
 8000c7a:	89ab      	ldrh	r3, [r5, #12]
 8000c7c:	071b      	lsls	r3, r3, #28
 8000c7e:	d501      	bpl.n	8000c84 <_vfiprintf_r+0x34>
 8000c80:	692b      	ldr	r3, [r5, #16]
 8000c82:	b99b      	cbnz	r3, 8000cac <_vfiprintf_r+0x5c>
 8000c84:	4629      	mov	r1, r5
 8000c86:	4630      	mov	r0, r6
 8000c88:	f000 fb70 	bl	800136c <__swsetup_r>
 8000c8c:	b170      	cbz	r0, 8000cac <_vfiprintf_r+0x5c>
 8000c8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c90:	07dc      	lsls	r4, r3, #31
 8000c92:	d504      	bpl.n	8000c9e <_vfiprintf_r+0x4e>
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	b01d      	add	sp, #116	@ 0x74
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	89ab      	ldrh	r3, [r5, #12]
 8000ca0:	0598      	lsls	r0, r3, #22
 8000ca2:	d4f7      	bmi.n	8000c94 <_vfiprintf_r+0x44>
 8000ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ca6:	f7ff feaf 	bl	8000a08 <__retarget_lock_release_recursive>
 8000caa:	e7f3      	b.n	8000c94 <_vfiprintf_r+0x44>
 8000cac:	2300      	movs	r3, #0
 8000cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cba:	2330      	movs	r3, #48	@ 0x30
 8000cbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e6c <_vfiprintf_r+0x21c>
 8000cc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cc4:	f04f 0901 	mov.w	r9, #1
 8000cc8:	4623      	mov	r3, r4
 8000cca:	469a      	mov	sl, r3
 8000ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cd0:	b10a      	cbz	r2, 8000cd6 <_vfiprintf_r+0x86>
 8000cd2:	2a25      	cmp	r2, #37	@ 0x25
 8000cd4:	d1f9      	bne.n	8000cca <_vfiprintf_r+0x7a>
 8000cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8000cda:	d00b      	beq.n	8000cf4 <_vfiprintf_r+0xa4>
 8000cdc:	465b      	mov	r3, fp
 8000cde:	4622      	mov	r2, r4
 8000ce0:	4629      	mov	r1, r5
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	f7ff ffa1 	bl	8000c2a <__sfputs_r>
 8000ce8:	3001      	adds	r0, #1
 8000cea:	f000 80a7 	beq.w	8000e3c <_vfiprintf_r+0x1ec>
 8000cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000cf0:	445a      	add	r2, fp
 8000cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 809f 	beq.w	8000e3c <_vfiprintf_r+0x1ec>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d08:	f10a 0a01 	add.w	sl, sl, #1
 8000d0c:	9304      	str	r3, [sp, #16]
 8000d0e:	9307      	str	r3, [sp, #28]
 8000d10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d16:	4654      	mov	r4, sl
 8000d18:	2205      	movs	r2, #5
 8000d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d1e:	4853      	ldr	r0, [pc, #332]	@ (8000e6c <_vfiprintf_r+0x21c>)
 8000d20:	f7ff fa5e 	bl	80001e0 <memchr>
 8000d24:	9a04      	ldr	r2, [sp, #16]
 8000d26:	b9d8      	cbnz	r0, 8000d60 <_vfiprintf_r+0x110>
 8000d28:	06d1      	lsls	r1, r2, #27
 8000d2a:	bf44      	itt	mi
 8000d2c:	2320      	movmi	r3, #32
 8000d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d32:	0713      	lsls	r3, r2, #28
 8000d34:	bf44      	itt	mi
 8000d36:	232b      	movmi	r3, #43	@ 0x2b
 8000d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d42:	d015      	beq.n	8000d70 <_vfiprintf_r+0x120>
 8000d44:	9a07      	ldr	r2, [sp, #28]
 8000d46:	4654      	mov	r4, sl
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f04f 0c0a 	mov.w	ip, #10
 8000d4e:	4621      	mov	r1, r4
 8000d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d54:	3b30      	subs	r3, #48	@ 0x30
 8000d56:	2b09      	cmp	r3, #9
 8000d58:	d94b      	bls.n	8000df2 <_vfiprintf_r+0x1a2>
 8000d5a:	b1b0      	cbz	r0, 8000d8a <_vfiprintf_r+0x13a>
 8000d5c:	9207      	str	r2, [sp, #28]
 8000d5e:	e014      	b.n	8000d8a <_vfiprintf_r+0x13a>
 8000d60:	eba0 0308 	sub.w	r3, r0, r8
 8000d64:	fa09 f303 	lsl.w	r3, r9, r3
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	9304      	str	r3, [sp, #16]
 8000d6c:	46a2      	mov	sl, r4
 8000d6e:	e7d2      	b.n	8000d16 <_vfiprintf_r+0xc6>
 8000d70:	9b03      	ldr	r3, [sp, #12]
 8000d72:	1d19      	adds	r1, r3, #4
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	9103      	str	r1, [sp, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	bfbb      	ittet	lt
 8000d7c:	425b      	neglt	r3, r3
 8000d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8000d82:	9307      	strge	r3, [sp, #28]
 8000d84:	9307      	strlt	r3, [sp, #28]
 8000d86:	bfb8      	it	lt
 8000d88:	9204      	strlt	r2, [sp, #16]
 8000d8a:	7823      	ldrb	r3, [r4, #0]
 8000d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d8e:	d10a      	bne.n	8000da6 <_vfiprintf_r+0x156>
 8000d90:	7863      	ldrb	r3, [r4, #1]
 8000d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d94:	d132      	bne.n	8000dfc <_vfiprintf_r+0x1ac>
 8000d96:	9b03      	ldr	r3, [sp, #12]
 8000d98:	1d1a      	adds	r2, r3, #4
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	9203      	str	r2, [sp, #12]
 8000d9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000da2:	3402      	adds	r4, #2
 8000da4:	9305      	str	r3, [sp, #20]
 8000da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e7c <_vfiprintf_r+0x22c>
 8000daa:	7821      	ldrb	r1, [r4, #0]
 8000dac:	2203      	movs	r2, #3
 8000dae:	4650      	mov	r0, sl
 8000db0:	f7ff fa16 	bl	80001e0 <memchr>
 8000db4:	b138      	cbz	r0, 8000dc6 <_vfiprintf_r+0x176>
 8000db6:	9b04      	ldr	r3, [sp, #16]
 8000db8:	eba0 000a 	sub.w	r0, r0, sl
 8000dbc:	2240      	movs	r2, #64	@ 0x40
 8000dbe:	4082      	lsls	r2, r0
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	3401      	adds	r4, #1
 8000dc4:	9304      	str	r3, [sp, #16]
 8000dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dca:	4829      	ldr	r0, [pc, #164]	@ (8000e70 <_vfiprintf_r+0x220>)
 8000dcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000dd0:	2206      	movs	r2, #6
 8000dd2:	f7ff fa05 	bl	80001e0 <memchr>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d03f      	beq.n	8000e5a <_vfiprintf_r+0x20a>
 8000dda:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <_vfiprintf_r+0x224>)
 8000ddc:	bb1b      	cbnz	r3, 8000e26 <_vfiprintf_r+0x1d6>
 8000dde:	9b03      	ldr	r3, [sp, #12]
 8000de0:	3307      	adds	r3, #7
 8000de2:	f023 0307 	bic.w	r3, r3, #7
 8000de6:	3308      	adds	r3, #8
 8000de8:	9303      	str	r3, [sp, #12]
 8000dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000dec:	443b      	add	r3, r7
 8000dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8000df0:	e76a      	b.n	8000cc8 <_vfiprintf_r+0x78>
 8000df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000df6:	460c      	mov	r4, r1
 8000df8:	2001      	movs	r0, #1
 8000dfa:	e7a8      	b.n	8000d4e <_vfiprintf_r+0xfe>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	3401      	adds	r4, #1
 8000e00:	9305      	str	r3, [sp, #20]
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 0c0a 	mov.w	ip, #10
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e0e:	3a30      	subs	r2, #48	@ 0x30
 8000e10:	2a09      	cmp	r2, #9
 8000e12:	d903      	bls.n	8000e1c <_vfiprintf_r+0x1cc>
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0c6      	beq.n	8000da6 <_vfiprintf_r+0x156>
 8000e18:	9105      	str	r1, [sp, #20]
 8000e1a:	e7c4      	b.n	8000da6 <_vfiprintf_r+0x156>
 8000e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e20:	4604      	mov	r4, r0
 8000e22:	2301      	movs	r3, #1
 8000e24:	e7f0      	b.n	8000e08 <_vfiprintf_r+0x1b8>
 8000e26:	ab03      	add	r3, sp, #12
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	462a      	mov	r2, r5
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <_vfiprintf_r+0x228>)
 8000e2e:	a904      	add	r1, sp, #16
 8000e30:	4630      	mov	r0, r6
 8000e32:	f3af 8000 	nop.w
 8000e36:	4607      	mov	r7, r0
 8000e38:	1c78      	adds	r0, r7, #1
 8000e3a:	d1d6      	bne.n	8000dea <_vfiprintf_r+0x19a>
 8000e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e3e:	07d9      	lsls	r1, r3, #31
 8000e40:	d405      	bmi.n	8000e4e <_vfiprintf_r+0x1fe>
 8000e42:	89ab      	ldrh	r3, [r5, #12]
 8000e44:	059a      	lsls	r2, r3, #22
 8000e46:	d402      	bmi.n	8000e4e <_vfiprintf_r+0x1fe>
 8000e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e4a:	f7ff fddd 	bl	8000a08 <__retarget_lock_release_recursive>
 8000e4e:	89ab      	ldrh	r3, [r5, #12]
 8000e50:	065b      	lsls	r3, r3, #25
 8000e52:	f53f af1f 	bmi.w	8000c94 <_vfiprintf_r+0x44>
 8000e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e58:	e71e      	b.n	8000c98 <_vfiprintf_r+0x48>
 8000e5a:	ab03      	add	r3, sp, #12
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	462a      	mov	r2, r5
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <_vfiprintf_r+0x228>)
 8000e62:	a904      	add	r1, sp, #16
 8000e64:	4630      	mov	r0, r6
 8000e66:	f000 f879 	bl	8000f5c <_printf_i>
 8000e6a:	e7e4      	b.n	8000e36 <_vfiprintf_r+0x1e6>
 8000e6c:	08001571 	.word	0x08001571
 8000e70:	0800157b 	.word	0x0800157b
 8000e74:	00000000 	.word	0x00000000
 8000e78:	08000c2b 	.word	0x08000c2b
 8000e7c:	08001577 	.word	0x08001577

08000e80 <_printf_common>:
 8000e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e84:	4616      	mov	r6, r2
 8000e86:	4698      	mov	r8, r3
 8000e88:	688a      	ldr	r2, [r1, #8]
 8000e8a:	690b      	ldr	r3, [r1, #16]
 8000e8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	bfb8      	it	lt
 8000e94:	4613      	movlt	r3, r2
 8000e96:	6033      	str	r3, [r6, #0]
 8000e98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	b10a      	cbz	r2, 8000ea6 <_printf_common+0x26>
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	6033      	str	r3, [r6, #0]
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	0699      	lsls	r1, r3, #26
 8000eaa:	bf42      	ittt	mi
 8000eac:	6833      	ldrmi	r3, [r6, #0]
 8000eae:	3302      	addmi	r3, #2
 8000eb0:	6033      	strmi	r3, [r6, #0]
 8000eb2:	6825      	ldr	r5, [r4, #0]
 8000eb4:	f015 0506 	ands.w	r5, r5, #6
 8000eb8:	d106      	bne.n	8000ec8 <_printf_common+0x48>
 8000eba:	f104 0a19 	add.w	sl, r4, #25
 8000ebe:	68e3      	ldr	r3, [r4, #12]
 8000ec0:	6832      	ldr	r2, [r6, #0]
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	42ab      	cmp	r3, r5
 8000ec6:	dc26      	bgt.n	8000f16 <_printf_common+0x96>
 8000ec8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ecc:	6822      	ldr	r2, [r4, #0]
 8000ece:	3b00      	subs	r3, #0
 8000ed0:	bf18      	it	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	0692      	lsls	r2, r2, #26
 8000ed6:	d42b      	bmi.n	8000f30 <_printf_common+0xb0>
 8000ed8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000edc:	4641      	mov	r1, r8
 8000ede:	4638      	mov	r0, r7
 8000ee0:	47c8      	blx	r9
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	d01e      	beq.n	8000f24 <_printf_common+0xa4>
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	6922      	ldr	r2, [r4, #16]
 8000eea:	f003 0306 	and.w	r3, r3, #6
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf02      	ittt	eq
 8000ef2:	68e5      	ldreq	r5, [r4, #12]
 8000ef4:	6833      	ldreq	r3, [r6, #0]
 8000ef6:	1aed      	subeq	r5, r5, r3
 8000ef8:	68a3      	ldr	r3, [r4, #8]
 8000efa:	bf0c      	ite	eq
 8000efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f00:	2500      	movne	r5, #0
 8000f02:	4293      	cmp	r3, r2
 8000f04:	bfc4      	itt	gt
 8000f06:	1a9b      	subgt	r3, r3, r2
 8000f08:	18ed      	addgt	r5, r5, r3
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	341a      	adds	r4, #26
 8000f0e:	42b5      	cmp	r5, r6
 8000f10:	d11a      	bne.n	8000f48 <_printf_common+0xc8>
 8000f12:	2000      	movs	r0, #0
 8000f14:	e008      	b.n	8000f28 <_printf_common+0xa8>
 8000f16:	2301      	movs	r3, #1
 8000f18:	4652      	mov	r2, sl
 8000f1a:	4641      	mov	r1, r8
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	47c8      	blx	r9
 8000f20:	3001      	adds	r0, #1
 8000f22:	d103      	bne.n	8000f2c <_printf_common+0xac>
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2c:	3501      	adds	r5, #1
 8000f2e:	e7c6      	b.n	8000ebe <_printf_common+0x3e>
 8000f30:	18e1      	adds	r1, r4, r3
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	2030      	movs	r0, #48	@ 0x30
 8000f36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f3a:	4422      	add	r2, r4
 8000f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f44:	3302      	adds	r3, #2
 8000f46:	e7c7      	b.n	8000ed8 <_printf_common+0x58>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	4641      	mov	r1, r8
 8000f4e:	4638      	mov	r0, r7
 8000f50:	47c8      	blx	r9
 8000f52:	3001      	adds	r0, #1
 8000f54:	d0e6      	beq.n	8000f24 <_printf_common+0xa4>
 8000f56:	3601      	adds	r6, #1
 8000f58:	e7d9      	b.n	8000f0e <_printf_common+0x8e>
	...

08000f5c <_printf_i>:
 8000f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f60:	7e0f      	ldrb	r7, [r1, #24]
 8000f62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f64:	2f78      	cmp	r7, #120	@ 0x78
 8000f66:	4691      	mov	r9, r2
 8000f68:	4680      	mov	r8, r0
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	469a      	mov	sl, r3
 8000f6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f72:	d807      	bhi.n	8000f84 <_printf_i+0x28>
 8000f74:	2f62      	cmp	r7, #98	@ 0x62
 8000f76:	d80a      	bhi.n	8000f8e <_printf_i+0x32>
 8000f78:	2f00      	cmp	r7, #0
 8000f7a:	f000 80d1 	beq.w	8001120 <_printf_i+0x1c4>
 8000f7e:	2f58      	cmp	r7, #88	@ 0x58
 8000f80:	f000 80b8 	beq.w	80010f4 <_printf_i+0x198>
 8000f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f8c:	e03a      	b.n	8001004 <_printf_i+0xa8>
 8000f8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f92:	2b15      	cmp	r3, #21
 8000f94:	d8f6      	bhi.n	8000f84 <_printf_i+0x28>
 8000f96:	a101      	add	r1, pc, #4	@ (adr r1, 8000f9c <_printf_i+0x40>)
 8000f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f9c:	08000ff5 	.word	0x08000ff5
 8000fa0:	08001009 	.word	0x08001009
 8000fa4:	08000f85 	.word	0x08000f85
 8000fa8:	08000f85 	.word	0x08000f85
 8000fac:	08000f85 	.word	0x08000f85
 8000fb0:	08000f85 	.word	0x08000f85
 8000fb4:	08001009 	.word	0x08001009
 8000fb8:	08000f85 	.word	0x08000f85
 8000fbc:	08000f85 	.word	0x08000f85
 8000fc0:	08000f85 	.word	0x08000f85
 8000fc4:	08000f85 	.word	0x08000f85
 8000fc8:	08001107 	.word	0x08001107
 8000fcc:	08001033 	.word	0x08001033
 8000fd0:	080010c1 	.word	0x080010c1
 8000fd4:	08000f85 	.word	0x08000f85
 8000fd8:	08000f85 	.word	0x08000f85
 8000fdc:	08001129 	.word	0x08001129
 8000fe0:	08000f85 	.word	0x08000f85
 8000fe4:	08001033 	.word	0x08001033
 8000fe8:	08000f85 	.word	0x08000f85
 8000fec:	08000f85 	.word	0x08000f85
 8000ff0:	080010c9 	.word	0x080010c9
 8000ff4:	6833      	ldr	r3, [r6, #0]
 8000ff6:	1d1a      	adds	r2, r3, #4
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6032      	str	r2, [r6, #0]
 8000ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001000:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001004:	2301      	movs	r3, #1
 8001006:	e09c      	b.n	8001142 <_printf_i+0x1e6>
 8001008:	6833      	ldr	r3, [r6, #0]
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	1d19      	adds	r1, r3, #4
 800100e:	6031      	str	r1, [r6, #0]
 8001010:	0606      	lsls	r6, r0, #24
 8001012:	d501      	bpl.n	8001018 <_printf_i+0xbc>
 8001014:	681d      	ldr	r5, [r3, #0]
 8001016:	e003      	b.n	8001020 <_printf_i+0xc4>
 8001018:	0645      	lsls	r5, r0, #25
 800101a:	d5fb      	bpl.n	8001014 <_printf_i+0xb8>
 800101c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001020:	2d00      	cmp	r5, #0
 8001022:	da03      	bge.n	800102c <_printf_i+0xd0>
 8001024:	232d      	movs	r3, #45	@ 0x2d
 8001026:	426d      	negs	r5, r5
 8001028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800102c:	4858      	ldr	r0, [pc, #352]	@ (8001190 <_printf_i+0x234>)
 800102e:	230a      	movs	r3, #10
 8001030:	e011      	b.n	8001056 <_printf_i+0xfa>
 8001032:	6821      	ldr	r1, [r4, #0]
 8001034:	6833      	ldr	r3, [r6, #0]
 8001036:	0608      	lsls	r0, r1, #24
 8001038:	f853 5b04 	ldr.w	r5, [r3], #4
 800103c:	d402      	bmi.n	8001044 <_printf_i+0xe8>
 800103e:	0649      	lsls	r1, r1, #25
 8001040:	bf48      	it	mi
 8001042:	b2ad      	uxthmi	r5, r5
 8001044:	2f6f      	cmp	r7, #111	@ 0x6f
 8001046:	4852      	ldr	r0, [pc, #328]	@ (8001190 <_printf_i+0x234>)
 8001048:	6033      	str	r3, [r6, #0]
 800104a:	bf14      	ite	ne
 800104c:	230a      	movne	r3, #10
 800104e:	2308      	moveq	r3, #8
 8001050:	2100      	movs	r1, #0
 8001052:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001056:	6866      	ldr	r6, [r4, #4]
 8001058:	60a6      	str	r6, [r4, #8]
 800105a:	2e00      	cmp	r6, #0
 800105c:	db05      	blt.n	800106a <_printf_i+0x10e>
 800105e:	6821      	ldr	r1, [r4, #0]
 8001060:	432e      	orrs	r6, r5
 8001062:	f021 0104 	bic.w	r1, r1, #4
 8001066:	6021      	str	r1, [r4, #0]
 8001068:	d04b      	beq.n	8001102 <_printf_i+0x1a6>
 800106a:	4616      	mov	r6, r2
 800106c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001070:	fb03 5711 	mls	r7, r3, r1, r5
 8001074:	5dc7      	ldrb	r7, [r0, r7]
 8001076:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800107a:	462f      	mov	r7, r5
 800107c:	42bb      	cmp	r3, r7
 800107e:	460d      	mov	r5, r1
 8001080:	d9f4      	bls.n	800106c <_printf_i+0x110>
 8001082:	2b08      	cmp	r3, #8
 8001084:	d10b      	bne.n	800109e <_printf_i+0x142>
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	07df      	lsls	r7, r3, #31
 800108a:	d508      	bpl.n	800109e <_printf_i+0x142>
 800108c:	6923      	ldr	r3, [r4, #16]
 800108e:	6861      	ldr	r1, [r4, #4]
 8001090:	4299      	cmp	r1, r3
 8001092:	bfde      	ittt	le
 8001094:	2330      	movle	r3, #48	@ 0x30
 8001096:	f806 3c01 	strble.w	r3, [r6, #-1]
 800109a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800109e:	1b92      	subs	r2, r2, r6
 80010a0:	6122      	str	r2, [r4, #16]
 80010a2:	f8cd a000 	str.w	sl, [sp]
 80010a6:	464b      	mov	r3, r9
 80010a8:	aa03      	add	r2, sp, #12
 80010aa:	4621      	mov	r1, r4
 80010ac:	4640      	mov	r0, r8
 80010ae:	f7ff fee7 	bl	8000e80 <_printf_common>
 80010b2:	3001      	adds	r0, #1
 80010b4:	d14a      	bne.n	800114c <_printf_i+0x1f0>
 80010b6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ba:	b004      	add	sp, #16
 80010bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	6023      	str	r3, [r4, #0]
 80010c8:	4832      	ldr	r0, [pc, #200]	@ (8001194 <_printf_i+0x238>)
 80010ca:	2778      	movs	r7, #120	@ 0x78
 80010cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	6831      	ldr	r1, [r6, #0]
 80010d4:	061f      	lsls	r7, r3, #24
 80010d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80010da:	d402      	bmi.n	80010e2 <_printf_i+0x186>
 80010dc:	065f      	lsls	r7, r3, #25
 80010de:	bf48      	it	mi
 80010e0:	b2ad      	uxthmi	r5, r5
 80010e2:	6031      	str	r1, [r6, #0]
 80010e4:	07d9      	lsls	r1, r3, #31
 80010e6:	bf44      	itt	mi
 80010e8:	f043 0320 	orrmi.w	r3, r3, #32
 80010ec:	6023      	strmi	r3, [r4, #0]
 80010ee:	b11d      	cbz	r5, 80010f8 <_printf_i+0x19c>
 80010f0:	2310      	movs	r3, #16
 80010f2:	e7ad      	b.n	8001050 <_printf_i+0xf4>
 80010f4:	4826      	ldr	r0, [pc, #152]	@ (8001190 <_printf_i+0x234>)
 80010f6:	e7e9      	b.n	80010cc <_printf_i+0x170>
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	f023 0320 	bic.w	r3, r3, #32
 80010fe:	6023      	str	r3, [r4, #0]
 8001100:	e7f6      	b.n	80010f0 <_printf_i+0x194>
 8001102:	4616      	mov	r6, r2
 8001104:	e7bd      	b.n	8001082 <_printf_i+0x126>
 8001106:	6833      	ldr	r3, [r6, #0]
 8001108:	6825      	ldr	r5, [r4, #0]
 800110a:	6961      	ldr	r1, [r4, #20]
 800110c:	1d18      	adds	r0, r3, #4
 800110e:	6030      	str	r0, [r6, #0]
 8001110:	062e      	lsls	r6, r5, #24
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	d501      	bpl.n	800111a <_printf_i+0x1be>
 8001116:	6019      	str	r1, [r3, #0]
 8001118:	e002      	b.n	8001120 <_printf_i+0x1c4>
 800111a:	0668      	lsls	r0, r5, #25
 800111c:	d5fb      	bpl.n	8001116 <_printf_i+0x1ba>
 800111e:	8019      	strh	r1, [r3, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	6123      	str	r3, [r4, #16]
 8001124:	4616      	mov	r6, r2
 8001126:	e7bc      	b.n	80010a2 <_printf_i+0x146>
 8001128:	6833      	ldr	r3, [r6, #0]
 800112a:	1d1a      	adds	r2, r3, #4
 800112c:	6032      	str	r2, [r6, #0]
 800112e:	681e      	ldr	r6, [r3, #0]
 8001130:	6862      	ldr	r2, [r4, #4]
 8001132:	2100      	movs	r1, #0
 8001134:	4630      	mov	r0, r6
 8001136:	f7ff f853 	bl	80001e0 <memchr>
 800113a:	b108      	cbz	r0, 8001140 <_printf_i+0x1e4>
 800113c:	1b80      	subs	r0, r0, r6
 800113e:	6060      	str	r0, [r4, #4]
 8001140:	6863      	ldr	r3, [r4, #4]
 8001142:	6123      	str	r3, [r4, #16]
 8001144:	2300      	movs	r3, #0
 8001146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800114a:	e7aa      	b.n	80010a2 <_printf_i+0x146>
 800114c:	6923      	ldr	r3, [r4, #16]
 800114e:	4632      	mov	r2, r6
 8001150:	4649      	mov	r1, r9
 8001152:	4640      	mov	r0, r8
 8001154:	47d0      	blx	sl
 8001156:	3001      	adds	r0, #1
 8001158:	d0ad      	beq.n	80010b6 <_printf_i+0x15a>
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	079b      	lsls	r3, r3, #30
 800115e:	d413      	bmi.n	8001188 <_printf_i+0x22c>
 8001160:	68e0      	ldr	r0, [r4, #12]
 8001162:	9b03      	ldr	r3, [sp, #12]
 8001164:	4298      	cmp	r0, r3
 8001166:	bfb8      	it	lt
 8001168:	4618      	movlt	r0, r3
 800116a:	e7a6      	b.n	80010ba <_printf_i+0x15e>
 800116c:	2301      	movs	r3, #1
 800116e:	4632      	mov	r2, r6
 8001170:	4649      	mov	r1, r9
 8001172:	4640      	mov	r0, r8
 8001174:	47d0      	blx	sl
 8001176:	3001      	adds	r0, #1
 8001178:	d09d      	beq.n	80010b6 <_printf_i+0x15a>
 800117a:	3501      	adds	r5, #1
 800117c:	68e3      	ldr	r3, [r4, #12]
 800117e:	9903      	ldr	r1, [sp, #12]
 8001180:	1a5b      	subs	r3, r3, r1
 8001182:	42ab      	cmp	r3, r5
 8001184:	dcf2      	bgt.n	800116c <_printf_i+0x210>
 8001186:	e7eb      	b.n	8001160 <_printf_i+0x204>
 8001188:	2500      	movs	r5, #0
 800118a:	f104 0619 	add.w	r6, r4, #25
 800118e:	e7f5      	b.n	800117c <_printf_i+0x220>
 8001190:	08001582 	.word	0x08001582
 8001194:	08001593 	.word	0x08001593

08001198 <__sflush_r>:
 8001198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800119c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a0:	0716      	lsls	r6, r2, #28
 80011a2:	4605      	mov	r5, r0
 80011a4:	460c      	mov	r4, r1
 80011a6:	d454      	bmi.n	8001252 <__sflush_r+0xba>
 80011a8:	684b      	ldr	r3, [r1, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dc02      	bgt.n	80011b4 <__sflush_r+0x1c>
 80011ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	dd48      	ble.n	8001246 <__sflush_r+0xae>
 80011b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	d045      	beq.n	8001246 <__sflush_r+0xae>
 80011ba:	2300      	movs	r3, #0
 80011bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011c0:	682f      	ldr	r7, [r5, #0]
 80011c2:	6a21      	ldr	r1, [r4, #32]
 80011c4:	602b      	str	r3, [r5, #0]
 80011c6:	d030      	beq.n	800122a <__sflush_r+0x92>
 80011c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	0759      	lsls	r1, r3, #29
 80011ce:	d505      	bpl.n	80011dc <__sflush_r+0x44>
 80011d0:	6863      	ldr	r3, [r4, #4]
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011d6:	b10b      	cbz	r3, 80011dc <__sflush_r+0x44>
 80011d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011da:	1ad2      	subs	r2, r2, r3
 80011dc:	2300      	movs	r3, #0
 80011de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011e0:	6a21      	ldr	r1, [r4, #32]
 80011e2:	4628      	mov	r0, r5
 80011e4:	47b0      	blx	r6
 80011e6:	1c43      	adds	r3, r0, #1
 80011e8:	89a3      	ldrh	r3, [r4, #12]
 80011ea:	d106      	bne.n	80011fa <__sflush_r+0x62>
 80011ec:	6829      	ldr	r1, [r5, #0]
 80011ee:	291d      	cmp	r1, #29
 80011f0:	d82b      	bhi.n	800124a <__sflush_r+0xb2>
 80011f2:	4a2a      	ldr	r2, [pc, #168]	@ (800129c <__sflush_r+0x104>)
 80011f4:	40ca      	lsrs	r2, r1
 80011f6:	07d6      	lsls	r6, r2, #31
 80011f8:	d527      	bpl.n	800124a <__sflush_r+0xb2>
 80011fa:	2200      	movs	r2, #0
 80011fc:	6062      	str	r2, [r4, #4]
 80011fe:	04d9      	lsls	r1, r3, #19
 8001200:	6922      	ldr	r2, [r4, #16]
 8001202:	6022      	str	r2, [r4, #0]
 8001204:	d504      	bpl.n	8001210 <__sflush_r+0x78>
 8001206:	1c42      	adds	r2, r0, #1
 8001208:	d101      	bne.n	800120e <__sflush_r+0x76>
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	b903      	cbnz	r3, 8001210 <__sflush_r+0x78>
 800120e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001212:	602f      	str	r7, [r5, #0]
 8001214:	b1b9      	cbz	r1, 8001246 <__sflush_r+0xae>
 8001216:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800121a:	4299      	cmp	r1, r3
 800121c:	d002      	beq.n	8001224 <__sflush_r+0x8c>
 800121e:	4628      	mov	r0, r5
 8001220:	f7ff fbf4 	bl	8000a0c <_free_r>
 8001224:	2300      	movs	r3, #0
 8001226:	6363      	str	r3, [r4, #52]	@ 0x34
 8001228:	e00d      	b.n	8001246 <__sflush_r+0xae>
 800122a:	2301      	movs	r3, #1
 800122c:	4628      	mov	r0, r5
 800122e:	47b0      	blx	r6
 8001230:	4602      	mov	r2, r0
 8001232:	1c50      	adds	r0, r2, #1
 8001234:	d1c9      	bne.n	80011ca <__sflush_r+0x32>
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0c6      	beq.n	80011ca <__sflush_r+0x32>
 800123c:	2b1d      	cmp	r3, #29
 800123e:	d001      	beq.n	8001244 <__sflush_r+0xac>
 8001240:	2b16      	cmp	r3, #22
 8001242:	d11e      	bne.n	8001282 <__sflush_r+0xea>
 8001244:	602f      	str	r7, [r5, #0]
 8001246:	2000      	movs	r0, #0
 8001248:	e022      	b.n	8001290 <__sflush_r+0xf8>
 800124a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800124e:	b21b      	sxth	r3, r3
 8001250:	e01b      	b.n	800128a <__sflush_r+0xf2>
 8001252:	690f      	ldr	r7, [r1, #16]
 8001254:	2f00      	cmp	r7, #0
 8001256:	d0f6      	beq.n	8001246 <__sflush_r+0xae>
 8001258:	0793      	lsls	r3, r2, #30
 800125a:	680e      	ldr	r6, [r1, #0]
 800125c:	bf08      	it	eq
 800125e:	694b      	ldreq	r3, [r1, #20]
 8001260:	600f      	str	r7, [r1, #0]
 8001262:	bf18      	it	ne
 8001264:	2300      	movne	r3, #0
 8001266:	eba6 0807 	sub.w	r8, r6, r7
 800126a:	608b      	str	r3, [r1, #8]
 800126c:	f1b8 0f00 	cmp.w	r8, #0
 8001270:	dde9      	ble.n	8001246 <__sflush_r+0xae>
 8001272:	6a21      	ldr	r1, [r4, #32]
 8001274:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001276:	4643      	mov	r3, r8
 8001278:	463a      	mov	r2, r7
 800127a:	4628      	mov	r0, r5
 800127c:	47b0      	blx	r6
 800127e:	2800      	cmp	r0, #0
 8001280:	dc08      	bgt.n	8001294 <__sflush_r+0xfc>
 8001282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800128a:	81a3      	strh	r3, [r4, #12]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001294:	4407      	add	r7, r0
 8001296:	eba8 0800 	sub.w	r8, r8, r0
 800129a:	e7e7      	b.n	800126c <__sflush_r+0xd4>
 800129c:	20400001 	.word	0x20400001

080012a0 <_fflush_r>:
 80012a0:	b538      	push	{r3, r4, r5, lr}
 80012a2:	690b      	ldr	r3, [r1, #16]
 80012a4:	4605      	mov	r5, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	b913      	cbnz	r3, 80012b0 <_fflush_r+0x10>
 80012aa:	2500      	movs	r5, #0
 80012ac:	4628      	mov	r0, r5
 80012ae:	bd38      	pop	{r3, r4, r5, pc}
 80012b0:	b118      	cbz	r0, 80012ba <_fflush_r+0x1a>
 80012b2:	6a03      	ldr	r3, [r0, #32]
 80012b4:	b90b      	cbnz	r3, 80012ba <_fflush_r+0x1a>
 80012b6:	f7ff faa1 	bl	80007fc <__sinit>
 80012ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f3      	beq.n	80012aa <_fflush_r+0xa>
 80012c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012c4:	07d0      	lsls	r0, r2, #31
 80012c6:	d404      	bmi.n	80012d2 <_fflush_r+0x32>
 80012c8:	0599      	lsls	r1, r3, #22
 80012ca:	d402      	bmi.n	80012d2 <_fflush_r+0x32>
 80012cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012ce:	f7ff fb9a 	bl	8000a06 <__retarget_lock_acquire_recursive>
 80012d2:	4628      	mov	r0, r5
 80012d4:	4621      	mov	r1, r4
 80012d6:	f7ff ff5f 	bl	8001198 <__sflush_r>
 80012da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012dc:	07da      	lsls	r2, r3, #31
 80012de:	4605      	mov	r5, r0
 80012e0:	d4e4      	bmi.n	80012ac <_fflush_r+0xc>
 80012e2:	89a3      	ldrh	r3, [r4, #12]
 80012e4:	059b      	lsls	r3, r3, #22
 80012e6:	d4e1      	bmi.n	80012ac <_fflush_r+0xc>
 80012e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012ea:	f7ff fb8d 	bl	8000a08 <__retarget_lock_release_recursive>
 80012ee:	e7dd      	b.n	80012ac <_fflush_r+0xc>

080012f0 <__swbuf_r>:
 80012f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f2:	460e      	mov	r6, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	4605      	mov	r5, r0
 80012f8:	b118      	cbz	r0, 8001302 <__swbuf_r+0x12>
 80012fa:	6a03      	ldr	r3, [r0, #32]
 80012fc:	b90b      	cbnz	r3, 8001302 <__swbuf_r+0x12>
 80012fe:	f7ff fa7d 	bl	80007fc <__sinit>
 8001302:	69a3      	ldr	r3, [r4, #24]
 8001304:	60a3      	str	r3, [r4, #8]
 8001306:	89a3      	ldrh	r3, [r4, #12]
 8001308:	071a      	lsls	r2, r3, #28
 800130a:	d501      	bpl.n	8001310 <__swbuf_r+0x20>
 800130c:	6923      	ldr	r3, [r4, #16]
 800130e:	b943      	cbnz	r3, 8001322 <__swbuf_r+0x32>
 8001310:	4621      	mov	r1, r4
 8001312:	4628      	mov	r0, r5
 8001314:	f000 f82a 	bl	800136c <__swsetup_r>
 8001318:	b118      	cbz	r0, 8001322 <__swbuf_r+0x32>
 800131a:	f04f 37ff 	mov.w	r7, #4294967295
 800131e:	4638      	mov	r0, r7
 8001320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	6922      	ldr	r2, [r4, #16]
 8001326:	1a98      	subs	r0, r3, r2
 8001328:	6963      	ldr	r3, [r4, #20]
 800132a:	b2f6      	uxtb	r6, r6
 800132c:	4283      	cmp	r3, r0
 800132e:	4637      	mov	r7, r6
 8001330:	dc05      	bgt.n	800133e <__swbuf_r+0x4e>
 8001332:	4621      	mov	r1, r4
 8001334:	4628      	mov	r0, r5
 8001336:	f7ff ffb3 	bl	80012a0 <_fflush_r>
 800133a:	2800      	cmp	r0, #0
 800133c:	d1ed      	bne.n	800131a <__swbuf_r+0x2a>
 800133e:	68a3      	ldr	r3, [r4, #8]
 8001340:	3b01      	subs	r3, #1
 8001342:	60a3      	str	r3, [r4, #8]
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	6022      	str	r2, [r4, #0]
 800134a:	701e      	strb	r6, [r3, #0]
 800134c:	6962      	ldr	r2, [r4, #20]
 800134e:	1c43      	adds	r3, r0, #1
 8001350:	429a      	cmp	r2, r3
 8001352:	d004      	beq.n	800135e <__swbuf_r+0x6e>
 8001354:	89a3      	ldrh	r3, [r4, #12]
 8001356:	07db      	lsls	r3, r3, #31
 8001358:	d5e1      	bpl.n	800131e <__swbuf_r+0x2e>
 800135a:	2e0a      	cmp	r6, #10
 800135c:	d1df      	bne.n	800131e <__swbuf_r+0x2e>
 800135e:	4621      	mov	r1, r4
 8001360:	4628      	mov	r0, r5
 8001362:	f7ff ff9d 	bl	80012a0 <_fflush_r>
 8001366:	2800      	cmp	r0, #0
 8001368:	d0d9      	beq.n	800131e <__swbuf_r+0x2e>
 800136a:	e7d6      	b.n	800131a <__swbuf_r+0x2a>

0800136c <__swsetup_r>:
 800136c:	b538      	push	{r3, r4, r5, lr}
 800136e:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <__swsetup_r+0xa8>)
 8001370:	4605      	mov	r5, r0
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	460c      	mov	r4, r1
 8001376:	b118      	cbz	r0, 8001380 <__swsetup_r+0x14>
 8001378:	6a03      	ldr	r3, [r0, #32]
 800137a:	b90b      	cbnz	r3, 8001380 <__swsetup_r+0x14>
 800137c:	f7ff fa3e 	bl	80007fc <__sinit>
 8001380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001384:	0719      	lsls	r1, r3, #28
 8001386:	d422      	bmi.n	80013ce <__swsetup_r+0x62>
 8001388:	06da      	lsls	r2, r3, #27
 800138a:	d407      	bmi.n	800139c <__swsetup_r+0x30>
 800138c:	2209      	movs	r2, #9
 800138e:	602a      	str	r2, [r5, #0]
 8001390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001394:	81a3      	strh	r3, [r4, #12]
 8001396:	f04f 30ff 	mov.w	r0, #4294967295
 800139a:	e033      	b.n	8001404 <__swsetup_r+0x98>
 800139c:	0758      	lsls	r0, r3, #29
 800139e:	d512      	bpl.n	80013c6 <__swsetup_r+0x5a>
 80013a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013a2:	b141      	cbz	r1, 80013b6 <__swsetup_r+0x4a>
 80013a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013a8:	4299      	cmp	r1, r3
 80013aa:	d002      	beq.n	80013b2 <__swsetup_r+0x46>
 80013ac:	4628      	mov	r0, r5
 80013ae:	f7ff fb2d 	bl	8000a0c <_free_r>
 80013b2:	2300      	movs	r3, #0
 80013b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80013b6:	89a3      	ldrh	r3, [r4, #12]
 80013b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013bc:	81a3      	strh	r3, [r4, #12]
 80013be:	2300      	movs	r3, #0
 80013c0:	6063      	str	r3, [r4, #4]
 80013c2:	6923      	ldr	r3, [r4, #16]
 80013c4:	6023      	str	r3, [r4, #0]
 80013c6:	89a3      	ldrh	r3, [r4, #12]
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	81a3      	strh	r3, [r4, #12]
 80013ce:	6923      	ldr	r3, [r4, #16]
 80013d0:	b94b      	cbnz	r3, 80013e6 <__swsetup_r+0x7a>
 80013d2:	89a3      	ldrh	r3, [r4, #12]
 80013d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013dc:	d003      	beq.n	80013e6 <__swsetup_r+0x7a>
 80013de:	4621      	mov	r1, r4
 80013e0:	4628      	mov	r0, r5
 80013e2:	f000 f84f 	bl	8001484 <__smakebuf_r>
 80013e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ea:	f013 0201 	ands.w	r2, r3, #1
 80013ee:	d00a      	beq.n	8001406 <__swsetup_r+0x9a>
 80013f0:	2200      	movs	r2, #0
 80013f2:	60a2      	str	r2, [r4, #8]
 80013f4:	6962      	ldr	r2, [r4, #20]
 80013f6:	4252      	negs	r2, r2
 80013f8:	61a2      	str	r2, [r4, #24]
 80013fa:	6922      	ldr	r2, [r4, #16]
 80013fc:	b942      	cbnz	r2, 8001410 <__swsetup_r+0xa4>
 80013fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001402:	d1c5      	bne.n	8001390 <__swsetup_r+0x24>
 8001404:	bd38      	pop	{r3, r4, r5, pc}
 8001406:	0799      	lsls	r1, r3, #30
 8001408:	bf58      	it	pl
 800140a:	6962      	ldrpl	r2, [r4, #20]
 800140c:	60a2      	str	r2, [r4, #8]
 800140e:	e7f4      	b.n	80013fa <__swsetup_r+0x8e>
 8001410:	2000      	movs	r0, #0
 8001412:	e7f7      	b.n	8001404 <__swsetup_r+0x98>
 8001414:	20000010 	.word	0x20000010

08001418 <_sbrk_r>:
 8001418:	b538      	push	{r3, r4, r5, lr}
 800141a:	4d06      	ldr	r5, [pc, #24]	@ (8001434 <_sbrk_r+0x1c>)
 800141c:	2300      	movs	r3, #0
 800141e:	4604      	mov	r4, r0
 8001420:	4608      	mov	r0, r1
 8001422:	602b      	str	r3, [r5, #0]
 8001424:	f7fe fff4 	bl	8000410 <_sbrk>
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	d102      	bne.n	8001432 <_sbrk_r+0x1a>
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	b103      	cbz	r3, 8001432 <_sbrk_r+0x1a>
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	bd38      	pop	{r3, r4, r5, pc}
 8001434:	200001c0 	.word	0x200001c0

08001438 <__swhatbuf_r>:
 8001438:	b570      	push	{r4, r5, r6, lr}
 800143a:	460c      	mov	r4, r1
 800143c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001440:	2900      	cmp	r1, #0
 8001442:	b096      	sub	sp, #88	@ 0x58
 8001444:	4615      	mov	r5, r2
 8001446:	461e      	mov	r6, r3
 8001448:	da0d      	bge.n	8001466 <__swhatbuf_r+0x2e>
 800144a:	89a3      	ldrh	r3, [r4, #12]
 800144c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001450:	f04f 0100 	mov.w	r1, #0
 8001454:	bf14      	ite	ne
 8001456:	2340      	movne	r3, #64	@ 0x40
 8001458:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800145c:	2000      	movs	r0, #0
 800145e:	6031      	str	r1, [r6, #0]
 8001460:	602b      	str	r3, [r5, #0]
 8001462:	b016      	add	sp, #88	@ 0x58
 8001464:	bd70      	pop	{r4, r5, r6, pc}
 8001466:	466a      	mov	r2, sp
 8001468:	f000 f848 	bl	80014fc <_fstat_r>
 800146c:	2800      	cmp	r0, #0
 800146e:	dbec      	blt.n	800144a <__swhatbuf_r+0x12>
 8001470:	9901      	ldr	r1, [sp, #4]
 8001472:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001476:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800147a:	4259      	negs	r1, r3
 800147c:	4159      	adcs	r1, r3
 800147e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001482:	e7eb      	b.n	800145c <__swhatbuf_r+0x24>

08001484 <__smakebuf_r>:
 8001484:	898b      	ldrh	r3, [r1, #12]
 8001486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001488:	079d      	lsls	r5, r3, #30
 800148a:	4606      	mov	r6, r0
 800148c:	460c      	mov	r4, r1
 800148e:	d507      	bpl.n	80014a0 <__smakebuf_r+0x1c>
 8001490:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	6123      	str	r3, [r4, #16]
 8001498:	2301      	movs	r3, #1
 800149a:	6163      	str	r3, [r4, #20]
 800149c:	b003      	add	sp, #12
 800149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a0:	ab01      	add	r3, sp, #4
 80014a2:	466a      	mov	r2, sp
 80014a4:	f7ff ffc8 	bl	8001438 <__swhatbuf_r>
 80014a8:	9f00      	ldr	r7, [sp, #0]
 80014aa:	4605      	mov	r5, r0
 80014ac:	4639      	mov	r1, r7
 80014ae:	4630      	mov	r0, r6
 80014b0:	f7ff fb18 	bl	8000ae4 <_malloc_r>
 80014b4:	b948      	cbnz	r0, 80014ca <__smakebuf_r+0x46>
 80014b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ba:	059a      	lsls	r2, r3, #22
 80014bc:	d4ee      	bmi.n	800149c <__smakebuf_r+0x18>
 80014be:	f023 0303 	bic.w	r3, r3, #3
 80014c2:	f043 0302 	orr.w	r3, r3, #2
 80014c6:	81a3      	strh	r3, [r4, #12]
 80014c8:	e7e2      	b.n	8001490 <__smakebuf_r+0xc>
 80014ca:	89a3      	ldrh	r3, [r4, #12]
 80014cc:	6020      	str	r0, [r4, #0]
 80014ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d2:	81a3      	strh	r3, [r4, #12]
 80014d4:	9b01      	ldr	r3, [sp, #4]
 80014d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014da:	b15b      	cbz	r3, 80014f4 <__smakebuf_r+0x70>
 80014dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014e0:	4630      	mov	r0, r6
 80014e2:	f000 f81d 	bl	8001520 <_isatty_r>
 80014e6:	b128      	cbz	r0, 80014f4 <__smakebuf_r+0x70>
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	f023 0303 	bic.w	r3, r3, #3
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	81a3      	strh	r3, [r4, #12]
 80014f4:	89a3      	ldrh	r3, [r4, #12]
 80014f6:	431d      	orrs	r5, r3
 80014f8:	81a5      	strh	r5, [r4, #12]
 80014fa:	e7cf      	b.n	800149c <__smakebuf_r+0x18>

080014fc <_fstat_r>:
 80014fc:	b538      	push	{r3, r4, r5, lr}
 80014fe:	4d07      	ldr	r5, [pc, #28]	@ (800151c <_fstat_r+0x20>)
 8001500:	2300      	movs	r3, #0
 8001502:	4604      	mov	r4, r0
 8001504:	4608      	mov	r0, r1
 8001506:	4611      	mov	r1, r2
 8001508:	602b      	str	r3, [r5, #0]
 800150a:	f7fe ff59 	bl	80003c0 <_fstat>
 800150e:	1c43      	adds	r3, r0, #1
 8001510:	d102      	bne.n	8001518 <_fstat_r+0x1c>
 8001512:	682b      	ldr	r3, [r5, #0]
 8001514:	b103      	cbz	r3, 8001518 <_fstat_r+0x1c>
 8001516:	6023      	str	r3, [r4, #0]
 8001518:	bd38      	pop	{r3, r4, r5, pc}
 800151a:	bf00      	nop
 800151c:	200001c0 	.word	0x200001c0

08001520 <_isatty_r>:
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	4d06      	ldr	r5, [pc, #24]	@ (800153c <_isatty_r+0x1c>)
 8001524:	2300      	movs	r3, #0
 8001526:	4604      	mov	r4, r0
 8001528:	4608      	mov	r0, r1
 800152a:	602b      	str	r3, [r5, #0]
 800152c:	f7fe ff58 	bl	80003e0 <_isatty>
 8001530:	1c43      	adds	r3, r0, #1
 8001532:	d102      	bne.n	800153a <_isatty_r+0x1a>
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	b103      	cbz	r3, 800153a <_isatty_r+0x1a>
 8001538:	6023      	str	r3, [r4, #0]
 800153a:	bd38      	pop	{r3, r4, r5, pc}
 800153c:	200001c0 	.word	0x200001c0

08001540 <_init>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	bf00      	nop
 8001544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001546:	bc08      	pop	{r3}
 8001548:	469e      	mov	lr, r3
 800154a:	4770      	bx	lr

0800154c <_fini>:
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154e:	bf00      	nop
 8001550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001552:	bc08      	pop	{r3}
 8001554:	469e      	mov	lr, r3
 8001556:	4770      	bx	lr
